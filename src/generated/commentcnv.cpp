/************************************************************************
*
* Copyright (c) 2014-2024 Barbara Geller & Ansel Sermersheim
* Copyright (c) 1997-2014 Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentcnvYY_create_buffer
#define yy_delete_buffer commentcnvYY_delete_buffer
#define yy_scan_buffer commentcnvYY_scan_buffer
#define yy_scan_string commentcnvYY_scan_string
#define yy_scan_bytes commentcnvYY_scan_bytes
#define yy_init_buffer commentcnvYY_init_buffer
#define yy_flush_buffer commentcnvYY_flush_buffer
#define yy_load_buffer_state commentcnvYY_load_buffer_state
#define yy_switch_to_buffer commentcnvYY_switch_to_buffer
#define yypush_buffer_state commentcnvYYpush_buffer_state
#define yypop_buffer_state commentcnvYYpop_buffer_state
#define yyensure_buffer_stack commentcnvYYensure_buffer_stack
#define yy_flex_debug commentcnvYY_flex_debug
#define yyin commentcnvYYin
#define yyleng commentcnvYYleng
#define yylex commentcnvYYlex
#define yylineno commentcnvYYlineno
#define yyout commentcnvYYout
#define yyrestart commentcnvYYrestart
#define yytext commentcnvYYtext
#define yywrap commentcnvYYwrap
#define yyalloc commentcnvYYalloc
#define yyrealloc commentcnvYYrealloc
#define yyfree commentcnvYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define commentcnvYY_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer commentcnvYY_create_buffer
#endif

#ifdef yy_delete_buffer
#define commentcnvYY_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer commentcnvYY_delete_buffer
#endif

#ifdef yy_scan_buffer
#define commentcnvYY_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer commentcnvYY_scan_buffer
#endif

#ifdef yy_scan_string
#define commentcnvYY_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string commentcnvYY_scan_string
#endif

#ifdef yy_scan_bytes
#define commentcnvYY_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes commentcnvYY_scan_bytes
#endif

#ifdef yy_init_buffer
#define commentcnvYY_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer commentcnvYY_init_buffer
#endif

#ifdef yy_flush_buffer
#define commentcnvYY_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer commentcnvYY_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define commentcnvYY_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state commentcnvYY_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define commentcnvYY_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer commentcnvYY_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define commentcnvYYpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state commentcnvYYpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define commentcnvYYpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state commentcnvYYpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define commentcnvYYensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack commentcnvYYensure_buffer_stack
#endif

#ifdef yylex
#define commentcnvYYlex_ALREADY_DEFINED
#else
#define yylex commentcnvYYlex
#endif

#ifdef yyrestart
#define commentcnvYYrestart_ALREADY_DEFINED
#else
#define yyrestart commentcnvYYrestart
#endif

#ifdef yylex_init
#define commentcnvYYlex_init_ALREADY_DEFINED
#else
#define yylex_init commentcnvYYlex_init
#endif

#ifdef yylex_init_extra
#define commentcnvYYlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra commentcnvYYlex_init_extra
#endif

#ifdef yylex_destroy
#define commentcnvYYlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy commentcnvYYlex_destroy
#endif

#ifdef yyget_debug
#define commentcnvYYget_debug_ALREADY_DEFINED
#else
#define yyget_debug commentcnvYYget_debug
#endif

#ifdef yyset_debug
#define commentcnvYYset_debug_ALREADY_DEFINED
#else
#define yyset_debug commentcnvYYset_debug
#endif

#ifdef yyget_extra
#define commentcnvYYget_extra_ALREADY_DEFINED
#else
#define yyget_extra commentcnvYYget_extra
#endif

#ifdef yyset_extra
#define commentcnvYYset_extra_ALREADY_DEFINED
#else
#define yyset_extra commentcnvYYset_extra
#endif

#ifdef yyget_in
#define commentcnvYYget_in_ALREADY_DEFINED
#else
#define yyget_in commentcnvYYget_in
#endif

#ifdef yyset_in
#define commentcnvYYset_in_ALREADY_DEFINED
#else
#define yyset_in commentcnvYYset_in
#endif

#ifdef yyget_out
#define commentcnvYYget_out_ALREADY_DEFINED
#else
#define yyget_out commentcnvYYget_out
#endif

#ifdef yyset_out
#define commentcnvYYset_out_ALREADY_DEFINED
#else
#define yyset_out commentcnvYYset_out
#endif

#ifdef yyget_leng
#define commentcnvYYget_leng_ALREADY_DEFINED
#else
#define yyget_leng commentcnvYYget_leng
#endif

#ifdef yyget_text
#define commentcnvYYget_text_ALREADY_DEFINED
#else
#define yyget_text commentcnvYYget_text
#endif

#ifdef yyget_lineno
#define commentcnvYYget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno commentcnvYYget_lineno
#endif

#ifdef yyset_lineno
#define commentcnvYYset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno commentcnvYYset_lineno
#endif

#ifdef yywrap
#define commentcnvYYwrap_ALREADY_DEFINED
#else
#define yywrap commentcnvYYwrap
#endif

#ifdef yyalloc
#define commentcnvYYalloc_ALREADY_DEFINED
#else
#define yyalloc commentcnvYYalloc
#endif

#ifdef yyrealloc
#define commentcnvYYrealloc_ALREADY_DEFINED
#else
#define yyrealloc commentcnvYYrealloc
#endif

#ifdef yyfree
#define commentcnvYYfree_ALREADY_DEFINED
#else
#define yyfree commentcnvYYfree
#endif

#ifdef yytext
#define commentcnvYYtext_ALREADY_DEFINED
#else
#define yytext commentcnvYYtext
#endif

#ifdef yyleng
#define commentcnvYYleng_ALREADY_DEFINED
#else
#define yyleng commentcnvYYleng
#endif

#ifdef yyin
#define commentcnvYYin_ALREADY_DEFINED
#else
#define yyin commentcnvYYin
#endif

#ifdef yyout
#define commentcnvYYout_ALREADY_DEFINED
#else
#define yyout commentcnvYYout
#endif

#ifdef yy_flex_debug
#define commentcnvYY_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug commentcnvYY_flex_debug
#endif

#ifdef yylineno
#define commentcnvYYlineno_ALREADY_DEFINED
#else
#define yylineno commentcnvYYlineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = nullptr; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or nullptr.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : nullptr)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * nullptr or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = nullptr;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentcnvYYwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = nullptr, *yyout = nullptr;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 95
#define YY_END_OF_BUFFER 96
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[503] =
    {   0,
        1,    1,   47,   47,   47,   47,   35,   35,   35,   35,
       74,   74,   96,   94,   95,   95,    1,   28,   94,   95,
        2,   28,   94,   95,   10,   95,   28,   94,   95,    8,
       28,   94,   95,   18,   28,   94,   95,    9,   28,   94,
       95,    1,   28,   94,   95,   28,   94,   95,   28,   94,
       95,   28,   94,   95,   41,   94,   95,   42,   95,   40,
       41,   94,   95,   41,   94,   95,   45,   94,   95,   46,
       95,   44,   45,   94,   95,   45,   94,   95,   70,   95,
       94,   95,   94,   95,   47,   56,   94,   95,   50,   95,
       56,   94,   95,   56,   94,   95,   48,   56,   94,   95,

       47,   56,   94,   95,   56,   94,   95,   56,   94,   95,
       56,   94,   95,   47,   56,   94,   95,   56,   94,   95,
       47,   56,   94,   95,   56,   94,   95,   56,   94,   95,
       56,   94,   95,   56,   94,   95,   35,   38,   94,   95,
       36,   95,   38,   94,   95,   38,   94,   95,   35,   38,
       94,   95,   38,   94,   95,   38,   94,   95,   38,   94,
       95,   30,   38,   94,   95,   31,   38,   94,   95,   38,
       94,   95,   35,   38,   94,   95,   38,   94,   95,   74,
       93,   94,   95,   75,   95,   73,   93,   94,   95,   74,
       93,   94,   95,   93,   94,   95,   74,   93,   94,   95,

       93,   94,   95,   74,   93,   94,   95,   74,   93,   94,
       95,   74,   93,   94,   95,   74,   93,   94,   95,   82,
       94,   95,   79,   82,   94,   95,   81,   95,   87,   92,
       94,   95,   89,   95,   92,   94,   95,   88,   92,   94,
       95,   90,   92,   94,   95,   91,   92,   94,   95,   87,
       92,   94,   95,   87,   92,   94,   95,    1,    6,   20,
       18,    1,    7,    1,   17,   39,   43,   47,   55,   54,
       48,   48,   53,   47,   52,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   47,   47,   35,
       35,   35,   34,   74,   75,   72,   74,   74,   74,   74,

       74,   74,   74,   74,   74,   79,   87,   86,   87,   87,
       87,    4,    6,    5,    7,    1,   19,   17,   17,   15,
    16396,   62,   49,   52,   76,   83,   84,   83,   83,   83,
       26,   26,   84,   83,   83,   83,   83,   83,   83,   83,
       83,   47,   24,   24,   29,   37,   32,   32,   34,   71,
       74,   74,   24,   74,   24,   74,   87,16469,    3,   16,
       15,   15,16396,   65,16448,16447,16452,16443,   57,   51,
       76,   76,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   47,   24,   24,   32,   32,   74,
       74,   24,   74,   24,   74, 8277,   87, 8277,   15,16451,

    16451,16450,16451,16453,16445,16445,   58,16445,16445, 8256,
     8255, 8260, 8251,   83,   83,   25,   25,   84,   83,   83,
       83,   83,   83,   83,   83,   83,   47,   74,   74, 8259,
     8258, 8261, 8253,   21,   77,   77,   77,   80,   77,   84,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   47,
       74,   74,   60, 8259,   60, 8253,   80,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   47,   23,   33,   74,
       74,   11,   11,   11,   60, 8258,   22,   83,   83,   83,
       83,   83,   83,   83,   74,   14, 8204, 8204, 8204,   14,
       83,   78,   78,   84,   83,   27,   27,   84,   83,   83,

       13,   15
    } ;

static const flex_int16_t yy_accept[520] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   13,   13,   13,   13,   14,   16,   17,   21,   25,
       27,   30,   34,   38,   42,   46,   49,   52,   55,   58,
       60,   64,   67,   70,   72,   76,   79,   81,   83,   85,
       89,   91,   94,   97,  101,  105,  108,  111,  114,  118,
      121,  125,  128,  131,  134,  137,  141,  143,  146,  149,
      153,  156,  159,  162,  166,  170,  173,  177,  180,  184,
      186,  190,  194,  197,  201,  204,  208,  212,  216,  220,
      223,  227,  229,  233,  235,  238,  242,  246,  250,  254,

      258,  259,  259,  260,  261,  261,  262,  263,  263,  264,
      264,  265,  265,  266,  266,  267,  268,  268,  268,  268,
      268,  268,  269,  270,  270,  271,  271,  272,  273,  274,
      275,  275,  276,  276,  276,  276,  276,  277,  278,  279,
      280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
      289,  290,  290,  290,  290,  290,  290,  291,  291,  291,
      292,  292,  292,  292,  292,  292,  293,  293,  294,  295,
      296,  297,  298,  298,  299,  300,  301,  302,  303,  304,
      305,  306,  307,  308,  309,  310,  311,  312,  312,  314,
      314,  314,  316,  317,  318,  319,  320,  320,  321,  321,

      321,  322,  322,  323,  323,  323,  324,  324,  325,  325,
      325,  326,  327,  328,  329,  330,  331,  332,  334,  335,
      336,  337,  338,  339,  340,  341,  342,  343,  343,  344,
      345,  345,  346,  347,  347,  348,  349,  350,  351,  352,
      353,  355,  357,  359,  360,  361,  361,  362,  362,  362,
      363,  364,  365,  365,  365,  366,  367,  368,  369,  370,
      370,  370,  371,  371,  371,  372,  373,  374,  375,  376,
      377,  378,  379,  380,  381,  382,  383,  384,  385,  386,
      386,  387,  388,  388,  388,  389,  390,  391,  392,  394,
      396,  398,  399,  399,  399,  399,  399,  400,  400,  400,

      400,  400,  401,  402,  403,  404,  405,  406,  407,  408,
      408,  409,  410,  410,  411,  411,  412,  412,  413,  413,
      414,  414,  414,  414,  415,  416,  417,  419,  420,  421,
      422,  423,  424,  425,  426,  427,  428,  428,  428,  428,
      428,  428,  428,  428,  428,  428,  428,  428,  428,  429,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  431,
      431,  431,  431,  431,  432,  432,  432,  432,  433,  433,
      434,  434,  434,  434,  435,  435,  435,  436,  437,  439,
      441,  442,  443,  444,  445,  446,  447,  448,  449,  450,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  452,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  455,  455,  457,  457,  457,  457,
      458,  459,  460,  461,  462,  463,  464,  465,  466,  467,
      468,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      470,  471,  472,  473,  474,  475,  475,  475,  475,  475,
      475,  475,  475,  475,  477,  478,  478,  479,  480,  481,
      482,  483,  484,  485,  485,  485,  485,  485,  485,  485,
      485,  486,  487,  487,  488,  489,  490,  491,  492,  493,
      495,  496,  497,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  500,  500,  500,  500,  500,  500,  500,  500,

      500,  501,  501,  501,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  501,  503,  503
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   16,   22,
       16,   23,    1,   24,   25,   25,   26,   27,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       28,   29,   30,    1,   25,   31,   32,   33,   34,   35,

       36,   37,   25,   38,   39,   25,   40,   41,   42,   43,
       44,   25,   25,   45,   46,   47,   48,   49,   25,   50,
       51,   25,   52,   53,   54,   55,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    2,    3,    1,    4,    5,    6,    7,    1,    8,
        9,    8,    8,   10,   11,    9,   12,   13,   14,   15,
        1,   16,    1,   17,   18,   18,   18,    1,   19,    1,
       20,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   21,    8,   22,   23
    } ;

static const flex_int16_t yy_base[578] =
    {   0,
     2471, 2470,    0,   33,   17,   24,    1,   22, 2469,   52,
       71,  125,    8,  121,  129,  183,  135,  237,  292,  137,
      347,  402,  141,  194, 2471, 2475, 2475,    0, 2475, 2475,
       42, 2463, 2461, 2475,  456, 2451,    4, 2475, 2475, 2475,
     2475,    0, 2475, 2475, 2475,    0,  132,  138, 2448,    0,
      144, 2475, 2459,   42,  485,   44, 2423,  516,  567, 2440,
      160,  167, 2432, 2407,  107,    0, 2475, 2475,    6,  198,
     2442, 2424, 2428, 2475, 2475, 2403,  199, 2438, 2453, 2475,
     2436,  621, 2440,  676,    0, 2421,  174,  132,  164, 2475,
        0, 2475,    0, 2475, 2433, 2475, 2475, 2475,  222, 2432,

        0, 2447, 2475, 2446, 2441, 2475,  730, 2444, 2475, 2443,
      758, 2439,    7,  225, 2475, 2475,  245, 2425,  250, 2424,
      224,    0, 2475,  204, 2475, 2435,  133,  197, 2475, 2409,
        0, 2475,  206, 2416,  109,    0, 2387,  130,  182,  193,
      355,  202,  219,  221,  210,  211,  142,  218,  233, 2404,
      383,  384, 2406, 2381, 2404, 2379,    0, 2390,  344,  377,
     2413,    3, 2388, 2399, 2374,  385, 2409,  268, 2424, 2475,
     2475,    0, 2412,  235,  349, 2386,  445,  349,  357,  362,
      381,    0,    0, 2475,  432, 2405,  269, 2420, 2475, 2416,
     2418, 2475,  786, 2475, 2475, 2401, 2416, 2475, 2383,  273,

      389,  421, 2318, 2317,  416, 2475, 2306, 2303,    0,  404,
       64, 2220, 2475,  417,  419,  430, 2475, 2475,  238,  231,
      403,  436,  431,  368,  234,  439,  449, 2227, 2238, 2099,
     1981, 2475, 2475, 1912, 1912, 1887, 2475, 2475,  460, 1899,
      391,  394,  478, 2475, 2475, 1936,  509,  500, 1935,  514,
      501,  579, 1929,  749, 1933, 1932, 1931, 1930, 2475,  502,
        0, 2475, 1914,  488,  280,  439,  474,  483,  492,  815,
      540,  482,  495,  541,  542,  537,  554,  552,  490, 1896,
     1898, 1664,  836,  708, 1687, 1661,  574, 1660,  569,  702,
      756,    0,  600, 1681,  567, 1693,  743, 1692,  777,  753,

      764, 1690,  870,  877,  736, 1687, 1686,  885, 2475,  781,
      893,  741, 1685, 2475, 1683, 2475, 1682, 2475, 1679, 2475,
     1658,    0,  325,  922,  565, 2475, 2475,  566,  754,   18,
      761,  840,  560,  749,  841,  492, 1638, 1627, 1620, 1624,
     1621, 1595, 1602, 1595, 1591, 1586, 1583, 1586,  865, 1581,
      972,  773,  900, 1604,  977, 1600,  978, 1612, 2475,  981,
      982, 1611,  985, 2475,  986, 1610, 1609, 2475, 1604, 2475,
      997,  989, 1602, 1585, 1574,  867, 2475, 1013, 2475, 2475,
      856,  861,  951,  866,  952,  954,  123,  588,  960,  987,
      809, 1555, 1528, 1515, 1518, 1523, 1513, 1516, 1520, 1504,

     1513, 1505, 1000, 1524,    0, 1025, 1027,  647,  992,  734,
     1036, 1541, 1518, 2475, 1495, 2475,  897,  421, 1059, 2475,
      982,  985,  994, 1005,  562, 1001,  648,  747, 1007, 1023,
     2475, 1412, 1399, 1402, 1391, 1389, 1399, 1387, 1394, 2475,
     1045, 1405, 2475, 1065, 1374, 1066, 1208, 1030,    0, 1072,
     1073, 1025, 1258, 2475, 2475,    0, 1029, 1102, 1031, 1039,
     1157, 1047,  971, 1215, 1214, 1207, 1213, 1212, 1221, 1209,
     1201, 2475, 1210, 2475, 1212, 1184, 1232, 1041, 2475, 2475,
     1034, 2475, 2475, 1189, 1187, 1185, 1182, 1059, 1051, 1051,
      873, 1174, 1010,  966,  937,  870,  852,  858,  758, 1213,

     1167,  690,  522,  505,  435, 1217,  431,  233, 1218,  169,
      356,   78, 1219, 1221,   25,    7, 2475, 2475, 1265, 1288,
     1311, 1334, 1357, 1380, 1403, 1426, 1449, 1472, 1495, 1518,
     1541, 1563, 1586, 1609, 1621, 1639, 1657, 1679, 1697, 1720,
     1743, 1766, 1789, 1812, 1213, 1209, 1219, 1835, 1858, 1881,
     1904, 1227, 1926, 1944, 1967, 1990, 2013, 2036, 2059, 2082,
     2105, 2128, 1232, 2151, 2174, 2197, 2220, 2243, 2255, 1236,
     2273, 2296, 2308, 2326, 2349, 2372, 2395
    } ;

static const flex_int16_t yy_def[578] =
    {   0,
      519,  519,  520,  520,  521,  521,  522,  522,  519,  519,
      518,   11,   11,   11,  523,  523,  523,  523,  518,   19,
      524,  524,  525,  525,  518,  518,  518,  526,  518,  518,
      527,  518,  518,  518,  528,  518,  518,  518,  518,  518,
      518,  529,  518,  518,  518,  530,  518,  518,  518,  531,
      532,  518,  518,  533,  534,  518,  535,  518,  534,  518,
      531,  518,  518,  518,  518,  536,  518,  518,  518,  536,
      518,  518,  518,  518,  518,  518,  536,  518,  537,  518,
      518,  518,  518,  518,   58,   82,  537,  537,  537,  518,
      538,  518,  539,  518,  518,  518,  518,  518,  539,  539,

      526,  527,  518,  540,  518,  518,  528,  541,  518,  542,
      543,  518,  518,  544,  518,  518,  518,  518,  518,  518,
      518,  531,  518,  532,  518,  518,  533,  533,  518,   59,
      545,  518,  518,  535,  535,  546,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,   59,  518,
      531,  518,  518,  518,  518,  518,  536,  518,  518,  536,
      518,  518,  518,  518,  518,  536,  518,  518,  537,  518,
      518,   82,  518,   84,   84,   82,  537,  537,  537,  537,
      537,  538,  539,  518,  539,  539,  539,  540,  518,  518,
      542,  518,  543,  518,  518,  518,  544,  518,  548,  544,

      549,  518,  550,  518,  551,  518,  545,  518,  552,  535,
      553,  547,  518,  547,  547,  547,  518,  518,  547,  547,
      547,  547,  547,  547,  547,  547,   59,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,   84,   82,
      537,  537,  554,  518,  518,  548,  518,  544,  555,  556,
      549,  557,  518,  558,  559,  560,  561,  562,  518,  518,
      563,  518,  552,  535,  518,  553,  547,  547,  547,  518,
      547,  547,  547,  547,  547,  547,  547,  547,   59,  518,
      518,  518,  518,  518,  518,  518,   84,   82,  537,  537,
      554,  564,  518,  518,  544,  555,  518,  556,  556,  518,

      556,  565,  565,  566,  565,  567,  568,  568,  518,  518,
      568,  568,  559,  518,  560,  518,  561,  518,  562,  518,
      569,  570,  535,  518,  547,  518,  518,  547,  547,  547,
      547,  547,  547,  547,  547,   59,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,   84,   82,
      518,  544,  518,  518,  518,  518,  556,  565,  518,  565,
      565,  566,  566,  518,  566,  571,  567,  518,  568,  518,
      568,  568,  572,  569,  573,  535,  518,  518,  518,  518,
      547,  547,  547,  547,  547,  547,  547,  547,  547,   59,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,

      518,  518,   84,   82,  574,  574,  518,  544,  518,  518,
      556,  575,  571,  518,  572,  518,  573,  535,  518,  518,
      547,  547,  547,  547,  547,  547,  547,  547,  547,   59,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
       84,   82,  518,  518,  518,  518,  518,  544,  576,  576,
      556,  556,  575,  518,  518,  535,  547,  518,  547,  547,
      518,  547,  547,  518,  518,  518,  518,  518,  518,  518,
       84,  518,  544,  518,  518,  518,  556,  547,  518,  518,
      547,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      544,  547,  518,  518,  518,  518,  518,  518,  518,  544,

      547,  518,  518,  518,  518,  544,  518,  518,  544,  518,
      544,  518,  544,  544,  577,  577,  518,    0,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518
    } ;

static const flex_int16_t yy_nxt[2531] =
    {   0,
      518,   29,   30,   44,   29,   31,   32,   33,  233,  517,
       34,   45,  195,   35,   52,   29,   36,  113,   37,   40,
      196,  233,  114,   41,   44,   35,   40,  517,   38,   46,
       41,   65,   45,   35,   29,   30,   65,   29,   31,   32,
       33,  158,  159,   34,  103,   42,   35,  104,   29,   36,
       46,   37,   42,   48,   47,  128,   48,  132,   35,   52,
      129,   38,  133,  104,  104,  265,   35,  384,  265,  213,
       49,   50,   50,   51,   50,   52,   52,   53,   50,   50,
       50,   50,   50,   50,   54,   55,   50,   55,   55,   56,
       55,   50,   57,   50,   58,   55,   55,   55,   50,   58,

       50,   52,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   59,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   60,   50,   50,   52,   61,   52,  232,   62,
      136,   67,  209,  117,  170,  136,  117,   67,   87,  119,
      210,   87,  119,   94,   65,  124,  518,   68,  124,   65,
      118,  518,   69,   68,   95,   63,  120,   69,   72,   68,
      125,  151,  180,   72,  152,   73,  170,   88,  152,   96,
      427,  152,   52,  214,  213,  177,  170,  225,  177,   64,
       68,  213,   68,   68,   70,   67,   74,   70,   75,   76,
      153,   89,   97,  213,   98,   99,   94,  153,   99,  160,

      166,   71,  160,  166,  178,  124,   69,   95,  124,  512,
      128,   69,  100,   68,  154,  129,  161,  167,  181,  208,
      125,  154,   96,  185,  133,  215,  185,  198,  179,  203,
      199,  204,  200,  213,   68,  216,   68,   68,   77,   67,
      186,   77,  205,  201,  213,   97,  117,   98,  219,  117,
      220,  119,  221,  213,  119,   78,  223,  224,  209,  226,
       72,  213,  213,  118,  130,   72,  222,   73,  120,  213,
      213,  227,  213,  237,  243,  198,  174,  273,  277,  272,
      248,  265,  213,  232,  265,  213,  237,  243,   74,  213,
       75,   76,   79,   79,   80,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   81,   82,   79,   82,   82,
       83,   82,   79,   84,   79,   85,   82,   82,   82,   79,
       85,   79,   79,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   86,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   79,   79,   79,   79,   90,  209,   92,
       90,  170,  232,   90,   90,   90,  232,   90,  198,  170,
       90,   90,   90,  217,  170,   90,  217,   90,   90,   90,
       90,  376,  209,  232,   90,   90,   90,   90,  160,  180,
      239,  160,  217,  170,  151,  152,  166,  152,  152,  166,
      174,  250,  241,  170,  513,  161,  170,  232,   90,  276,

       90,   90,   90,  167,   92,   90,  218,  251,   90,   90,
       90,  181,   90,  153,  153,   90,   90,   90,  259,  213,
       90,  289,   90,   90,   90,   90,  252,  209,  253,   90,
       90,   90,   90,  185,  260,  242,  185,  154,  154,  254,
      265,  456,  264,  265,  209,  274,  177,  170,  290,  177,
      186,  267,  269,   90,  213,   90,   90,  108,  109,  268,
      108,  110,  108,  108,  271,  270,  108,  275,  213,  270,
      213,  108,  108,  510,  108,  178,  232,  111,  111,  278,
      130,  213,  213,  209,  108,  122,  122,  213,  122,  279,
      213,  292,  122,  122,  122,  122,  122,  122,  287,  179,

      122,  174,  198,  250,  259,  122,  292,  122,  131,  270,
      293,  209,  122,  293,  122,  299,  300,  324,  299,  251,
      260,  130,  329,  130,  325,  213,  295,  294,  323,  292,
      330,  292,  301,  213,  213,  390,  336,  122,  122,  136,
      137,  137,  137,  213,  136,  508,  213,  137,  137,  138,
      139,  140,  141,  142,  137,  137,  143,  144,  137,  137,
      145,  146,  137,  137,  147,  148,  137,  122,  122,  198,
      122,  170,  232,  328,  122,  122,  122,  122,  122,  122,
      303,  333,  122,  303,  331,  332,  334,  122,  213,  122,
      131,  213,  213,  213,  122,  335,  122,  209,  149,  289,

      304,  293,  305,  213,  293,  213,  387,  305,  381,  382,
      352,  213,  461,  213,  349,  174,  213,  213,  294,  122,
      122,  169,  169,  170,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  428,  172,  169,  172,  172,  213,
      172,  169,  169,  169,  131,  172,  172,  172,  169,  198,
      169,  169,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  169,  169,  169,  169,  169,  169,  170,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  462,
      174,  169,  174,  174,  448,  174,  169,  169,  169,  213,

      174,  174,  174,  169,  170,  169,  169,  174,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  175,  174,  174,
      174,  174,  174,  174,  174,  174,  174,  169,  169,  169,
      169,  108,  109,  507,  108,  108,  108,  108,  359,  449,
      108,  345,  346,  370,  353,  108,  108,  353,  108,  347,
      308,  309,  449,  308,  355,  348,  290,  355,  108,  191,
      192,  354,  191,  191,  191,  191,  300,  310,  191,  292,
      311,  356,  312,  191,  191,  198,  191,  312,  299,  300,
      388,  299,  357,  309,  292,  463,  191,  191,  192,  366,
      191,  191,  191,  191,  373,  301,  191,  383,  213,  310,

      213,  191,  191,  385,  191,  213,  408,  292,  232,  292,
      431,  431,  213,  431,  191,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  326,  326,  326,  326,  326,  326,
      326,  326,  326,  326,  212,  326,  326,  326,  326,  212,
      212,  212,  326,  326,  326,  326,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  327,  326,  326,  326,
      338,  360,  359,  339,  360,  198,  340,  341,  363,  364,
      342,  363,  386,  389,  343,  344,  371,  370,  209,  371,
      209,  213,  213,  361,  371,  370,  505,  371,  361,  421,

      365,  353,  232,  422,  353,  365,  174,  213,  372,  424,
      418,  403,  213,  372,  322,  500,  372,  213,  354,  455,
      232,  372,  377,  378,  379,  378,  378,  377,  377,  377,
      377,  377,  377,  377,  377,  377,  377,  377,  377,  377,
      377,  212,  377,  377,  377,  377,  212,  212,  212,  377,
      377,  377,  377,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  380,  377,  377,  377,  405,  355,  504,
      300,  355,  360,  359,  359,  360,  363,  364,  364,  363,
      406,  370,  425,  423,  426,  356,  411,  449,  371,  370,

      429,  371,  213,  213,  361,  213,  503,  430,  365,  361,
      450,  213,  461,  365,  419,  420,  419,  419,  130,  458,
      372,  457,  213,  209,  407,  372,  444,  300,  446,  444,
      411,  446,  198,  213,  459,  366,  213,  451,  300,  412,
      451,  174,  373,  441,  407,  213,  518,  460,  445,  502,
      447,  461,  213,  445,  130,  447,  213,  461,  213,  452,
      419,  420,  419,  419,  452,  471,  446,  446,  209,  446,
      446,  473,  478,  475,  451,  300,  475,  451,  477,  481,
      213,  461,  213,  492,  461,  213,  174,  270,  447,  447,
      213,  499,  213,  447,  447,  476,  452,  498,  213,  497,

      476,  452,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      479,  212,  479,  479,  479,  479,  212,  212,  212,  479,
      479,  479,  479,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  480,  479,  479,  479,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  212,  482,  482,  482,
      482,  212,  212,  212,  482,  482,  482,  482,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,

      212,  212,  212,  212,  212,  212,  212,  212,  483,  482,
      482,  482,  198,  446,  501,  198,  446,  461,  213,  198,
      198,  198,  496,  198,  207,  213,  211,  207,  495,  494,
      207,  211,  493,  212,  300,  447,  212,  472,  263,  212,
      447,  263,  174,  321,  263,  491,  321,  375,  509,  321,
      375,  490,  489,  375,  488,  487,  486,  485,  484,  506,
      454,  472,  514,  515,  511,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   66,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,  101,  472,  518,  440,
      470,  469,  468,  101,  467,  101,  101,  466,  101,  465,
      101,  101,  101,  101,  464,  101,  101,  101,  101,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  115,  115,  416,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  116,  116,
      414,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  122,  122,  454,  442,  440,  440,  122,  122,  122,
      440,  122,  122,  122,  439,  122,  438,  437,  122,  436,
      435,  434,  122,  123,  123,  123,  123,  123,  123,  433,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  127,  127,  432,  127,
      127,  322,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  261,  127,  416,  127,  370,  127,  127,  130,
      130,  368,  414,  364,  359,  130,  130,  130,  410,  130,
      130,  130,  409,  130,  404,  130,  130,  402,  401,  400,
      130,  134,  134,  134,  399,  134,  398,  397,  134,  157,
      157,  396,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  395,  157,  157,  394,  157,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  393,  169,  169,  169,
      392,  169,  169,  391,  169,  261,  169,  169,  169,  169,
      182,  320,  182,  182,  318,  316,  182,  314,  370,  368,
      182,  182,  359,  182,  300,  297,  182,  183,  183,  351,

      183,  183,  183,  183,  183,  183,  350,  183,  183,  183,
      183,  183,  183,  183,  183,  286,  183,  285,  282,  183,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,

      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  246,  246,  246,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  266,  281,  266,
      337,  322,  320,  318,  316,  314,  306,  297,  247,  288,
      266,  286,  285,  266,  291,  291,  284,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,

      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  302,  302,  283,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,

      315,  315,  315,  315,  315,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  292,  292,  282,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  358,  358,  358,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  374,  374,  281,  374,
      280,  213,  374,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  415,  415,  415,  415,

      415,  415,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  417,
      417,  262,  417,  261,  257,  417,  443,  443,  443,  443,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  256,
      443,  443,  443,  443,  443,  443,  443,  443,  443,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  474,  474,  474,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  247,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  198,  245,
      192,  244,  189,  187,  240,  238,  170,  168,  236,  235,
      234,  162,  231,  230,  229,  156,  155,  228,  213,  209,
      130,  206,  121,  202,  194,  192,  109,  190,  189,  103,
      187,  184,  176,  173,  171,  170,  168,  165,  164,  163,
      162,  156,  155,  150,  135,  126,  121,  112,  106,  105,
      518,   47,   27,   27,   25,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,

      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518
    } ;

static const flex_int16_t yy_chk[2531] =
    {   0,
        0,    3,    3,    7,    3,    3,    3,    3,  162,  516,
        3,    7,  113,    3,   13,    3,    3,   37,    3,    5,
      113,  162,   37,    5,    8,    3,    6,  515,    3,    7,
        6,   13,    8,    3,    4,    4,   13,    4,    4,    4,
        4,   69,   69,    4,   31,    5,    4,   31,    4,    4,
        8,    4,    6,   10,   10,   54,   10,   56,    4,   13,
       54,    4,   56,   31,   31,  211,    4,  330,  211,  330,
       10,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   12,   14,  512,   12,
       65,   15,  135,   47,   88,   65,   47,   17,   20,   48,
      135,   20,   48,   23,   14,   51,  127,   15,   51,   14,
       47,  127,   15,   17,   23,   12,   48,   15,   17,   15,
       51,   61,   88,   17,   61,   17,   89,   20,   62,   23,
      387,   62,   14,  138,  387,   87,   87,  147,   87,   12,
       15,  138,   15,   15,   16,   16,   17,   16,   17,   17,
       61,   20,   23,  147,   23,   24,   24,   62,   24,   70,

       77,   16,   70,   77,   87,  124,   16,   24,  124,  510,
      128,   16,   24,   16,   61,  128,   70,   77,   89,  133,
      124,   62,   24,   99,  133,  139,   99,  114,   87,  121,
      114,  121,  114,  139,   16,  140,   16,   16,   18,   18,
       99,   18,  121,  114,  140,   24,  117,   24,  142,  117,
      143,  119,  144,  142,  119,   18,  145,  146,  174,  148,
       18,  145,  146,  117,  149,   18,  144,   18,  119,  148,
      143,  149,  144,  168,  187,  200,  174,  220,  225,  219,
      200,  265,  220,  508,  265,  225,  168,  187,   18,  219,
       18,   18,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   21,  323,   21,
       21,  178,  159,   21,   21,   21,  159,   21,  511,  179,
       21,   21,   21,  141,  180,   21,  141,   21,   21,   21,
       21,  323,  175,  159,   21,   21,   21,   21,  160,  178,
      175,  160,  141,  181,  151,  152,  166,  151,  152,  166,
      175,  201,  180,  241,  511,  160,  242,  159,   21,  224,

       21,   21,   22,  166,   22,   22,  141,  201,   22,   22,
       22,  179,   22,  151,  152,   22,   22,   22,  205,  224,
       22,  241,   22,   22,   22,   22,  202,  210,  202,   22,
       22,   22,   22,  185,  205,  181,  185,  151,  152,  202,
      266,  418,  210,  266,  418,  221,  177,  177,  242,  177,
      185,  214,  215,   22,  221,   22,   22,   35,   35,  214,
       35,   35,   35,   35,  216,  215,   35,  223,  214,  222,
      215,   35,   35,  507,   35,  177,  505,   35,   35,  226,
      227,  216,  223,  239,   35,   55,   55,  222,   55,  227,
      226,  243,   55,   55,   55,   55,   55,   55,  239,  177,

       55,  239,  248,  251,  260,   55,  243,   55,   55,  267,
      247,  264,   55,  247,   55,  250,  250,  268,  250,  251,
      260,  279,  272,  336,  269,  267,  248,  247,  264,  243,
      273,  243,  250,  272,  268,  336,  279,   55,   55,   58,
       58,   58,   58,  269,   58,  504,  273,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   59,   59,  295,
       59,  289,  503,  271,   59,   59,   59,   59,   59,   59,
      252,  276,   59,  252,  274,  275,  277,   59,  276,   59,
       59,  271,  274,  275,   59,  278,   59,  287,   59,  289,

      252,  293,  252,  278,  293,  277,  333,  252,  325,  328,
      295,  333,  425,  425,  287,  287,  325,  328,  293,   59,
       59,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,  388,   82,   82,   82,   82,  388,
       82,   82,   82,   82,   82,   82,   82,   82,   82,  408,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  427,
       84,   84,   84,   84,  408,   84,   84,   84,   84,  427,

       84,   84,   84,   84,  290,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,  107,  107,  502,  107,  107,  107,  107,  305,  410,
      107,  284,  284,  312,  297,  107,  107,  297,  107,  284,
      254,  254,  410,  254,  300,  284,  290,  300,  107,  111,
      111,  297,  111,  111,  111,  111,  301,  254,  111,  291,
      254,  300,  254,  111,  111,  352,  111,  254,  299,  299,
      334,  299,  301,  310,  291,  428,  111,  193,  193,  305,
      193,  193,  193,  193,  312,  299,  193,  329,  428,  310,

      334,  193,  193,  331,  193,  329,  352,  291,  499,  291,
      391,  391,  331,  391,  193,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      283,  303,  303,  283,  303,  491,  283,  283,  304,  304,
      283,  304,  332,  335,  283,  283,  308,  308,  349,  308,
      376,  332,  335,  303,  311,  311,  498,  311,  303,  381,

      304,  353,  497,  382,  353,  304,  349,  381,  308,  384,
      376,  349,  382,  308,  417,  491,  311,  384,  353,  417,
      496,  311,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  351,  355,  495,
      357,  355,  360,  360,  361,  360,  363,  363,  365,  363,
      351,  372,  385,  383,  386,  355,  357,  409,  371,  371,

      389,  371,  383,  385,  360,  386,  494,  390,  363,  360,
      409,  389,  463,  363,  378,  378,  378,  378,  390,  422,
      371,  421,  463,  403,  351,  371,  406,  452,  407,  406,
      357,  407,  448,  421,  423,  361,  422,  411,  411,  365,
      411,  403,  372,  403,  409,  423,  430,  424,  406,  493,
      407,  426,  426,  406,  430,  407,  424,  429,  429,  411,
      419,  419,  419,  419,  411,  441,  444,  446,  441,  444,
      446,  448,  457,  450,  451,  451,  450,  451,  452,  460,
      457,  459,  459,  478,  481,  481,  441,  462,  444,  446,
      460,  490,  478,  444,  446,  450,  451,  489,  462,  488,

      450,  451,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  473,  475,  492,  500,  475,  501,  501,  506,
      509,  513,  487,  514,  545,  492,  546,  545,  486,  485,
      545,  546,  484,  547,  477,  475,  547,  476,  552,  547,
      475,  552,  471,  563,  552,  473,  563,  570,  506,  563,
      570,  470,  469,  570,  468,  467,  466,  465,  464,  500,
      453,  447,  513,  514,  509,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  520,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,

      520,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  524,  524,  524,  524,  524,

      524,  524,  524,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  526,  445,  442,  439,
      438,  437,  436,  526,  435,  526,  526,  434,  526,  433,
      526,  526,  526,  526,  432,  526,  526,  526,  526,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  528,  528,  528,  528,  529,  529,  415,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  530,  530,
      413,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  530,  530,  530,  530,  530,  530,
      530,  531,  531,  412,  404,  402,  401,  531,  531,  531,
      400,  531,  531,  531,  399,  531,  398,  397,  531,  396,
      395,  394,  531,  532,  532,  532,  532,  532,  532,  393,
      532,  532,  532,  532,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  532,  532,  532,  533,  533,  392,  533,
      533,  375,  533,  533,  533,  533,  533,  533,  533,  533,

      533,  533,  374,  533,  373,  533,  369,  533,  533,  534,
      534,  367,  366,  362,  358,  534,  534,  534,  356,  534,
      534,  534,  354,  534,  350,  534,  534,  348,  347,  346,
      534,  535,  535,  535,  345,  535,  344,  343,  535,  536,
      536,  342,  536,  536,  536,  536,  536,  536,  536,  536,
      536,  536,  341,  536,  536,  340,  536,  537,  537,  537,
      537,  537,  537,  537,  537,  537,  339,  537,  537,  537,
      338,  537,  537,  337,  537,  321,  537,  537,  537,  537,
      538,  319,  538,  538,  317,  315,  538,  313,  307,  306,
      538,  538,  302,  538,  298,  296,  538,  539,  539,  294,

      539,  539,  539,  539,  539,  539,  288,  539,  539,  539,
      539,  539,  539,  539,  539,  286,  539,  285,  282,  539,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  541,  541,  541,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,

      550,  550,  550,  550,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  553,  281,  553,
      280,  263,  258,  257,  256,  255,  253,  249,  246,  240,
      553,  236,  235,  553,  554,  554,  234,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  554,  554,  554,
      554,  554,  554,  554,  554,  554,  554,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  555,  555,  555,  555,  555,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,

      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  557,  557,  231,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  557,  557,  557,  557,
      557,  557,  557,  557,  557,  557,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  558,  558,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      559,  559,  560,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  560,  560,  560,  560,  560,  560,  560,  560,

      560,  560,  560,  560,  560,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
      562,  564,  564,  230,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  566,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566,  566,  566,  566,  566,  566,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      568,  568,  568,  568,  568,  568,  569,  569,  229,  569,
      228,  212,  569,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  571,  571,  571,  571,
      571,  571,  571,  571,  571,  571,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  573,
      573,  208,  573,  207,  204,  573,  574,  574,  574,  574,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  203,
      574,  574,  574,  574,  574,  574,  574,  574,  574,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  575,
      575,  575,  576,  576,  576,  576,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  199,  576,  576,  576,  576,
      576,  576,  576,  576,  576,  577,  577,  577,  577,  577,

      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  197,  196,
      191,  190,  188,  186,  176,  173,  169,  167,  165,  164,
      163,  161,  158,  156,  155,  154,  153,  150,  137,  134,
      130,  126,  120,  118,  112,  110,  108,  105,  104,  102,
      100,   95,   86,   83,   81,   79,   78,   76,   73,   72,
       71,   64,   63,   60,   57,   53,   49,   36,   33,   32,
       25,    9,    2,    1,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,

      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*************************************************************************
 *
 * Copyright (c) 2014-2024 Barbara Geller & Ansel Sermersheim
 * Copyright (c) 1997-2014 Dimitri van Heesch

*************************************************************************/

#include <condparser.h>
#include <config.h>
#include <doxy_globals.h>
#include <message.h>
#include <util.h>

#include <QChar>
#include <QStack>
#include <QTextStream>

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>

#define YY_NO_INPUT 1

#define ADDCHAR(c)     s_outputString += c

struct CondCtx
{
   CondCtx(int line, const QString &id, bool b)
      : lineNr(line), sectionId(id), skip(b)
   {}

   int lineNr;
   QString sectionId;
   bool skip;
};

struct CommentCtx
{
   CommentCtx(int line)
      : lineNr(line)
   {}

   int lineNr;
};

static QString  s_inputString;
static QString  s_outputString;
static int      s_inputPosition;

static int      s_col;
static int      s_blockHeadCol;
static bool     s_mlBrief;
static int      s_readLineCtx;
static bool     s_skip;
static QString  s_fileName;
static int      s_lineNr;
static int      s_condCtx;

static int      s_lastCommentContext;
static bool     s_inSpecialComment;
static bool     s_inRoseComment;
static int      s_stringContext;
static int      s_charContext;
static int      s_javaBlock;
static bool     s_specialComment;

static QString  s_aliasString;
static int      s_blockCount;
static bool     s_lastEscaped;
static int      s_lastBlockContext;
static bool     s_pythonDocString;
static int      s_nestingCount;

static SrcLangExt s_lang;
static bool       isFixedForm;    // for Fortran

static QStack<CondCtx>     s_condStack;
static QStack<CommentCtx>  s_commentStack;
static QString             s_blockName;

void replaceComment(int offset);

static void replaceCommentMarker(const QString &s, int len)
{
   QString::const_iterator iter     = s.constBegin();
   QString::const_iterator iter_end = s.constEnd();

   QChar c;

   // copy leading blanks
   while (iter != iter_end) {
      c = *iter;

      if (c == ' ' || c == '\t' || c == '\n') {
         ADDCHAR(c);

         if (c == '\n') {
            ++s_lineNr;
         }

         ++iter;

      } else {
         break;
      }
   }

   // replace start of comment marker by blanks and the last character by a *
   int blanks = 0;

   while (iter != iter_end) {
      c = *iter;

      if (c == '/' || c == '!' || c == '#') {

         ++blanks;
         ++iter;

         if (iter != iter_end && *iter == '<') {
            // comment-after-item marker
            ++blanks;
            ++iter;
         }

         if (c == '!') {
            // end after first !
            break;
         }

      } else {
         break;
      }
   }

   if (blanks > 0) {
      while (blanks > 2) {
         ADDCHAR(' ');
         --blanks;
      }

      if (blanks > 1) {
         ADDCHAR('*');
      }

      ADDCHAR(' ');
   }

   // copy comment line to output
   s_outputString += QStringView(iter,  s.constBegin() + len);
}

static inline int computeIndent(const QString &str)
{
   static const int tabSize = Config::getInt("tab-size");

   int col = 0;

   for (auto c : str) {

      if (c == ' ') {
         ++col;

      } else if (c == '\t') {
         col += tabSize - (col % tabSize);

      } else {
         break;
      }
   }

   return col;
}

static inline void copyToOutput(const QString &s, int len)
{
   static const int tabSize = Config::getInt("tab-size");

   if (s_skip) {
      // only add newlines

      for (int i = 0; i < len; i++) {
         switch (s[i].unicode()) {

            case '\n':
              ADDCHAR('\n');
               ++s_lineNr;
               s_col = 0;
               break;

            case '\t':
               s_col += tabSize -(s_col % tabSize);
               break;

            default:
               ++s_col;
               break;
         }
      }

   } else if (len > 0) {
      s_outputString += s.mid(0, len);

      for (int i = 0; i < len; i++) {
         switch (s[i].unicode()) {
            case '\n':
               s_col = 0;
               ++s_lineNr;
               break;

            case '\t':
               s_col += tabSize - (s_col % tabSize);
               break;

            default:
               ++s_col;
               break;
         }
      }
   }
}

static void startCondSection(const QString &sectId);
static void endCondSection();
static void handleCondSectionId(const QString &expression);

// copies string s with length len to the output
// while replacing any alias commands found in the string
static void replaceAliases(const QString &s)
{
   QString retval = resolveAliasCmd(s);
   copyToOutput(retval, retval.length());
}

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

#define YY_NO_UNISTD_H 1

#define INITIAL 0
#define Scan 1
#define SkipString 2
#define SkipChar 3
#define SComment 4
#define CComment 5
#define CNComment 6
#define Verbatim 7
#define VerbatimCode 8
#define ReadLine 9
#define CondLine 10
#define ReadAliasArgs 11

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 519 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 518 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
      /* consume anything that is not " / , or \n */

      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      /* consume so we have a nice separator in long initialization lines */

      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      /* start of python long comment */

      if (s_lang != SrcLangExt_Python) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(yytext);

         s_pythonDocString = true;
         s_nestingCount    = 1;
         s_commentStack.clear();

         copyToOutput(text, text.length());

         BEGIN(CComment);
         s_commentStack.push(CommentCtx(s_lineNr));
      }
   }
	YY_BREAK
case 4:
/* rule 4 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      if (s_lang != SrcLangExt_Fortran) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(yytext);
         copyToOutput(text, text.length());

         s_nestingCount = 0;
         s_commentStack.clear();

         BEGIN(CComment);
         s_commentStack.push(CommentCtx(s_lineNr));
      }
   }
	YY_BREAK
case 5:
/* rule 5 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      if (s_lang != SrcLangExt_Fortran) {
         REJECT;

      } else {
         /* check for fixed format; we might have some conditional as part of multi-line if like C<5 .and. & */

         if (isFixedForm && (s_col == 0)) {
            QString text = QString::fromUtf8(yytext);
            copyToOutput(text, text.length());

            s_nestingCount = 0;
            s_commentStack.clear();

            BEGIN(CComment);
            s_commentStack.push(CommentCtx(s_lineNr));

         } else {
            REJECT;
         }
      }
   }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
{
      if (s_lang != SrcLangExt_Fortran) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(yytext);
         copyToOutput(text, text.length());;
      }
   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
      if (s_lang != SrcLangExt_Fortran) {
         REJECT;

      } else {

         if (s_col == 0) {
            QString text = QString::fromUtf8(yytext);
            copyToOutput(text, text.length());

         } else {
            REJECT;
         }
      }
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      /* start of a string */

      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());

      s_stringContext = YY_START;
      BEGIN(SkipString);
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());

      s_charContext = YY_START;
      BEGIN(SkipChar);
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
      // new line
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 11:
/* rule 11 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{   /* start C++ style special comment block */
      // */ (editor syntax fix)

      if (s_mlBrief) {
         REJECT;             // bail out if we do not need to convert

      } else {
         int i = 3;

         QString text = QString::fromUtf8(yytext);

         if (text[2] == '/') {
            while (i < text.length() && text[i] == '/') {
               i++;
            }
         }

         s_blockHeadCol = s_col;
         copyToOutput("/**",3);      // */ (editor syntax fix)

         replaceAliases(text.mid(i));
         s_inSpecialComment = true;

         s_readLineCtx = SComment;
         BEGIN(ReadLine);
      }
   }
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      /* Start of Rational Rose ANSI C++ comment block */
      QString text = QString::fromUtf8(yytext);

      if (s_mlBrief) {
         REJECT;
      }

      int i = QString("//##Documentation").length();
      s_blockHeadCol = s_col;

      copyToOutput("/**",3);      // */ (editor syntax fix)

      replaceAliases(text.mid(i));
      s_inRoseComment = true;
      BEGIN(SComment);
   }
	YY_BREAK
case 14:
/* rule 14 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 3);
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      // next line contains an end marker
      QString text = QString::fromUtf8(yytext);

      s_inSpecialComment = text[2] == '/' || text[2] == '!';
      copyToOutput(text, text.length());

      s_readLineCtx = YY_START;
      BEGIN(ReadLine);
   }
	YY_BREAK
case 15:
/* rule 15 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      /* one line C++ comment */
      QString text = QString::fromUtf8(yytext);

      s_inSpecialComment = text[2] == '/' || text[2] == '!';
      copyToOutput(text, text.length());

      s_readLineCtx = YY_START;
      BEGIN(ReadLine);
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      /* avoid matching next rule for empty C comment */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      /* start of a C comment */
      if (s_lang == SrcLangExt_Python || s_lang == SrcLangExt_Tcl) {
         REJECT;
      }

      QString text = QString::fromUtf8(yytext);

      s_specialComment = (yyleng == 3);

      s_nestingCount   = 1;
      s_commentStack.clear();

      copyToOutput(text, text.length());

      if (s_specialComment) {
         BEGIN(CComment);
      } else  {
         BEGIN(CNComment);
         s_commentStack.push(CommentCtx(s_lineNr));
      }
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      if (s_lang != SrcLangExt_Python) {
         REJECT;

      }  else  {
         QString text = QString::fromUtf8(yytext);
         copyToOutput(text, text.length());

         s_nestingCount = 0;
         s_commentStack.clear();

         BEGIN(CComment);
         s_commentStack.push(CommentCtx(s_lineNr));
      }
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      REJECT;
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      if (s_lang != SrcLangExt_Fortran) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(yytext);
         copyToOutput(text, text.length());

         s_nestingCount = 0;
         s_commentStack.clear();

         BEGIN(CComment);
         s_commentStack.push(CommentCtx(s_lineNr));
      }
   }
	YY_BREAK
case 21:
case 22:
YY_RULE_SETUP
{
      // prevent parsing email address
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 23:
/* rule 23 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 6);
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      copyToOutput("@code", 5);

      s_lastCommentContext = YY_START;
      s_javaBlock = 1;
      s_blockName = text.mid(1);

      BEGIN(VerbatimCode);
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      /* start of markdown code block */

      if (! Doxy_Globals::markdownSupport) {
         REJECT;
      }

      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());

      s_lastCommentContext = YY_START;
      s_javaBlock = 0;
      s_blockName = text.trimmed().left(3);

      BEGIN(VerbatimCode);
   }
	YY_BREAK
case 25:
/* rule 25 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      /* start of a verbatim block */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());

      s_lastCommentContext = YY_START;
      s_javaBlock = 0;

      if (text.mid(1) == "startuml") {
         s_blockName = "uml";
      } else {
         s_blockName = text.mid(1);
      }

      BEGIN(VerbatimCode);
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());

      s_blockName = text.mid(1);

      if (s_blockName.at(1) == '[') {
         s_blockName.replace(1, 1, ']');

      } else if (s_blockName.at(1) == '{')  {
         s_blockName.replace(1, 1, '}');

      } else if (s_blockName.at(1) == '(') {
         s_blockName.replace(1, 1, ')');

      }

      s_lastCommentContext = YY_START;

      BEGIN(Verbatim);
   }
	YY_BREAK
case 27:
/* rule 27 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      /* start of a verbatim block */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());

      s_blockName = text.mid(1);
      s_lastCommentContext = YY_START;

      BEGIN(Verbatim);
   }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
      /* any other character */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      /* end of verbatim block */

      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());

      if (text.mid(1) == s_blockName) {
         // end of formula
         BEGIN(s_lastCommentContext);

      } else if (text.mid(4) == s_blockName) {
         BEGIN(s_lastCommentContext);
      }
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      if (s_javaBlock == 0) {
         REJECT;

      } else {
         ++s_javaBlock;

         QString text = QString::fromUtf8(yytext);
         copyToOutput(text, text.length());
      }
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      if (s_javaBlock == 0) {
         REJECT;

      } else {
         --s_javaBlock;

         if (s_javaBlock == 0) {
            copyToOutput(" @endcode ", 10);
            BEGIN(s_lastCommentContext);

         } else {
            QString text = QString::fromUtf8(yytext);
            copyToOutput(text, text.length());
         }
      }
   }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
      /* end of markdown code block */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());

      if (text[0] == s_blockName[0]) {
         BEGIN(s_lastCommentContext);
      }
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      /* end of verbatim block */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());

      if (text.mid(4) == s_blockName) {
         BEGIN(s_lastCommentContext);
      }
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      /* skip leading comments */
      QString text = QString::fromUtf8(yytext);

      if (! s_inSpecialComment) {
         copyToOutput(text, text.length());

      } else {
         int len = 0;

         while (len < text.length() && (text[len] == ' ' || text[len] == '\t')) {
            ++len;
         }

         copyToOutput(text, len);

         if (text.length() - len == 3) {
            // ends with //! or ///
            copyToOutput(" * ", 3);

         } else {
            // ends with //
            copyToOutput("//", 2);
         }
      }
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      /* any character not a backslash or new line or } */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
{
      /* new line in verbatim block */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      if (s_blockName == "dot" || s_blockName == "msc" || s_blockName == "uml" || s_blockName.startsWith('f') ) {
         // strip /// from dot images and formulas.

         QString text = QString::fromUtf8(yytext);
         int len = 0;

         while (len < text.length() && (text[len] == ' ' || text[len] == '\t')) {
            ++len;
         }

         copyToOutput(text, len);
         copyToOutput("   ", 3);

      } else  {
         // even slashes are verbatim (e.g. \verbatim, \code)
         REJECT;
      }
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      /* any other character */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      /* escaped character in string */
      QString text = QString::fromUtf8(yytext);
      if (s_lang == SrcLangExt_Fortran) {
         unput(yytext[1]);
         copyToOutput(text, 1);
      } else {
         copyToOutput(text, text.length());
      }
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      /* end of string */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());

      BEGIN(s_stringContext);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      /* any other string character */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{
      /* new line inside string (illegal for some compilers) */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      /* escaped character */
      QString text = QString::fromUtf8(yytext);
      if (s_lang == SrcLangExt_Fortran) {
         unput(yytext[1]);
         copyToOutput(text, 1);
      } else {
         copyToOutput(text, text.length());
      }
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      /* end of character literal */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());

      BEGIN(s_charContext);
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      /* any other string character */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
{
      /* new line character */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      /* anything that is not a '*' or command */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      /* stars without slashes */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      /* end of Python docstring */

      if (s_lang != SrcLangExt_Python) {
         REJECT;

      } else {
         --s_nestingCount;
         s_pythonDocString = false;

         QString text = QString::fromUtf8(yytext);
         copyToOutput(text, text.length());

         BEGIN(Scan);
      }
   }
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
{
      /* new line in comment */
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());

      /* in case of Fortran always end of comment */
      if (s_lang == SrcLangExt_Fortran) {
         BEGIN(Scan);
      }
   }
	YY_BREAK
case 51:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      /* already in C comment, not a start of a nested comment but the end */

      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      /* nested C comment */

      if (s_lang == SrcLangExt_Python || s_lang == SrcLangExt_Tcl || s_lang == SrcLangExt_Markdown) {
         REJECT;
      }

      QString text = QString::fromUtf8(yytext);

      ++s_nestingCount;
      s_commentStack.push(CommentCtx(s_lineNr));
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      /* end of C comment */
      if (s_lang == SrcLangExt_Python || s_lang == SrcLangExt_Tcl || s_lang == SrcLangExt_Markdown) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(yytext);

         copyToOutput(text, text.length());
         --s_nestingCount;

         if (s_nestingCount <= 0) {
            BEGIN(Scan);

         } else {
            s_commentStack.pop();
         }
      }
   }
	YY_BREAK
case 54:
/* rule 54 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      // end of Python comment

      if (s_lang != SrcLangExt_Python || s_pythonDocString) {
         REJECT;

      } else {
         QString text = QString::fromUtf8(yytext);
         copyToOutput(text, text.length());

         BEGIN(Scan);
      }
   }
	YY_BREAK
case 55:
/* rule 55 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      if (s_lang == SrcLangExt_Python) {

         if (s_pythonDocString) {
            REJECT;

         } else {
            copyToOutput(text, text.length());
            BEGIN(Scan);
         }

      } else {
         REJECT;
      }
   }
	YY_BREAK
case 56:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      replaceComment(0);
   }
	YY_BREAK
case 58:
/* rule 58 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      replaceComment(1);
   }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{
      replaceComment(0);
      s_readLineCtx = YY_START;

      BEGIN(ReadLine);
   }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{
      /* end the multiline comment when finding a @} or \} command */

      QString text = QString::fromUtf8(yytext);

      copyToOutput(" */",3);
      copyToOutput(text, text.length());

      s_inSpecialComment = false;
      s_inRoseComment    = false;

      BEGIN(Scan);
   }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{
      replaceComment(1);
      s_readLineCtx = YY_START;

      BEGIN(ReadLine);
   }
	YY_BREAK
case 62:
case 63:
/* rule 63 can match eol */
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{    // or   //!something
      replaceComment(0);
      s_readLineCtx = YY_START;

      BEGIN(ReadLine);
   }
	YY_BREAK
case 65:
/* rule 65 can match eol */
case 66:
/* rule 66 can match eol */
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
{
      replaceComment(1);
      s_readLineCtx = YY_START;

      BEGIN(ReadLine);
   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
{
      if (! s_inRoseComment) {
         REJECT;

      } else {
         replaceComment(0);
         s_readLineCtx = YY_START;

         BEGIN(ReadLine);
      }
   }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
{
      if (! s_inRoseComment) {
         REJECT;

      } else {
         replaceComment(1);
         s_readLineCtx = YY_START;

         BEGIN(ReadLine);
      }
   }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
{
      /* end of special comment */
      QString text = QString::fromUtf8(yytext);

      copyToOutput(" */",3);
      copyToOutput(text, text.length());

      s_inSpecialComment = false;
      s_inRoseComment    = false;
      s_readLineCtx      = Scan;
      BEGIN(Scan);
   }
	YY_BREAK
case 71:
YY_RULE_SETUP
{
      copyToOutput("/&zwj;**", 8);
   }
	YY_BREAK
case 72:
YY_RULE_SETUP
{
      copyToOutput("*&zwj;/", 7);
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 74:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 75:
/* rule 75 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());

      BEGIN(s_readLineCtx);
   }
	YY_BREAK
case 76:
YY_RULE_SETUP
{
      // escaped command
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 77:
/* rule 77 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 5);
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      // conditional section
      s_condCtx = YY_START;
      BEGIN(CondLine);
   }
	YY_BREAK
case 78:
/* rule 78 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 8);
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      // end of conditional section
      bool oldSkip = s_skip;
      endCondSection();

      if (YY_START == CComment && oldSkip && ! s_skip) {

         if (s_lang != SrcLangExt_Python && s_lang != SrcLangExt_Markdown && s_lang != SrcLangExt_Fortran) {
            ADDCHAR('/');
            ADDCHAR('*');

            if (s_specialComment) {
               ADDCHAR('*');
            }
         }
      }
   }
	YY_BREAK
case 79:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      handleCondSectionId(text);
   }
	YY_BREAK
case 80:
/* rule 80 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      s_condCtx = YY_START;
      handleCondSectionId(" ");
   }
	YY_BREAK
case 81:
/* rule 81 can match eol */
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{
      // forgot section id
      QString text = QString::fromUtf8(yytext);
      handleCondSectionId(" ");

      if (text[0] == '\n') {
         ++s_lineNr;
         copyToOutput("\n", 1);
      }
   }
	YY_BREAK
case 83:
YY_RULE_SETUP
{
      // expand alias without arguments
      QString text = QString::fromUtf8(yytext);
      replaceAliases(text);
   }
	YY_BREAK
case 84:
YY_RULE_SETUP
{
      // expand alias with arguments
      QString text = QString::fromUtf8(yytext);

      s_lastBlockContext = YY_START;
      s_blockCount       = 1;
      s_aliasString      = text;
      s_lastEscaped      = 0;

      BEGIN( ReadAliasArgs );
   }
	YY_BREAK
case 85:
YY_RULE_SETUP
{
      // skip leading special comments
   }
	YY_BREAK
case 86:
YY_RULE_SETUP
{
      // end of comment in the middle of an alias?
      if (s_lang == SrcLangExt_Python) {
         REJECT;

      } else  {
         // abort the alias, restart scanning
         QString text = QString::fromUtf8(yytext);

         copyToOutput(s_aliasString, s_aliasString.length());
         copyToOutput(text, text.length());

         BEGIN(Scan);
      }
   }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
      s_aliasString += QString::fromUtf8(yytext);
      s_lastEscaped  = false;
   }
	YY_BREAK
case 88:
YY_RULE_SETUP
{

      if (s_lastEscaped) {
         s_lastEscaped = false;

      } else{
         s_lastEscaped = true;

      }

      s_aliasString += QString::fromUtf8(yytext);
   }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
{
      s_aliasString += QString::fromUtf8(yytext);
      s_lineNr++;
      s_lastEscaped = false;
   }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      s_aliasString += QString::fromUtf8(yytext);

      if (!s_lastEscaped) {
         s_blockCount++;
      }

      s_lastEscaped = false;
   }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
      s_aliasString += QString::fromUtf8(yytext);

      if (! s_lastEscaped) {
         --s_blockCount;
      }

      if (s_blockCount == 0) {
         replaceAliases(s_aliasString);
         BEGIN( s_lastBlockContext );
      }

      s_lastEscaped = false;

   }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      s_aliasString += QString::fromUtf8(yytext);
      s_lastEscaped =  false;
   }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      copyToOutput(text, text.length());
   }
	YY_BREAK
case 95:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Scan):
			case YY_STATE_EOF(SkipString):
			case YY_STATE_EOF(SkipChar):
			case YY_STATE_EOF(SComment):
			case YY_STATE_EOF(CComment):
			case YY_STATE_EOF(CNComment):
			case YY_STATE_EOF(Verbatim):
			case YY_STATE_EOF(VerbatimCode):
			case YY_STATE_EOF(ReadLine):
			case YY_STATE_EOF(CondLine):
			case YY_STATE_EOF(ReadAliasArgs):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 519 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 519 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 518);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == nullptr)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = nullptr;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return nullptr;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = nullptr;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = nullptr;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = nullptr;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = nullptr;
    yyout = nullptr;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = nullptr;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = nullptr;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = nullptr;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

void startCondSection(const QString &sectId)
{
   CondParser prs;
   bool expResult = prs.parse(s_fileName, s_lineNr, sectId);

   s_condStack.push(CondCtx(s_lineNr, sectId, s_skip));

   if (! expResult) {
      // not enabled
      s_skip = true;
   }
}

void endCondSection()
{
   if (s_condStack.isEmpty()) {
      warn(s_fileName, s_lineNr, "Found \\endcond command without matching \\cond");
      s_skip = false;

   } else {
      CondCtx ctx = s_condStack.pop();
      s_skip = ctx.skip;
   }
}

void handleCondSectionId(const QString &expression)
{
  bool oldSkip = s_skip;
  startCondSection(expression);

  if ((s_condCtx == CComment || s_readLineCtx == SComment) && ! oldSkip && s_skip) {
    if (s_lang != SrcLangExt_Python && s_lang != SrcLangExt_Markdown && s_lang != SrcLangExt_Fortran) {
      ADDCHAR('*');
      ADDCHAR('/');
    }
  }

  if (s_readLineCtx == SComment) {
    BEGIN(SComment);

  } else {
    BEGIN(s_condCtx);
  }
}

void replaceComment(int offset)
{
   QString text = QString::fromUtf8(yytext);

   if (s_mlBrief || s_skip) {
      copyToOutput(text, text.length());

   } else {
      int i = computeIndent(text.mid(offset));

      if (i == s_blockHeadCol) {
         replaceCommentMarker(text, text.length());

      } else {
         copyToOutput(" */", 3);

         for (int pos = yyleng - 1; pos >= 0; --pos) {
            char tmp = yytext[pos];
            unput(tmp);
         }

         s_inSpecialComment = false;
         BEGIN(Scan);
      }
   }
}

// simplified way to know if this is fixed form
// duplicate in fortrancode.l
static bool recognizeFixedForm(const QString &contents)
{
   int column    = 0;
   bool skipLine = false;

   for (int i = 0; true; i++) {
      ++column;

      switch (contents[i].unicode()) {
         case '\n':
            column = 0;
            skipLine = false;
            break;

         case ' ':
            break;

         case '\000':
            return false;

         case 'C':
         case 'c':
         case '*':
            if (column == 1) {
               return true;
            }

            if (skipLine) {
               break;
            }

            return false;

         case '!':
            if (column > 1 && column < 7) {
               return false;
            }

            skipLine = true;
            break;

         default:
            if (skipLine) {
               break;
            }

            if (column == 7) {
               return true;
            }

            return false;
      }
   }

   return false;
}

/*! This function does three things:
 *  1 Convert multi-line C++ style comment blocks (which are aligned) to C style
 *    comment blocks (if MULTILINE_CPP_IS_BRIEF is set to NO)
 *  2 Replaces aliases with their definition (see ALIASES)
 *  3 Handles conditional sections (cond...endcond blocks)
 */

// main entry point
QString convertCppComments(const QString &inBuf, const QString &fileName)
{
   s_mlBrief  = Config::getBool("multiline-cpp-brief");

   s_inputString  = inBuf;
   s_outputString = "";

   s_inputPosition = 0;
   s_col      = 0;
   s_skip     = false;
   s_fileName = fileName;
   s_lang     = getLanguageFromFileName(fileName);
   s_lineNr   = 1;

   s_pythonDocString = false;

   s_condStack.clear();
   s_commentStack.clear();

   printlex(commentcnvYY_flex_debug, true, __FILE__, fileName);
   isFixedForm = false;

   if (s_lang == SrcLangExt_Fortran) {
      isFixedForm = recognizeFixedForm(inBuf);
   }

   if (s_lang == SrcLangExt_Markdown) {
      s_nestingCount = 0;
      BEGIN(CComment);
      s_commentStack.push(CommentCtx(s_lineNr));

   } else {
      BEGIN(Scan);
   }

   yylex();

   while (! s_condStack.isEmpty()) {
      CondCtx ctx = s_condStack.pop();
      QString sectionInfo = " ";

      if (ctx.sectionId != " ") {
         sectionInfo = QString(" with label '%1' ").formatArg(ctx.sectionId);
      }

      warn(s_fileName, ctx.lineNr, "Conditional section %s does not have "
           "a corresponding \\endcond command", csPrintable(sectionInfo));
   }

   if (s_nestingCount > 0 && s_lang != SrcLangExt_Markdown && s_lang != SrcLangExt_Fortran) {
      QString tmp;

      if (! s_commentStack.isEmpty()) {
         tmp = ", review line # ";

         bool first = true;

         while (! s_commentStack.isEmpty()) {
            CommentCtx ctx = s_commentStack.pop();

            if (first) {
               first = false;
            } else {
               tmp += ", ";
            }

            tmp += QString::number(ctx.lineNr);
         }
      }

      warn(s_fileName, s_lineNr, "Reached end of file while inside a (nested) comment. "
           "\nNesting level %d %s", s_nestingCount, csPrintable(tmp) );

      // add one for "normal" expected end of comment
   }

   s_commentStack.clear();
   s_nestingCount = 0;

   return s_outputString;
}
