/************************************************************************
*
* Copyright (C) 2014-2020 Barbara Geller & Ansel Sermersheim
* Copyright (C) 1997-2014 by Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer default_argsYY_create_buffer
#define yy_delete_buffer default_argsYY_delete_buffer
#define yy_flex_debug default_argsYY_flex_debug
#define yy_init_buffer default_argsYY_init_buffer
#define yy_flush_buffer default_argsYY_flush_buffer
#define yy_load_buffer_state default_argsYY_load_buffer_state
#define yy_switch_to_buffer default_argsYY_switch_to_buffer
#define yyin default_argsYYin
#define yyleng default_argsYYleng
#define yylex default_argsYYlex
#define yylineno default_argsYYlineno
#define yyout default_argsYYout
#define yyrestart default_argsYYrestart
#define yytext default_argsYYtext
#define yywrap default_argsYYwrap
#define yyalloc default_argsYYalloc
#define yyrealloc default_argsYYrealloc
#define yyfree default_argsYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */
#include <configure.h>

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE default_argsYYrestart(default_argsYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int default_argsYYleng;

extern FILE *default_argsYYin, *default_argsYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up default_argsYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up default_argsYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via default_argsYYrestart()), so that the user can continue scanning by
	 * just pointing default_argsYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when default_argsYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int default_argsYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow default_argsYYwrap()'s to do buffer switches
 * instead of setting up a fresh default_argsYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void default_argsYYrestart (FILE *input_file  );
void default_argsYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE default_argsYY_create_buffer (FILE *file,int size  );
void default_argsYY_delete_buffer (YY_BUFFER_STATE b  );
void default_argsYY_flush_buffer (YY_BUFFER_STATE b  );
void default_argsYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void default_argsYYpop_buffer_state (void );

static void default_argsYYensure_buffer_stack (void );
static void default_argsYY_load_buffer_state (void );
static void default_argsYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER default_argsYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE default_argsYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE default_argsYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE default_argsYY_scan_bytes (yyconst char *bytes,int len  );

void *default_argsYYalloc (yy_size_t  );
void *default_argsYYrealloc (void *,yy_size_t  );
void default_argsYYfree (void *  );

#define yy_new_buffer default_argsYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        default_argsYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            default_argsYY_create_buffer(default_argsYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        default_argsYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            default_argsYY_create_buffer(default_argsYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define default_argsYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *default_argsYYin = (FILE *) 0, *default_argsYYout = (FILE *) 0;

typedef int yy_state_type;

extern int default_argsYYlineno;

int default_argsYYlineno = 1;

extern char *default_argsYYtext;
#define yytext_ptr default_argsYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up default_argsYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	default_argsYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 62
#define YY_END_OF_BUFFER 63
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[337] =
    {   0,
        2,    2,   63,   61,   62,   60,   62,   61,   62,    1,
       61,   62,   37,   61,   62,   29,   37,   61,   62,   37,
       61,   62,   37,   61,   62,   37,   61,   62,   37,   61,
       62,   37,   61,   62,   37,   61,   62,   39,   61,   62,
       16,   39,   61,   62,   17,   18,   39,   61,   62,   39,
       61,   62,   38,   39,   61,   62,   17,   39,   61,   62,
       23,   39,   61,   62,   24,   39,   61,   62,   21,   39,
       61,   62,   22,   39,   61,   62,   25,   39,   61,   62,
       26,   39,   61,   62,   35,   61,   62,    2,   35,   61,
       62,   35,   61,   62,   15,   35,   61,   62,   32,   35,

       61,   62,   35,   61,   62,   35,   61,   62,   15,   35,
       61,   62,   30,   35,   61,   62,   32,   35,   61,   62,
       34,   35,   61,   62,   35,   61,   62,   34,   35,   61,
       62,   15,   35,   61,   62,    8,   37,   61,   62,   37,
       61,   62,   15,   37,   61,   62,   32,   37,   61,   62,
       15,   37,   61,   62,   32,   37,   61,   62,   37,   61,
       62,   37,   61,   62,   37,   61,   62,   13,   35,   61,
       62,   10,   34,   35,   61,   62,   10,   34,   35,   61,
       62,   45,   61,   62,   61,   62,   61,   62,   61,   62,
       61,   62,   61,   62,   53,   58,   61,   62,   57,   60,

       62,   58,   61,   62,   53,   58,   61,   62,   54,   61,
       62,   56,   60,   62,   54,   61,   62,   41,   61,   62,
       42,   60,   62,   40,   41,   61,   62,   41,   61,   62,
       50,   61,   62,   50,   61,   62,   51,   60,   62,   50,
       61,   62,   50,   61,   62,   36,   27,   28,   18,   17,
       38,   19,   20,    2,   34,16393,   14,   34,    3,   34,
       11,   12,   10,   34,   10,   34,   46,   48,   47,   53,
       55,   53,   54,   54,   54,   59,   28,   17,   17,16393,
     8201,   34,    6,    6,    7,   10,   34,   52,   53,   59,
       54,   59,   59,   28, 8201,   34,    5,    4,    5,   10,

       34,   53,   59,   54,   59,   28,   31,   34,    4,   10,
       34,   43,   28,   34,   10,   34,   49,   28,   33,   34,
       10,   33,   34,   49,   28,   44,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28
    } ;

static yyconst flex_int16_t yy_accept[266] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    6,    8,   10,   13,   16,   20,
       23,   26,   29,   32,   35,   38,   41,   45,   50,   53,
       57,   61,   65,   69,   73,   77,   81,   85,   88,   92,
       95,   99,  103,  106,  109,  113,  117,  121,  125,  128,
      132,  136,  140,  143,  147,  151,  155,  159,  162,  165,
      168,  172,  177,  182,  185,  187,  189,  191,  193,  195,
      199,  202,  205,  209,  212,  215,  218,  221,  224,  228,

      231,  234,  237,  240,  243,  246,  246,  246,  247,  248,
      248,  249,  250,  251,  252,  252,  253,  254,  255,  256,
      256,  256,  257,  257,  257,  258,  259,  259,  260,  261,
      261,  261,  261,  261,  261,  261,  262,  263,  265,  267,
      268,  268,  268,  269,  269,  270,  270,  270,  271,  272,
      273,  274,  275,  276,  276,  276,  277,  277,  278,  279,
      280,  280,  280,  280,  281,  282,  282,  282,  283,  284,
      284,  285,  285,  285,  286,  288,  288,  289,  289,  289,
      291,  293,  293,  293,  294,  294,  295,  295,  296,  296,
      297,  298,  300,  300,  300,  302,  302,  302,  304,  306,

      306,  306,  306,  307,  308,  309,  310,  310,  310,  312,
      313,  313,  313,  313,  313,  314,  315,  315,  317,  317,
      318,  318,  318,  319,  321,  321,  324,  324,  325,  325,
      325,  326,  326,  327,  327,  327,  328,  328,  328,  329,
      329,  329,  330,  330,  330,  331,  331,  331,  332,  332,
      332,  333,  333,  333,  334,  334,  334,  335,  335,  335,
      336,  336,  337,  337,  337
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    1,    7,    8,    9,
       10,   11,    1,   12,   13,    1,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   18,   19,    1,   20,
       21,   22,    1,    1,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   24,   23,   23,   23,   23,
       23,   25,   23,   23,   26,   23,   23,   23,   23,   23,
       27,   28,   29,   30,   23,    1,   31,   23,   32,   33,

       34,   35,   23,   23,   36,   23,   23,   37,   23,   38,
       39,   23,   23,   40,   41,   42,   43,   44,   23,   45,
       23,   23,   46,    1,   47,    1,    1,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23
    } ;

static yyconst flex_int32_t yy_meta[48] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    4,    5,
        6,    1,    1,    1,    7,    7,    7,    7,    8,    1,
        1,    1,    9,    9,    9,    9,    1,   10,    1,    1,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    1,    1
    } ;

static yyconst flex_int16_t yy_base[317] =
    {   0,
        0,    1,    2,    3,    5,   21,   18,   26,   49,    0,
      899,  896,   88,   91,   93,   95,  142,    0,  187,    0,
      233,    0,  278,  320,   28,   34,    6,  103,  104,  109,
      200,  202,  900,  941,  941,   33,  941,  941,  941,  877,
      111,  107,  108,    0,  892,  941,  941,  889,  121,    0,
      886,  941,  941,  862,  859,  941,  941,  941,  877,    0,
      282,  122,  851,  123,  173,  941,  196,    0,  841,  819,
      941,  941,  835,  941,  206,  204,  280,  836,  850,   13,
      281,    0,  807,  839,  204,  823,  118,  804,  798,    0,
      941,  820,  208,    0,  941,  215,  941,  941,  941,  284,

      941,  193,  941,  286,  294,  300,   95,  941,  941,  823,
      822,  823,  301,    0,  817,  941,  941,  814,    0,  305,
      318,  364,  213,  317,  941,    0,  781,  941,  767,  799,
      298,  796,  789,  767,  330,  941,  941,    0,  749,  941,
      313,  760,  941,  334,  941,  745,  743,    0,  941,  331,
        0,  339,  340,  738,  729,  751,  760,  757,  344,    0,
      319,  737,  410,  344,  440,  352,  409,  721,  941,  745,
      739,  410,  735,  941,  704,  708,  941,  694,  698,  706,
      700,  681,  683,  941,  706,  703,  420,    0,  682,  663,
      941,  941,  420,  690,  655,  648,  642,    0,    0,  652,

      641,  660,  657,  941,  620,  941,  641,  638,  613,  941,
      609,  607,  598,  632,  630,  585,  610,  575,  575,  601,
      553,  580,  577,    0,  567,    0,  539,  570,  538,  565,
      564,  559,  941,  528,  556,  554,  541,  434,  433,  428,
      429,  428,  423,  425,  419,  411,  414,  411,  406,  409,
      353,  344,  342,  337,  317,  300,  282,  277,  186,  133,
      106,  941,   37,  941,  487,  497,  507,  517,  527,  537,
      547,  557,  565,  568,    4,  577,  581,  590,  600,  604,
      613,  623,  633,  641,  650,  660,  669,  679,  688,  697,
      706,  715,  724,  733,  742,  751,  760,  769,  778,  787,

      796,  805,  814,  823,  832,  841,  850,  859,  868,  877,
      886,  895,  904,  913,  922,  931
    } ;

static yyconst flex_int16_t yy_def[317] =
    {   0,
      265,  265,  265,  265,  266,  266,  266,  266,  264,    9,
        9,    9,    9,    9,    9,    9,  264,   17,  266,   19,
      264,   21,  265,  265,  267,  267,  268,  268,  269,  269,
      270,  270,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  271,  272,  264,  264,  273,  264,  274,
      273,  264,  264,  264,  264,  264,  264,  264,  264,  275,
      276,  264,  264,  264,  264,  264,  264,  277,  278,  277,
      264,  264,  279,  264,  264,  264,  264,  264,  264,  264,
      264,  280,  280,  264,  264,  264,  264,  264,  264,  281,
      264,  264,  281,  282,  264,  282,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  283,
      283,  273,  284,  274,  273,  264,  264,  264,  277,  276,
      276,  264,  264,  264,  264,  277,  278,  264,  277,  264,
      285,  264,  286,  264,  264,  264,  264,  280,  280,  264,
      264,  287,  264,  264,  264,  264,  264,  281,  264,  281,
      282,  282,  282,  264,  264,  264,  288,  288,  284,  159,
      276,  264,  276,  122,  264,  264,  264,  277,  264,  264,
      264,  264,  289,  264,  280,  287,  264,  264,  264,  281,
      282,  264,  264,  264,  290,  290,  276,  165,  264,  277,
      264,  264,  264,  291,  280,  264,  264,  281,  282,  264,

      264,  292,  292,  264,  277,  264,  264,  293,  280,  264,
      264,  264,  264,  294,  294,  277,  295,  280,  264,  264,
      264,  296,  296,  277,  297,  280,  264,  264,  264,  298,
      298,  299,  264,  264,  300,  300,  301,  302,  302,  303,
      304,  304,  305,  306,  306,  307,  308,  308,  309,  310,
      310,  311,  312,  312,  313,  314,  314,  315,  264,  264,
      316,  264,  264,    0,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264
    } ;

static yyconst flex_int16_t yy_nxt[989] =
    {   0,
      264,  264,   35,   35,   35,   35,  264,   35,   95,   39,
       37,   37,  119,   36,   36,   36,   36,   40,   41,   96,
       35,   37,   37,   35,   42,   39,   43,   45,   35,  134,
       91,   41,   44,   40,   41,   45,   91,  132,   92,   41,
       42,   93,   43,  106,   92,  174,  107,   93,   44,   46,
       46,   35,   46,   46,   46,   46,   46,   47,   48,   46,
       46,   46,   49,   46,   46,   46,   46,   46,   46,   46,
       46,   50,   50,   50,   50,   46,   46,   46,   46,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   46,   46,   52,   53,  156,   52,

       53,   46,   46,   46,   46,   95,   98,   54,  156,   55,
       54,   98,   55,   99,  174,   99,   96,  100,   99,  144,
       99,  106,  100,  123,  107,   99,  108,  108,  108,  108,
       99,  106,  145,  106,  107,  124,  107,  262,   56,   57,
       56,   57,   58,   59,   35,   58,   58,   60,   58,   58,
       61,   62,   58,   62,   63,   64,   58,   58,   58,   58,
       58,   65,   66,   67,   68,   68,   68,   68,   69,   58,
       58,   58,   68,   68,   68,   70,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   71,   58,   35,
      262,   72,  125,  125,   73,   74,   75,  123,   75,   40,

       41,  102,  103,  102,  103,  141,   76,  123,   77,  124,
       78,   79,   78,  104,  123,  104,  125,  125,  106,  124,
      105,  150,  105,  108,  108,  152,  124,  154,  153,   80,
      142,  155,   74,   58,   58,   35,   58,   58,   60,   58,
       58,   58,   81,   58,   58,   58,   64,   58,   58,   58,
       58,   58,   58,   58,   58,   82,   82,   82,   82,   58,
       58,   58,   58,   82,   82,   82,   83,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   58,   58,
       35,  123,  135,  121,   84,  174,  260,   85,  122,  136,
       86,   36,  122,  124,  106,  144,  106,  107,   87,  107,

      108,  108,  115,  156,  260,  171,  161,  137,  145,   88,
      156,  122,  172,  172,  141,  159,  159,  159,  159,  163,
      161,   89,   35,  162,  122,  174,   84,  166,  122,   85,
      167,  135,   86,   36,  180,  144,  162,  162,  136,  142,
       87,  257,  181,  181,  180,  115,  257,  122,  145,  181,
      120,   88,  174,  181,  120,  189,  137,  254,  159,  159,
      159,  159,  189,   89,  120,  164,  120,  120,  120,  120,
      122,  120,  120,  120,  122,  120,  120,  120,  120,  120,
      120,  120,  162,  120,  120,  120,  165,  165,  165,  165,
      120,  120,  120,  122,  165,  165,  165,  165,  165,  165,

      165,  165,  165,  165,  165,  165,  165,  165,  165,  120,
      120,  163,  189,  254,  174,  251,  122,  192,  251,  174,
      122,  121,  189,  248,  193,  193,  122,  206,  162,  248,
      122,  174,  245,  245,  207,  207,  174,  242,  242,  122,
      120,  161,  120,  120,  120,  120,  120,  120,  120,  122,
      120,  120,  120,  120,  188,  188,  188,  188,  162,  120,
      120,  120,  188,  188,  188,  188,  120,  120,  120,  120,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  120,  120,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   38,   38,   38,

       38,   38,   38,   38,   38,   38,   38,   90,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  109,  109,  174,
      109,  109,  109,  109,  109,  109,  109,  110,  239,  110,
      239,  220,  110,  110,  110,  110,  113,  174,  236,  236,
      234,  228,  233,  113,  114,  174,  114,  120,  120,  120,
      120,  231,  120,  120,  231,  120,  120,  126,  229,  126,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      130,  130,  228,  130,  130,  130,  130,  130,  130,  130,
      138,  227,  138,  148,  148,  226,  148,  148,  174,  148,
      148,  148,  148,  151,  151,  224,  151,  151,  151,  151,
      151,  151,  151,  157,  223,  157,  223,  221,  157,  157,
      157,  157,  160,  220,  219,  218,  174,  160,  206,  160,
      170,  170,  216,  170,  170,  170,  170,  170,  170,  170,
      173,  215,  173,  173,  215,  173,  173,  173,  173,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  185,
      213,  185,  212,  211,  185,  185,  185,  185,  194,  210,
      194,  194,  209,  194,  194,  194,  194,  202,  174,  202,

      205,  204,  202,  202,  202,  202,  208,  203,  208,  208,
      203,  208,  208,  208,  208,  214,  201,  214,  200,  199,
      214,  214,  214,  214,  217,  198,  217,  217,  197,  217,
      217,  217,  217,  222,  196,  222,  177,  195,  222,  222,
      222,  222,  225,  174,  225,  225,  191,  225,  225,  225,
      225,  230,  191,  230,  190,  187,  230,  230,  230,  230,
      232,  186,  232,  232,  186,  232,  232,  232,  232,  235,
      184,  235,  183,  182,  235,  235,  235,  235,  237,  179,
      237,  237,  178,  237,  237,  237,  237,  238,  177,  238,
      175,  132,  238,  238,  238,  238,  240,  174,  240,  240,

      133,  240,  240,  240,  240,  241,  169,  241,  168,  128,
      241,  241,  241,  241,  243,  118,  243,  243,  115,  243,
      243,  243,  243,  244,  112,  244,  158,  158,  244,  244,
      244,  244,  246,  149,  246,  246,  147,  246,  246,  246,
      246,  247,  146,  247,  143,  140,  247,  247,  247,  247,
      249,  139,  249,  249,  133,  249,  249,  249,  249,  250,
      132,  250,  131,  129,  250,  250,  250,  250,  252,  128,
      252,  252,  125,  252,  252,  252,  252,  253,  118,  253,
      117,  116,  253,  253,  253,  253,  255,  115,  255,  255,
      112,  255,  255,  255,  255,  256,  111,  256,  108,  264,

      256,  256,  256,  256,  258,   51,  258,  258,   51,  258,
      258,  258,  258,  259,  264,  259,  264,  264,  259,  259,
      259,  259,  261,  264,  261,  261,  264,  261,  261,  261,
      261,  263,  264,  263,  263,  264,  263,  263,  263,  263,
       33,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264
    } ;

static yyconst flex_int16_t yy_chk[989] =
    {   0,
        0,    0,    1,    2,    3,    4,    0,    5,   27,    5,
        3,    4,  275,    1,    2,    3,    4,    5,    5,   27,
        7,    3,    4,    6,    5,    6,    5,    7,    8,   80,
       25,    7,    5,    6,    6,    8,   26,   80,   25,    8,
        6,   25,    6,   36,   26,  263,   36,   26,    6,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   13,   13,  107,   14,

       14,   15,   15,   16,   16,   28,   29,   13,  107,   13,
       14,   30,   14,   29,  261,   29,   28,   29,   30,   87,
       30,   41,   30,   62,   41,   29,   42,   42,   43,   43,
       30,   49,   87,   64,   49,   62,   64,  260,   15,   15,
       16,   16,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
      259,   19,   65,   65,   19,   19,   19,   67,   19,   19,

       19,   31,   31,   32,   32,   85,   19,   75,   19,   67,
       19,   19,   19,   31,  123,   32,   67,   67,   93,   75,
       31,   93,   32,   76,   76,   96,  123,  102,   96,   19,
       85,  102,   19,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       23,   77,   81,   61,   23,  258,  257,   23,   61,   81,
       23,   23,   61,   77,  100,  105,  104,  100,   23,  104,

       77,   77,  113,  106,  256,  131,  120,   81,  105,   23,
      106,   61,  131,  131,  141,  113,  113,  113,  113,  121,
      161,   23,   24,  120,  121,  255,   24,  124,  121,   24,
      124,  135,   24,   24,  150,  144,  121,  161,  135,  141,
       24,  254,  152,  153,  150,  159,  253,  121,  144,  152,
      164,   24,  252,  153,  164,  166,  135,  251,  159,  159,
      159,  159,  166,   24,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  164,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,

      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  163,  167,  250,  249,  248,  163,  172,  247,  246,
      163,  187,  167,  245,  172,  172,  187,  193,  163,  244,
      187,  243,  242,  241,  193,  193,  240,  239,  238,  163,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  187,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  266,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  271,  271,  237,
      271,  271,  271,  271,  271,  271,  271,  272,  236,  272,
      235,  234,  272,  272,  272,  272,  273,  232,  231,  230,
      229,  228,  227,  273,  274,  225,  274,  276,  276,  276,
      276,  223,  276,  276,  222,  276,  276,  277,  221,  277,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      279,  279,  220,  279,  279,  279,  279,  279,  279,  279,
      280,  219,  280,  281,  281,  218,  281,  281,  217,  281,
      281,  281,  281,  282,  282,  216,  282,  282,  282,  282,
      282,  282,  282,  283,  215,  283,  214,  213,  283,  283,
      283,  283,  284,  212,  211,  209,  208,  284,  207,  284,
      285,  285,  205,  285,  285,  285,  285,  285,  285,  285,
      286,  203,  286,  286,  202,  286,  286,  286,  286,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  288,
      201,  288,  200,  197,  288,  288,  288,  288,  289,  196,
      289,  289,  195,  289,  289,  289,  289,  290,  194,  290,

      190,  189,  290,  290,  290,  290,  291,  186,  291,  291,
      185,  291,  291,  291,  291,  292,  183,  292,  182,  181,
      292,  292,  292,  292,  293,  180,  293,  293,  179,  293,
      293,  293,  293,  294,  178,  294,  176,  175,  294,  294,
      294,  294,  295,  173,  295,  295,  171,  295,  295,  295,
      295,  296,  170,  296,  168,  162,  296,  296,  296,  296,
      297,  158,  297,  297,  157,  297,  297,  297,  297,  298,
      156,  298,  155,  154,  298,  298,  298,  298,  299,  147,
      299,  299,  146,  299,  299,  299,  299,  300,  142,  300,
      139,  134,  300,  300,  300,  300,  301,  133,  301,  301,

      132,  301,  301,  301,  301,  302,  130,  302,  129,  127,
      302,  302,  302,  302,  303,  118,  303,  303,  115,  303,
      303,  303,  303,  304,  112,  304,  111,  110,  304,  304,
      304,  304,  305,   92,  305,  305,   89,  305,  305,  305,
      305,  306,   88,  306,   86,   84,  306,  306,  306,  306,
      307,   83,  307,  307,   79,  307,  307,  307,  307,  308,
       78,  308,   73,   70,  308,  308,  308,  308,  309,   69,
      309,  309,   63,  309,  309,  309,  309,  310,   59,  310,
       55,   54,  310,  310,  310,  310,  311,   51,  311,  311,
       48,  311,  311,  311,  311,  312,   45,  312,   40,   33,

      312,  312,  312,  312,  313,   12,  313,  313,   11,  313,
      313,  313,  313,  314,    0,  314,    0,    0,  314,  314,
      314,  314,  315,    0,  315,  315,    0,  315,  315,  315,
      315,  316,    0,  316,  316,    0,  316,  316,  316,  316,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264
    } ;

extern int default_argsYY_flex_debug;
int default_argsYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up default_argsYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *default_argsYYtext;
/*************************************************************************
 *
 * Copyright (C) 2014-2020 Barbara Geller & Ansel Sermersheim
 * Copyright (C) 1997-2014 by Dimitri van Heesch.

*************************************************************************/

#include <QRegularExpression>
#include <QStringList>

#include <stdio.h>
#include <assert.h>
#include <ctype.h>

#include <arguments.h>
#include <default_args.h>
#include <entry.h>
#include <message.h>
#include <util.h>

#define YY_NO_INPUT 1
#define YY_NEVER_INTERACTIVE 1

static QString          s_inputString;
static int              s_inputPosition;
static ArgumentList     s_argList;
static QString         *s_copyArgValue;
static QString          s_curArgTypeName;
static QString          s_curArgDefValue;
static QString          s_curArgName;
static QString          s_curArgDocs;
static QString          s_curArgAttrib;
static QString          s_curArgArray;
static QString          s_curTypeConstraint;
static QString          s_extraTypeChars;
static int              s_argRoundCount;
static int              s_argSharpCount;
static int              s_argCurlyCount;
static int              s_readArgContext;
static int              s_lastDocContext;
static QChar            s_lastDocChar;
static int              s_lastExtendsContext;
static QString          s_delimiter;

// static functions
static void yyunput(QChar c, char *yy_bp);

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

static bool checkSpecialType(QString &name)
{
   static QSet<QString> keywords;

   if (keywords.isEmpty()) {

      keywords.insert("unsigned");
      keywords.insert("signed");
      keywords.insert("bool");
      keywords.insert("char");
      keywords.insert("char8_t");
      keywords.insert("char16_t");
      keywords.insert("char32_t");
      keywords.insert("int");
      keywords.insert("short");
      keywords.insert("long");
      keywords.insert("float");
      keywords.insert("double");
      keywords.insert("int8_t");
      keywords.insert("uint8_t");
      keywords.insert("int16_t");
      keywords.insert("uint16_t");
      keywords.insert("int32_t");
      keywords.insert("uint32_t");
      keywords.insert("const");
      keywords.insert("volatile");
   }

   return ! name.isEmpty() && keywords.contains(name);
}

#define INITIAL 0
#define Start 1
#define CopyArgString 2
#define CopyRawString 3
#define CopyArgRound 4
#define CopyArgRound2 5
#define CopyArgSharp 6
#define CopyArgCurly 7
#define ReadFuncArgType 8
#define ReadFuncArgDef 9
#define ReadFuncArgPtr 10
#define FuncQual 11
#define ReadDocBlock 12
#define ReadDocLine 13
#define ReadTypeConstraint 14
#define TrailingReturn 15

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int default_argsYYlex_destroy (void );

int default_argsYYget_debug (void );

void default_argsYYset_debug (int debug_flag  );

YY_EXTRA_TYPE default_argsYYget_extra (void );

void default_argsYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *default_argsYYget_in (void );

void default_argsYYset_in  (FILE * in_str  );

FILE *default_argsYYget_out (void );

void default_argsYYset_out  (FILE * out_str  );

int default_argsYYget_leng (void );

char *default_argsYYget_text (void );

int default_argsYYget_lineno (void );

void default_argsYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int default_argsYYwrap (void );
#else
extern int default_argsYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( default_argsYYtext, default_argsYYleng, 1, default_argsYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( default_argsYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( default_argsYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, default_argsYYin))==0 && ferror(default_argsYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(default_argsYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int default_argsYYlex (void);

#define YY_DECL int default_argsYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after default_argsYYtext and default_argsYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)default_argsYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in default_argsYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! default_argsYYin )
			default_argsYYin = stdin;

		if ( ! default_argsYYout )
			default_argsYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			default_argsYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				default_argsYY_create_buffer(default_argsYYin,YY_BUF_SIZE );
		}

		default_argsYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of default_argsYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 265 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 941 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
      BEGIN(ReadFuncArgType);
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      s_curArgTypeName += " ";
   }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);

      if (s_curArgTypeName.trimmed().isEmpty()) {
         // for M$-ID
         s_curArgAttrib = text;

      } else {
         // array type

         s_curArgArray += text;
      }
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDefValue += text;
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDefValue += text;
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDefValue += text;
   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDefValue += text;

      int i = text.indexOf('"');

      s_delimiter = text.mid(i + 1);
      s_delimiter = s_delimiter.left(s_delimiter.length() - 1);
      BEGIN( CopyRawString );
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDefValue += text[0];
      BEGIN( CopyArgString );
   }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{
      // function pointer as argument
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgTypeName += text;

      // s_curArgTypeName = s_curArgTypeName.simplifyWhiteSpace();
      BEGIN( ReadFuncArgPtr );
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgName = text;
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // function pointer
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgTypeName += text;

      s_readArgContext = ReadFuncArgType;
      s_copyArgValue   = &s_curArgTypeName;
      s_argRoundCount  = 0;
      BEGIN( CopyArgRound2 );
   }
	YY_BREAK
case 12:
*yy_cp = (yy_hold_char); /* undo effects of setting up default_argsYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up default_argsYYtext again */
YY_RULE_SETUP
{
      // pointer to fixed size array
      QString text = QString::fromUtf8(default_argsYYtext);

      s_curArgTypeName += text;
      s_curArgTypeName += s_curArgName;
      BEGIN( ReadFuncArgType );
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      // redundant braces detected, remove them
      int i   = s_curArgTypeName.lastIndexOf('(');
      int len = s_curArgTypeName.length();

      if (i != -1) {
         s_curArgTypeName = s_curArgTypeName.left(i) + s_curArgTypeName.right(len - i - 1);
      }

      s_curArgTypeName += s_curArgName;
      BEGIN( ReadFuncArgType );
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      // handle operators
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgTypeName += text;
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);

      if (YY_START == ReadFuncArgType) {
         s_curArgTypeName += text[0];
         s_copyArgValue    = &s_curArgTypeName;

      } else {
         s_curArgDefValue += text[0];
         s_copyArgValue    = &s_curArgDefValue;
      }

      s_readArgContext = YY_START;

      if (text[0] == '(') {
         s_argRoundCount = 0;
         BEGIN( CopyArgRound );

      } else if (text[0] == '{') {
         s_argCurlyCount = 0;
         BEGIN( CopyArgCurly );

      } else {
         //  text == '<'

         s_argSharpCount = 0;
         s_argRoundCount = 0;
         BEGIN( CopyArgSharp );
      }
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_argRoundCount++;
      *s_copyArgValue += text[0];
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      *s_copyArgValue += text;

      if (s_argRoundCount > 0) {
         s_argRoundCount--;

      } else {

         if (YY_START == CopyArgRound2) {
            *s_copyArgValue += " " + s_curArgName;
         }

         BEGIN( s_readArgContext );
      }
   }
	YY_BREAK
case 18:
*yy_cp = (yy_hold_char); /* undo effects of setting up default_argsYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up default_argsYYtext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      *s_copyArgValue += text[0];

      if (s_argRoundCount > 0) {
         s_argRoundCount--;

      } else {
         BEGIN( s_readArgContext );

      }
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);

      if (s_argRoundCount > 0) {
         *s_copyArgValue += text;

      } else {
         REJECT;
      }
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);

      if (s_argRoundCount > 0) {
         *s_copyArgValue += text;

      } else {
         REJECT;
      }
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);

      // do not count '<' inside '(' for code like: "< typename A = (i < 6) >"
      if (s_argRoundCount == 0) {
         s_argSharpCount++;
      }

      *s_copyArgValue += text[0];
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      *s_copyArgValue += text[0];

      // do not count '<' inside '(' for code like: "< typename A = (i < 6) >"
      if (s_argSharpCount > 0 && s_argRoundCount == 0) {
         s_argSharpCount--;

      } else  {
         BEGIN( s_readArgContext );
      }
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_argRoundCount++;
      *s_copyArgValue += text[0];
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_argRoundCount--;
      *s_copyArgValue += text[0];
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_argCurlyCount++;
      *s_copyArgValue += text[0];
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      *s_copyArgValue += text[0];

      if (s_argCurlyCount > 0) {
         s_argCurlyCount--;

      } else {
         BEGIN( s_readArgContext );
      }
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDefValue += text;
   }
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDefValue += text;

      QString delimiter = text.mid(1);
      delimiter = delimiter.left(delimiter.length() - 1);

      if (delimiter == s_delimiter) {
         BEGIN( ReadFuncArgDef );
      }
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDefValue += text[0];
      BEGIN( ReadFuncArgDef );
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      BEGIN( ReadFuncArgDef );
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(default_argsYYtext);

      s_lastDocContext = YY_START;
      s_lastDocChar    = text[0];

     if (text.indexOf("//") != -1) {
         BEGIN( ReadDocLine );

      } else {
         BEGIN( ReadDocBlock );
      }
   }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);

      if (text[0] == ')' && s_curArgTypeName.trimmed().isEmpty()) {
         s_curArgTypeName += text[0];
         BEGIN(FuncQual);

      } else {

         s_curArgTypeName = removeRedundantWhiteSpace(s_curArgTypeName);
         s_curArgDefValue = s_curArgDefValue.trimmed();

         int len = s_curArgTypeName.length();

         if (len > 0) {
            int i = len - 1;

            while (i >= 0 && (s_curArgTypeName.at(i).isSpace() || s_curArgTypeName.at(i) == '.')) {
               i--;
            }

            while (i >= 0 && (isId(s_curArgTypeName.at(i)) || s_curArgTypeName.at(i) == '$')) {
               i--;
            }

            Argument arg;

            arg.attrib         = s_curArgAttrib;
            arg.typeConstraint = s_curTypeConstraint.trimmed();
            arg.array          = "";

            if (i == len - 1 && s_curArgTypeName.at(i) == ')') {
               // function argument

               int bi = s_curArgTypeName.indexOf('(');
               int fi = bi - 1;

               while (fi >= 0 && (isId(s_curArgTypeName.at(fi)) || s_curArgTypeName.at(fi) == ':')) {
                  fi--;
               }

               if (fi >= 0) {
                  arg.type  = s_curArgTypeName.left(fi + 1);
                  arg.name  = s_curArgTypeName.mid(fi + 1, bi - fi - 1).trimmed();
                  arg.array = s_curArgTypeName.right(len - bi);

               } else {
                  arg.type = s_curArgTypeName;

               }

            } else if (i >= 0 && s_curArgTypeName.at(i) != ':') {
               // type contains a name

               arg.type = removeRedundantWhiteSpace(s_curArgTypeName.left(i + 1)).trimmed();
               arg.name = s_curArgTypeName.right(len - i - 1).trimmed();

               // if the argument type is not a complete type, need to correct to avoid seeing a
               // nameless parameter "struct A" as a parameter with type "struct" and name "A".

               int sv = 0;

               if (arg.type.startsWith("const ")) {
                  sv = 6;

               } else if (arg.type.startsWith("volatile ")) {
                  sv = 9;

               }

               if (arg.type.mid(sv) == "struct"   || arg.type.mid(sv) == "union" ||
                     arg.type.mid(sv) == "class"  || arg.type.mid(sv) == "typename" ||
                     checkSpecialType(arg.name)) {

                  arg.type = arg.type + " " + arg.name;
                  arg.name = "";
               }

            } else {
               // assume only the type was specified, try to determine name later
               arg.type = removeRedundantWhiteSpace(s_curArgTypeName);

            }

            if (! arg.type.isEmpty() && arg.type.at(0) == '$')  {
               // typeless PHP name?

               arg.name = arg.type;
               arg.type = "";
            }

            arg.array += removeRedundantWhiteSpace(s_curArgArray);

            int alen = arg.array.length();

            if (alen > 2 && arg.array.at(0) == '(' && arg.array.at(alen-1) == ')') {
               // fix-up for int *(a[10])

               int i     = arg.array.indexOf('[') - 1;
               arg.array = arg.array.mid(1, alen - 2);

               if (i > 0 && arg.name.isEmpty()) {
                  arg.name  = arg.array.left(i).trimmed();
                  arg.array = arg.array.mid(i);
               }

            }

            arg.defval = s_curArgDefValue;
            arg.docs   = s_curArgDocs.trimmed();

            s_argList.append(arg);
         }

         s_curArgAttrib.resize(0);
         s_curArgTypeName.resize(0);
         s_curArgDefValue.resize(0);
         s_curArgArray.resize(0);
         s_curArgDocs.resize(0);
         s_curTypeConstraint.resize(0);

         if (text[0] == ')') {
            BEGIN(FuncQual);

         } else {
            BEGIN( ReadFuncArgType );

         }
      }
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      s_curTypeConstraint.resize(0);
      s_lastExtendsContext = YY_START;
      BEGIN(ReadTypeConstraint);
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);

      if (YY_START == ReadFuncArgType && s_curArgArray == "[]") {
         // Java style array

         s_curArgTypeName += " []";
         s_curArgArray.resize(0);
      }

      s_curArgTypeName += text;
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgTypeName += text[0];
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDefValue += text;
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDefValue += text[0];
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      *s_copyArgValue += text;
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      *s_copyArgValue += text[0];
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      unput(*default_argsYYtext);
      BEGIN(s_lastExtendsContext);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curTypeConstraint += text;
   }
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
{
      s_curTypeConstraint += ' ';
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      s_argList.constSpecifier = true;
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      s_argList.volatileSpecifier = true;
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      s_argList.refSpecifier = RefType::LValueRef;
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      s_argList.refSpecifier = RefType::RValueRef;
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      s_argList.pureSpecifier = true;
      BEGIN(FuncQual);
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      // C++11 trailing return type
      s_argList.trailingReturnType = " -> ";
      BEGIN(TrailingReturn);
   }
	YY_BREAK
case 49:
*yy_cp = (yy_hold_char); /* undo effects of setting up default_argsYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up default_argsYYtext again */
YY_RULE_SETUP
{
      unput(*default_argsYYtext);
      BEGIN(FuncQual);
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_argList.trailingReturnType += text;
   }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_argList.trailingReturnType += text;
   }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
{
      // for functions returning a pointer to an array,
      // i.e. ")[]" in "int (*f(int))[4]" with argsString="(int))[4]"
      QString text = QString::fromUtf8(default_argsYYtext);
      s_extraTypeChars = text;
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDocs += text;
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDocs += text;
   }
	YY_BREAK
case 55:
YY_RULE_SETUP
{
      if (s_lastDocChar != 0) {
         unput(s_lastDocChar);
      }
      BEGIN(s_lastDocContext);
   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
      if (s_lastDocChar != 0) {
         unput(s_lastDocChar);
      }
      BEGIN(s_lastDocContext);
   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDocs += text[0];
   }
	YY_BREAK
case 58:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(default_argsYYtext);
      s_curArgDocs += text[0];
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
   // */ (editor syntax fix)
   s_lastDocContext = YY_START;
   s_lastDocChar    = 0;

   if (default_argsYYtext[1] == '/')  {
      BEGIN( ReadDocLine );
   } else {
      BEGIN( ReadDocBlock );
   }
}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP

	YY_BREAK
case 61:
YY_RULE_SETUP

	YY_BREAK
case 62:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Start):
			case YY_STATE_EOF(CopyArgString):
			case YY_STATE_EOF(CopyRawString):
			case YY_STATE_EOF(CopyArgRound):
			case YY_STATE_EOF(CopyArgRound2):
			case YY_STATE_EOF(CopyArgSharp):
			case YY_STATE_EOF(CopyArgCurly):
			case YY_STATE_EOF(ReadFuncArgType):
			case YY_STATE_EOF(ReadFuncArgDef):
			case YY_STATE_EOF(ReadFuncArgPtr):
			case YY_STATE_EOF(FuncQual):
			case YY_STATE_EOF(ReadDocBlock):
			case YY_STATE_EOF(ReadDocLine):
			case YY_STATE_EOF(ReadTypeConstraint):
			case YY_STATE_EOF(TrailingReturn):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed default_argsYYin at a new source and called
			 * default_argsYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = default_argsYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( default_argsYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * default_argsYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of default_argsYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			default_argsYYrestart(default_argsYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) default_argsYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 265 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 265 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 264);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up default_argsYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					default_argsYYrestart(default_argsYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( default_argsYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve default_argsYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void default_argsYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        default_argsYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            default_argsYY_create_buffer(default_argsYYin,YY_BUF_SIZE );
	}

	default_argsYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	default_argsYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void default_argsYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		default_argsYYpop_buffer_state();
	 *		default_argsYYpush_buffer_state(new_buffer);
     */
	default_argsYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	default_argsYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (default_argsYYwrap()) processing, but the only time this flag
	 * is looked at is after default_argsYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void default_argsYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	default_argsYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE default_argsYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) default_argsYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in default_argsYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) default_argsYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in default_argsYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	default_argsYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with default_argsYY_create_buffer()
 * 
 */
    void default_argsYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		default_argsYYfree((void *) b->yy_ch_buf  );

	default_argsYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a default_argsYYrestart() or at EOF.
 */
    static void default_argsYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	default_argsYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then default_argsYY_init_buffer was _probably_
     * called from default_argsYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void default_argsYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		default_argsYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void default_argsYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	default_argsYYensure_buffer_stack();

	/* This block is copied from default_argsYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from default_argsYY_switch_to_buffer. */
	default_argsYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void default_argsYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	default_argsYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		default_argsYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void default_argsYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)default_argsYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in default_argsYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)default_argsYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in default_argsYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE default_argsYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) default_argsYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in default_argsYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	default_argsYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to default_argsYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       default_argsYY_scan_bytes() instead.
 */
YY_BUFFER_STATE default_argsYY_scan_string (yyconst char * yystr )
{
    
	return default_argsYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to default_argsYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE default_argsYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) default_argsYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in default_argsYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = default_argsYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in default_argsYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up default_argsYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		default_argsYYtext[default_argsYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = default_argsYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		default_argsYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int default_argsYYget_lineno  (void)
{
        
    return default_argsYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *default_argsYYget_in  (void)
{
        return default_argsYYin;
}

/** Get the output stream.
 * 
 */
FILE *default_argsYYget_out  (void)
{
        return default_argsYYout;
}

/** Get the length of the current token.
 * 
 */
int default_argsYYget_leng  (void)
{
        return default_argsYYleng;
}

/** Get the current token.
 * 
 */

char *default_argsYYget_text  (void)
{
        return default_argsYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void default_argsYYset_lineno (int  line_number )
{
    
    default_argsYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see default_argsYY_switch_to_buffer
 */
void default_argsYYset_in (FILE *  in_str )
{
        default_argsYYin = in_str ;
}

void default_argsYYset_out (FILE *  out_str )
{
        default_argsYYout = out_str ;
}

int default_argsYYget_debug  (void)
{
        return default_argsYY_flex_debug;
}

void default_argsYYset_debug (int  bdebug )
{
        default_argsYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from default_argsYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    default_argsYYin = stdin;
    default_argsYYout = stdout;
#else
    default_argsYYin = (FILE *) 0;
    default_argsYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * default_argsYYlex_init()
     */
    return 0;
}

/* default_argsYYlex_destroy is for both reentrant and non-reentrant scanners. */
int default_argsYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		default_argsYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		default_argsYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	default_argsYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    default_argsYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * default_argsYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *default_argsYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *default_argsYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void default_argsYYfree (void * ptr )
{
	free( (char *) ptr );	/* see default_argsYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static void yyunput(QChar c, char *yy_bp)
{
   (void) yy_bp;

   QString tmp1    = c;
   QByteArray tmp2 = tmp1.toUtf8();

   for (int i = tmp2.length() -1; i >= 0; i-- ) {
      unput(tmp2[i]);
   }
}

/*! Converts an argument string into an ArgumentList.
 *  \param[in]  list of Arguments.
 *  \param[out] a reference to resulting argument list pointer.
 *  \param[out] extraTypeChars point to string to which trailing characters for complex types are written to
 */

ArgumentList stringToArgumentList(const QString &argsString, const ArgumentList &al)
{
   QString dummy;
   return stringToArgumentList(argsString, al, dummy);
}

ArgumentList stringToArgumentList(const QString &argsString, const ArgumentList &al, QString &extraTypeChars)
{
   if (argsString.isEmpty()) {
      return ArgumentList();
   }

   printlex(default_argsYY_flex_debug, true, __FILE__, "");

   s_copyArgValue = 0;
   s_curArgDocs.resize(0);
   s_curArgAttrib.resize(0);
   s_curArgArray.resize(0);
   s_curTypeConstraint.resize(0);
   s_extraTypeChars.resize(0);

   s_argRoundCount = 0;
   s_argSharpCount = 0;
   s_argCurlyCount = 0;
   s_lastDocChar   = '\0';
   s_inputString   = argsString;
   s_inputPosition = 0;

   s_curArgTypeName.resize(0);
   s_curArgDefValue.resize(0);
   s_curArgName.resize(0);

   s_argList = al;

   default_argsYYrestart(default_argsYYin );
   BEGIN( Start );
   default_argsYYlex();

   extraTypeChars = s_extraTypeChars;

   printlex(default_argsYY_flex_debug, false, __FILE__, "");

   return s_argList;
}

