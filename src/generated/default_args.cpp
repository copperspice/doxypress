/************************************************************************
*
* Copyright (c) 2014-2024 Barbara Geller & Ansel Sermersheim
* Copyright (c) 1997-2014 Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer default_argsYY_create_buffer
#define yy_delete_buffer default_argsYY_delete_buffer
#define yy_scan_buffer default_argsYY_scan_buffer
#define yy_scan_string default_argsYY_scan_string
#define yy_scan_bytes default_argsYY_scan_bytes
#define yy_init_buffer default_argsYY_init_buffer
#define yy_flush_buffer default_argsYY_flush_buffer
#define yy_load_buffer_state default_argsYY_load_buffer_state
#define yy_switch_to_buffer default_argsYY_switch_to_buffer
#define yypush_buffer_state default_argsYYpush_buffer_state
#define yypop_buffer_state default_argsYYpop_buffer_state
#define yyensure_buffer_stack default_argsYYensure_buffer_stack
#define yy_flex_debug default_argsYY_flex_debug
#define yyin default_argsYYin
#define yyleng default_argsYYleng
#define yylex default_argsYYlex
#define yylineno default_argsYYlineno
#define yyout default_argsYYout
#define yyrestart default_argsYYrestart
#define yytext default_argsYYtext
#define yywrap default_argsYYwrap
#define yyalloc default_argsYYalloc
#define yyrealloc default_argsYYrealloc
#define yyfree default_argsYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define default_argsYY_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer default_argsYY_create_buffer
#endif

#ifdef yy_delete_buffer
#define default_argsYY_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer default_argsYY_delete_buffer
#endif

#ifdef yy_scan_buffer
#define default_argsYY_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer default_argsYY_scan_buffer
#endif

#ifdef yy_scan_string
#define default_argsYY_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string default_argsYY_scan_string
#endif

#ifdef yy_scan_bytes
#define default_argsYY_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes default_argsYY_scan_bytes
#endif

#ifdef yy_init_buffer
#define default_argsYY_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer default_argsYY_init_buffer
#endif

#ifdef yy_flush_buffer
#define default_argsYY_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer default_argsYY_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define default_argsYY_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state default_argsYY_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define default_argsYY_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer default_argsYY_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define default_argsYYpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state default_argsYYpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define default_argsYYpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state default_argsYYpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define default_argsYYensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack default_argsYYensure_buffer_stack
#endif

#ifdef yylex
#define default_argsYYlex_ALREADY_DEFINED
#else
#define yylex default_argsYYlex
#endif

#ifdef yyrestart
#define default_argsYYrestart_ALREADY_DEFINED
#else
#define yyrestart default_argsYYrestart
#endif

#ifdef yylex_init
#define default_argsYYlex_init_ALREADY_DEFINED
#else
#define yylex_init default_argsYYlex_init
#endif

#ifdef yylex_init_extra
#define default_argsYYlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra default_argsYYlex_init_extra
#endif

#ifdef yylex_destroy
#define default_argsYYlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy default_argsYYlex_destroy
#endif

#ifdef yyget_debug
#define default_argsYYget_debug_ALREADY_DEFINED
#else
#define yyget_debug default_argsYYget_debug
#endif

#ifdef yyset_debug
#define default_argsYYset_debug_ALREADY_DEFINED
#else
#define yyset_debug default_argsYYset_debug
#endif

#ifdef yyget_extra
#define default_argsYYget_extra_ALREADY_DEFINED
#else
#define yyget_extra default_argsYYget_extra
#endif

#ifdef yyset_extra
#define default_argsYYset_extra_ALREADY_DEFINED
#else
#define yyset_extra default_argsYYset_extra
#endif

#ifdef yyget_in
#define default_argsYYget_in_ALREADY_DEFINED
#else
#define yyget_in default_argsYYget_in
#endif

#ifdef yyset_in
#define default_argsYYset_in_ALREADY_DEFINED
#else
#define yyset_in default_argsYYset_in
#endif

#ifdef yyget_out
#define default_argsYYget_out_ALREADY_DEFINED
#else
#define yyget_out default_argsYYget_out
#endif

#ifdef yyset_out
#define default_argsYYset_out_ALREADY_DEFINED
#else
#define yyset_out default_argsYYset_out
#endif

#ifdef yyget_leng
#define default_argsYYget_leng_ALREADY_DEFINED
#else
#define yyget_leng default_argsYYget_leng
#endif

#ifdef yyget_text
#define default_argsYYget_text_ALREADY_DEFINED
#else
#define yyget_text default_argsYYget_text
#endif

#ifdef yyget_lineno
#define default_argsYYget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno default_argsYYget_lineno
#endif

#ifdef yyset_lineno
#define default_argsYYset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno default_argsYYset_lineno
#endif

#ifdef yywrap
#define default_argsYYwrap_ALREADY_DEFINED
#else
#define yywrap default_argsYYwrap
#endif

#ifdef yyalloc
#define default_argsYYalloc_ALREADY_DEFINED
#else
#define yyalloc default_argsYYalloc
#endif

#ifdef yyrealloc
#define default_argsYYrealloc_ALREADY_DEFINED
#else
#define yyrealloc default_argsYYrealloc
#endif

#ifdef yyfree
#define default_argsYYfree_ALREADY_DEFINED
#else
#define yyfree default_argsYYfree
#endif

#ifdef yytext
#define default_argsYYtext_ALREADY_DEFINED
#else
#define yytext default_argsYYtext
#endif

#ifdef yyleng
#define default_argsYYleng_ALREADY_DEFINED
#else
#define yyleng default_argsYYleng
#endif

#ifdef yyin
#define default_argsYYin_ALREADY_DEFINED
#else
#define yyin default_argsYYin
#endif

#ifdef yyout
#define default_argsYYout_ALREADY_DEFINED
#else
#define yyout default_argsYYout
#endif

#ifdef yy_flex_debug
#define default_argsYY_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug default_argsYY_flex_debug
#endif

#ifdef yylineno
#define default_argsYYlineno_ALREADY_DEFINED
#else
#define yylineno default_argsYYlineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = nullptr; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or nullptr.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : nullptr)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * nullptr or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = nullptr;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define default_argsYYwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = nullptr, *yyout = nullptr;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 66
#define YY_END_OF_BUFFER 67
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[362] =
    {   0,
        2,    2,   67,   65,   66,   64,   66,   65,   66,    1,
       65,   66,   40,   65,   66,   32,   40,   65,   66,   40,
       65,   66,   40,   65,   66,   40,   65,   66,   40,   65,
       66,   40,   65,   66,   40,   65,   66,   42,   65,   66,
       41,   42,   65,   66,   16,   42,   65,   66,   17,   18,
       42,   65,   66,   42,   65,   66,   17,   42,   65,   66,
       19,   42,   65,   66,   20,   21,   42,   65,   66,   26,
       42,   65,   66,   27,   42,   65,   66,   24,   42,   65,
       66,   25,   42,   65,   66,   28,   42,   65,   66,   29,
       42,   65,   66,   38,   65,   66,    2,   38,   65,   66,

       37,   38,   65,   66,   15,   38,   65,   66,   35,   38,
       65,   66,   38,   65,   66,   38,   65,   66,   15,   38,
       65,   66,   33,   38,   65,   66,   35,   38,   65,   66,
       37,   38,   65,   66,   15,   38,   65,   66,   37,   38,
       65,   66,   15,   38,   65,   66,    8,   40,   65,   66,
       40,   65,   66,   15,   40,   65,   66,   35,   40,   65,
       66,   15,   40,   65,   66,   35,   40,   65,   66,   40,
       65,   66,   40,   65,   66,   40,   65,   66,   10,   37,
       38,   65,   66,   13,   38,   65,   66,   10,   37,   38,
       65,   66,   10,   37,   38,   65,   66,   49,   65,   66,

       65,   66,   65,   66,   65,   66,   65,   66,   65,   66,
       65,   66,   57,   62,   65,   66,   61,   64,   66,   62,
       65,   66,   57,   62,   65,   66,   58,   65,   66,   60,
       64,   66,   58,   65,   66,   44,   65,   66,   45,   64,
       66,   43,   44,   65,   66,   44,   65,   66,   54,   65,
       66,   54,   65,   66,   55,   64,   66,   54,   65,   66,
       54,   65,   66,   39,   30,   31,   41,   18,   17,   21,
       20,   22,   23,    2,   37,   37,16393,   14,    3,   37,
       10,   37,   10,   37,   11,   12,   10,   37,   50,   52,
       51,   57,   59,   57,   58,   58,   58,   63,   31,   17,

       17,   20,   20,16393, 8201,   37,    6,    6,    7,   10,
       37,   56,   57,   63,   58,   63,   63,   31, 8201,   37,
        5,    4,    5,   10,   37,   57,   63,   58,   63,   31,
       34,   37,    4,   10,   37,   46,   31,   37,   10,   37,
       53,   31,   36,   37,   10,   36,   37,   53,   31,   48,
       47,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31
    } ;

static const flex_int16_t yy_accept[285] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    6,    8,   10,   13,
       16,   20,   23,   26,   29,   32,   35,   38,   41,   45,
       49,   54,   57,   61,   65,   70,   74,   78,   82,   86,
       90,   94,   97,  101,  105,  109,  113,  116,  119,  123,
      127,  131,  135,  139,  143,  147,  151,  154,  158,  162,
      166,  170,  173,  176,  179,  184,  188,  193,  198,  201,
      203,  205,  207,  209,  211,  213,  217,  220,  223,  227,

      230,  233,  236,  239,  242,  246,  249,  252,  255,  258,
      261,  264,  264,  264,  265,  266,  266,  267,  268,  269,
      270,  270,  271,  272,  273,  274,  275,  276,  277,  277,
      277,  278,  278,  278,  279,  279,  280,  281,  281,  281,
      281,  281,  281,  283,  285,  285,  286,  287,  289,  290,
      290,  290,  291,  291,  292,  292,  292,  292,  293,  294,
      295,  296,  297,  298,  298,  298,  299,  299,  300,  301,
      302,  302,  303,  304,  304,  304,  304,  305,  306,  306,
      306,  307,  308,  308,  309,  309,  309,  310,  312,  312,
      313,  313,  313,  313,  315,  317,  317,  317,  318,  318,

      319,  319,  320,  320,  321,  322,  324,  324,  324,  326,
      326,  326,  326,  328,  330,  330,  330,  330,  331,  332,
      333,  334,  334,  334,  336,  337,  337,  337,  337,  337,
      337,  338,  339,  339,  341,  341,  341,  342,  342,  342,
      343,  345,  345,  348,  348,  348,  349,  349,  349,  350,
      350,  351,  352,  352,  352,  353,  353,  353,  354,  354,
      354,  355,  355,  355,  356,  356,  356,  357,  357,  357,
      358,  358,  358,  359,  359,  359,  360,  360,  360,  361,
      361,  362,  362,  362
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    6,    1,    7,    8,    9,
       10,   11,    1,   12,   13,    1,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   17,   18,   19,    1,   20,
       21,   22,    1,    1,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   24,   23,   23,   23,   23,
       23,   25,   23,   23,   26,   23,   23,   23,   23,   23,
       27,   28,   29,   30,   23,    1,   31,   23,   32,   33,

       34,   35,   23,   23,   36,   23,   23,   37,   23,   38,
       39,   23,   23,   40,   41,   42,   43,   44,   23,   45,
       23,   23,   46,    1,   47,    1,    1,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23
    } ;

static const YY_CHAR yy_meta[48] =
    {   0,
        1,    2,    3,    1,    1,    4,    1,    1,    5,    6,
        7,    1,    1,    1,    8,    8,    8,    8,    9,    1,
        1,    1,    4,    4,    4,    4,    1,   10,    1,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    1
    } ;

static const flex_int16_t yy_base[339] =
    {   0,
        0,    1,    2,    3,    5,   21,   18,   26,   49,    0,
      892,  887,   88,   91,   94,   99,   96,  101,  148,    0,
      193,    0,  239,    0,  284,  326,   28,   34,    6,   99,
      119,  122,  124,  207,  896, 1009, 1009,   33, 1009, 1009,
     1009,  871,  126,  103,  178,    0,  883, 1009,    0, 1009,
      882,  197,  877, 1009,  876, 1009, 1009,  855,  848, 1009,
     1009, 1009,  864,  207,  288,  202,  839,  215,  210, 1009,
      286,    0,  831,  812, 1009, 1009,  824, 1009,  287,  212,
      290,  823,  838,   13,  304,  300,    0,  797,  832,  210,
      812,   97,  791,  781,  785,    0, 1009,  807,  224,    0,

     1009,  282, 1009, 1009, 1009,  292, 1009,  100, 1009,  299,
      212,  313,  311, 1009, 1009,  811,  807,    0,  805,  328,
      804,  801,  333, 1009, 1009,  796,    0,    0,  312,  350,
      380,  324,  323, 1009,  765, 1009,  747,  780,  347,  780,
      771,  751,    0,    0,  351, 1009, 1009,  729, 1009,  339,
      741, 1009,  352, 1009,  729,  728,  721,    0, 1009,  328,
        0,  360,  424,  717,  708,  729,  729,  725,  357,    0,
      719,  427,    0,  428,  698,  429,  426,  459,  428,  437,
      682, 1009,  707,  705,  438,  701, 1009,  675,  679, 1009,
      665,  661,  669,  677,  668,  644,  644, 1009,  669,  668,

      505,    0,  652,  631, 1009, 1009,  442,  659,  629,  616,
      604,  601,    0,    0,  611,  599,  631,  624, 1009,  595,
     1009,  619,  615,  588, 1009,  582,  581,  579,  571,  605,
      602,  557,  525,  492,  499,  494,  528,  493,  523,  522,
        0,  517,    0,  491,  490,  521,  489,  516,  515,  510,
     1009, 1009,  484,  512,  510,  505,  508,  506,  501,  504,
      503,  460,  450,  447,  440,  430,  429,  381,  374,  372,
      367,  363,  351,  225,  192,  141,  121,  123,  102,   37,
     1009,    4, 1009,  535,  545,  555,  565,  575,  585,  595,
      605,  611,  618,  621,  622,  630,  637,  645,  655,  662,

      667,  675,  685,  695,  703,  710,  718,  728,  737,  747,
      756,  765,  774,  783,  792,  801,  810,  819,  828,  837,
      846,  855,  864,  873,  882,  891,  900,  909,  918,  927,
      936,  945,  954,  963,  972,  981,  990,  999
    } ;

static const flex_int16_t yy_def[339] =
    {   0,
      284,  284,  284,  284,  285,  285,  285,  285,  283,    9,
        9,    9,    9,    9,    9,    9,    9,    9,  283,   19,
      285,   21,  283,   23,  284,  284,  286,  286,  287,  287,
      288,  288,  289,  289,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  290,  291,  283,  292,  283,
      293,  283,  293,  283,  294,  283,  283,  283,  283,  283,
      283,  283,  283,  295,  296,  283,  283,  283,  283,  283,
      283,  297,  298,  297,  283,  283,  299,  283,  283,  283,
      283,  283,  283,  283,  300,  283,  301,  301,  283,  283,
      283,  283,  283,  283,  283,  302,  283,  283,  302,  303,

      283,  303,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  304,  304,  292,  293,  305,
      293,  294,  306,  283,  283,  283,  297,  297,  296,  296,
      283,  283,  283,  283,  298,  283,  297,  283,  307,  283,
      308,  283,  301,  301,  283,  283,  283,  301,  283,  283,
      309,  283,  283,  283,  283,  283,  283,  302,  283,  302,
      303,  303,  303,  283,  283,  283,  310,  310,  305,  169,
      294,  306,  172,  296,  283,  296,  131,  283,  283,  283,
      297,  283,  283,  283,  283,  311,  283,  301,  309,  283,
      283,  283,  283,  302,  303,  283,  283,  283,  312,  312,

      296,  178,  283,  297,  283,  283,  283,  313,  301,  283,
      283,  283,  302,  303,  283,  283,  314,  314,  283,  297,
      283,  283,  315,  301,  283,  283,  283,  283,  283,  316,
      316,  297,  317,  301,  283,  283,  283,  283,  318,  318,
      297,  319,  301,  283,  283,  283,  283,  320,  320,  321,
      283,  283,  283,  322,  322,  323,  324,  324,  325,  326,
      326,  327,  328,  328,  329,  330,  330,  331,  332,  332,
      333,  334,  334,  335,  336,  336,  337,  283,  283,  338,
      283,  283,    0,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,

      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283
    } ;

static const flex_int16_t yy_nxt[1057] =
    {   0,
      283,  283,   37,   37,   37,   37,  283,   37,  101,   41,
       39,   39,  187,   38,   38,   38,   38,   42,   43,  102,
       37,   39,   39,   37,   44,   41,   45,   47,   37,  142,
       97,   43,   46,   42,   43,   47,   97,  140,   98,   43,
       44,   99,   45,  112,   98,  187,  113,   99,   46,   48,
       48,   37,   48,   48,   49,   48,   48,   50,   51,   48,
       48,   48,   52,   48,   48,   48,   48,   48,   48,   48,
       48,   49,   49,   49,   49,   48,   48,   48,   48,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   48,   48,   48,   48,  153,   48,

       48,  101,   56,   57,   48,   48,  281,   56,   57,   48,
       48,  154,  102,   58,   54,   59,   55,   54,   58,   55,
       59,  104,  114,  114,  104,  108,  109,  281,  105,  187,
      105,  105,  106,  105,  164,  106,  112,  110,  165,  113,
      105,   60,   61,  105,  111,  279,   60,   61,   62,   63,
       37,   62,   62,   64,   62,   62,   65,   66,   62,   66,
       67,   68,   62,   62,   62,   62,   62,   69,   70,   71,
       72,   72,   72,   72,   73,   62,   62,   62,   72,   72,
       72,   74,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   75,   62,   37,  279,   76,  114,  114,

       77,   78,   79,  132,   79,   42,   43,  112,  108,  109,
      113,  150,   80,  153,   81,  133,   82,   83,   82,   78,
      110,  128,  128,  128,  128,  112,  154,  111,  113,  134,
      134,  114,  114,  187,  112,   84,  151,  160,   78,   62,
       62,   37,   62,   62,   85,   62,   62,   62,   86,   62,
       62,   62,   68,   62,   62,   62,   62,   62,   62,   62,
       62,   87,   87,   87,   87,   62,   62,   62,   62,   87,
       87,   87,   88,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   62,   62,   37,  132,  132,  130,
       89,  132,  162,   90,  131,  163,   91,   38,  131,  133,

      133,  145,  112,  133,   92,  113,  134,  134,  146,  112,
      114,  114,  113,  174,  166,   93,  166,  131,  144,  144,
      144,  144,   94,  166,  166,  132,  147,   95,   37,  121,
      175,  194,   89,  179,  171,   90,  180,  133,   91,   38,
      150,  194,  170,  170,  170,  170,   92,  173,  173,  173,
      173,  176,  145,  153,  184,  276,  131,   93,  121,  146,
      131,  185,  185,  195,   94,  151,  154,  276,  175,   95,
      195,  170,  170,  170,  170,  187,  273,  147,  273,  131,
      129,  177,  129,  129,  129,  178,  131,  129,  129,  187,
      131,  129,  129,  129,  129,  129,  129,  129,  175,  129,

      129,  129,  178,  178,  178,  178,  129,  129,  129,  131,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  129,  129,  195,  171,  174,
      176,  203,  129,  270,  270,  131,  129,  195,  203,  131,
      203,  173,  173,  173,  173,  206,  175,  175,  187,  221,
      203,  267,  207,  207,  267,  129,  222,  222,  131,  129,
      174,  129,  129,  129,  202,  129,  129,  129,  187,  129,
      129,  129,  129,  202,  202,  202,  202,  175,  129,  129,
      129,  202,  202,  202,  202,  129,  129,  129,  129,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  129,  129,  130,  264,  264,  187,
      261,  131,  261,  187,  258,  131,  258,  237,  187,  255,
      255,  253,  246,  252,  251,  187,  249,  249,  247,  246,
      245,  244,  243,  187,  131,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  107,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  115,  115,  241,  115,  115,

      115,  115,  115,  115,  115,  116,  240,  116,  116,  240,
      238,  116,  116,  116,  118,  237,  236,  235,  118,  120,
      234,  120,  123,  187,  123,  127,  221,  232,  231,  127,
      129,  129,  129,  129,  129,  231,  129,  129,  229,  129,
      128,  228,  227,  226,  128,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  138,  138,  225,  138,  138,
      138,  138,  138,  138,  138,  143,  224,  187,  220,  143,
      144,  219,  218,  218,  144,  158,  158,  216,  158,  158,
      158,  215,  158,  158,  158,  161,  161,  214,  161,  161,
      161,  161,  161,  161,  161,  167,  213,  167,  167,  212,

      211,  167,  167,  167,  169,  210,  169,  190,  209,  187,
      169,  172,  205,  172,  205,  204,  201,  172,  183,  183,
      171,  183,  183,  183,  183,  183,  183,  183,  186,  200,
      186,  186,  186,  200,  186,  186,  186,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  199,  198,  199,
      199,  197,  196,  199,  199,  199,  208,  193,  208,  208,
      208,  192,  208,  208,  208,  217,  191,  217,  217,  190,
      188,  217,  217,  217,  223,  140,  223,  223,  223,  187,
      223,  223,  223,  230,  141,  230,  230,  182,  181,  230,
      230,  230,  233,  136,  233,  233,  233,  126,  233,  233,

      233,  239,  122,  239,  239,  121,  119,  239,  239,  239,
      242,  168,  242,  242,  242,  168,  242,  242,  242,  248,
      159,  248,  248,  157,  156,  248,  248,  248,  250,  155,
      250,  250,  250,  152,  250,  250,  250,  254,  149,  254,
      254,  148,  141,  254,  254,  254,  256,  140,  256,  256,
      256,  139,  256,  256,  256,  257,  137,  257,  257,  136,
      134,  257,  257,  257,  259,  126,  259,  259,  259,  125,
      259,  259,  259,  260,  124,  260,  260,  122,  121,  260,
      260,  260,  262,  119,  262,  262,  262,  117,  262,  262,
      262,  263,  114,  263,  263,  283,   53,  263,  263,  263,

      265,   53,  265,  265,  265,  283,  265,  265,  265,  266,
      283,  266,  266,  283,  283,  266,  266,  266,  268,  283,
      268,  268,  268,  283,  268,  268,  268,  269,  283,  269,
      269,  283,  283,  269,  269,  269,  271,  283,  271,  271,
      271,  283,  271,  271,  271,  272,  283,  272,  272,  283,
      283,  272,  272,  272,  274,  283,  274,  274,  274,  283,
      274,  274,  274,  275,  283,  275,  275,  283,  283,  275,
      275,  275,  277,  283,  277,  277,  277,  283,  277,  277,
      277,  278,  283,  278,  278,  283,  283,  278,  278,  278,
      280,  283,  280,  280,  280,  283,  280,  280,  280,  282,

      283,  282,  282,  282,  283,  282,  282,  282,   35,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283
    } ;

static const flex_int16_t yy_chk[1057] =
    {   0,
        0,    0,    1,    2,    3,    4,    0,    5,   29,    5,
        3,    4,  282,    1,    2,    3,    4,    5,    5,   29,
        7,    3,    4,    6,    5,    6,    5,    7,    8,   84,
       27,    7,    5,    6,    6,    8,   28,   84,   27,    8,
        6,   27,    6,   38,   28,  280,   38,   28,    6,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   13,   13,   92,   14,

       14,   30,   15,   15,   17,   17,  279,   16,   16,   18,
       18,   92,   30,   15,   13,   15,   13,   14,   16,   14,
       16,   31,   44,   44,   32,   33,   33,  278,   31,  277,
       31,   32,   31,   32,  108,   32,   43,   33,  108,   43,
       31,   17,   17,   32,   33,  276,   18,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   21,  275,   21,   45,   45,

       21,   21,   21,   66,   21,   21,   21,   52,   34,   34,
       52,   90,   21,  111,   21,   66,   21,   21,   21,   21,
       34,   64,   64,   64,   64,   68,  111,   34,   68,   69,
       69,   80,   80,  274,   99,   21,   90,   99,   21,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   25,   71,   79,   65,
       25,   81,  102,   25,   65,  102,   25,   25,   65,   71,

       79,   86,  106,   81,   25,  106,   71,   71,   86,  110,
       81,   81,  110,  129,  113,   25,  112,   65,   85,   85,
       85,   85,   25,  112,  113,  132,   86,   25,   26,  120,
      129,  160,   26,  133,  123,   26,  133,  132,   26,   26,
      150,  160,  120,  120,  120,  120,   26,  123,  123,  123,
      123,  130,  145,  153,  139,  273,  130,   26,  169,  145,
      130,  139,  139,  162,   26,  150,  153,  272,  130,   26,
      162,  169,  169,  169,  169,  271,  270,  145,  269,  130,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  268,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  163,  172,  174,
      176,  179,  177,  267,  266,  176,  177,  163,  179,  176,
      180,  172,  172,  172,  172,  185,  174,  176,  265,  207,
      180,  264,  185,  185,  263,  177,  207,  207,  176,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  262,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  178,  178,  178,  201,  261,  260,  259,
      258,  201,  257,  256,  255,  201,  254,  253,  250,  249,
      248,  247,  246,  245,  244,  242,  240,  239,  238,  237,
      236,  235,  234,  233,  201,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  288,  288,  288,  288,  288,
      288,  288,  288,  288,  288,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  290,  290,  232,  290,  290,

      290,  290,  290,  290,  290,  291,  231,  291,  291,  230,
      229,  291,  291,  291,  292,  228,  227,  226,  292,  293,
      224,  293,  294,  223,  294,  295,  222,  220,  218,  295,
      296,  296,  296,  296,  296,  217,  296,  296,  216,  296,
      297,  215,  212,  211,  297,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  299,  299,  210,  299,  299,
      299,  299,  299,  299,  299,  300,  209,  208,  204,  300,
      301,  203,  200,  199,  301,  302,  302,  197,  302,  302,
      302,  196,  302,  302,  302,  303,  303,  195,  303,  303,
      303,  303,  303,  303,  303,  304,  194,  304,  304,  193,

      192,  304,  304,  304,  305,  191,  305,  189,  188,  186,
      305,  306,  184,  306,  183,  181,  175,  306,  307,  307,
      171,  307,  307,  307,  307,  307,  307,  307,  308,  168,
      308,  308,  308,  167,  308,  308,  308,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  310,  166,  310,
      310,  165,  164,  310,  310,  310,  311,  157,  311,  311,
      311,  156,  311,  311,  311,  312,  155,  312,  312,  151,
      148,  312,  312,  312,  313,  142,  313,  313,  313,  141,
      313,  313,  313,  314,  140,  314,  314,  138,  137,  314,
      314,  314,  315,  135,  315,  315,  315,  126,  315,  315,

      315,  316,  122,  316,  316,  121,  119,  316,  316,  316,
      317,  117,  317,  317,  317,  116,  317,  317,  317,  318,
       98,  318,  318,   95,   94,  318,  318,  318,  319,   93,
      319,  319,  319,   91,  319,  319,  319,  320,   89,  320,
      320,   88,   83,  320,  320,  320,  321,   82,  321,  321,
      321,   77,  321,  321,  321,  322,   74,  322,  322,   73,
       67,  322,  322,  322,  323,   63,  323,  323,  323,   59,
      323,  323,  323,  324,   58,  324,  324,   55,   53,  324,
      324,  324,  325,   51,  325,  325,  325,   47,  325,  325,
      325,  326,   42,  326,  326,   35,   12,  326,  326,  326,

      327,   11,  327,  327,  327,    0,  327,  327,  327,  328,
        0,  328,  328,    0,    0,  328,  328,  328,  329,    0,
      329,  329,  329,    0,  329,  329,  329,  330,    0,  330,
      330,    0,    0,  330,  330,  330,  331,    0,  331,  331,
      331,    0,  331,  331,  331,  332,    0,  332,  332,    0,
        0,  332,  332,  332,  333,    0,  333,  333,  333,    0,
      333,  333,  333,  334,    0,  334,  334,    0,    0,  334,
      334,  334,  335,    0,  335,  335,  335,    0,  335,  335,
      335,  336,    0,  336,  336,    0,    0,  336,  336,  336,
      337,    0,  337,  337,  337,    0,  337,  337,  337,  338,

        0,  338,  338,  338,    0,  338,  338,  338,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*************************************************************************
 *
 * Copyright (c) 2014-2024 Barbara Geller & Ansel Sermersheim
 * Copyright (c) 1997-2014 Dimitri van Heesch

*************************************************************************/

#include <default_args.h>

#include <arguments.h>
#include <entry.h>
#include <message.h>
#include <util.h>

#include <QRegularExpression>
#include <QStringList>

#include <assert.h>
#include <ctype.h>
#include <stdio.h>

#define YY_NO_INPUT 1

static QString          s_inputString;
static int              s_inputPosition;
static ArgumentList     s_argList;
static SrcLangExt       s_language;
static QString         *s_copyArgValue;
static QString          s_curArgTypeName;
static QString          s_curArgDefValue;
static QString          s_curArgName;
static QString          s_curArgDocs;
static QString          s_curArgAttrib;
static QString          s_curArgArray;
static QString          s_curTypeConstraint;
static QString          s_extraTypeChars;
static int              s_argRoundCount;
static int              s_argSquareCount;
static int              s_argSharpCount;
static int              s_argCurlyCount;
static int              s_readArgContext;
static int              s_lastDocContext;
static QChar            s_lastDocChar;
static int              s_lastExtendsContext;
static QString          s_delimiter;

// static functions
static void yyunput(QChar c, char *yy_bp);

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

static bool checkSpecialType(QString &name)
{
   static QSet<QString> keywords;

   if (keywords.isEmpty()) {

      keywords.insert("unsigned");
      keywords.insert("signed");
      keywords.insert("bool");
      keywords.insert("char");
      keywords.insert("wchar_t");
      keywords.insert("char8_t");
      keywords.insert("char16_t");
      keywords.insert("char32_t");
      keywords.insert("int");
      keywords.insert("short");
      keywords.insert("long");
      keywords.insert("float");
      keywords.insert("double");
      keywords.insert("int8_t");
      keywords.insert("uint8_t");
      keywords.insert("int16_t");
      keywords.insert("uint16_t");
      keywords.insert("int32_t");
      keywords.insert("uint32_t");
      keywords.insert("int64_t");
      keywords.insert("uint64_t");
      keywords.insert("intmax_t");
      keywords.insert("intptr_t");
      keywords.insert("uintmax_t");
      keywords.insert("uintptr_t");
      keywords.insert("const");
      keywords.insert("void");
      keywords.insert("volatile");
   }

   return ! name.isEmpty() && keywords.contains(name);
}

#define YY_NO_UNISTD_H 1

#define INITIAL 0
#define Start 1
#define CopyArgString 2
#define CopyRawString 3
#define CopyArgRound 4
#define CopyArgRound2 5
#define CopyArgSquare 6
#define CopyArgSharp 7
#define CopyArgCurly 8
#define ReadFuncArgType 9
#define ReadFuncArgDef 10
#define ReadFuncArgPtr 11
#define FuncQual 12
#define ReadDocBlock 13
#define ReadDocLine 14
#define ReadTypeConstraint 15
#define TrailingReturn 16

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 284 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 283 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
      BEGIN(ReadFuncArgType);
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      s_curArgTypeName += " ";
   }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      if (s_curArgTypeName.trimmed().isEmpty()) {
         // for M$-ID
         s_curArgAttrib = text;

      } else {
         // array type

         s_curArgArray += text;
      }
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDefValue += text;
   }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDefValue += text;
   }
	YY_BREAK
case 6:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDefValue += text;
   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDefValue += text;

      int i = text.indexOf('"');

      s_delimiter = text.mid(i + 1);
      s_delimiter = s_delimiter.left(s_delimiter.length() - 1);
      BEGIN( CopyRawString );
   }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDefValue += text[0];
      BEGIN( CopyArgString );
   }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
{
      // function pointer as argument
      QString text = QString::fromUtf8(yytext);
      s_curArgTypeName += text;

      // s_curArgTypeName = s_curArgTypeName.simplifyWhiteSpace();
      BEGIN( ReadFuncArgPtr );
   }
	YY_BREAK
case 10:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgName = text;
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
{
      // function pointer
      QString text = QString::fromUtf8(yytext);
      s_curArgTypeName += text;

      s_readArgContext = ReadFuncArgType;
      s_copyArgValue   = &s_curArgTypeName;
      s_argRoundCount  = 0;
      BEGIN( CopyArgRound2 );
   }
	YY_BREAK
case 12:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      // pointer to fixed size array
      QString text = QString::fromUtf8(yytext);

      s_curArgTypeName += text;
      s_curArgTypeName += s_curArgName;
      BEGIN( ReadFuncArgType );
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      // redundant braces detected, remove them
      int i   = s_curArgTypeName.lastIndexOf('(');
      int len = s_curArgTypeName.length();

      if (i != -1) {
         s_curArgTypeName = s_curArgTypeName.left(i) + s_curArgTypeName.right(len - i - 1);
      }

      s_curArgTypeName += s_curArgName;
      BEGIN( ReadFuncArgType );
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      // handle operators
      QString text = QString::fromUtf8(yytext);
      s_curArgTypeName += text;
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      if (YY_START == ReadFuncArgType) {
         s_curArgTypeName += text[0];
         s_copyArgValue    = &s_curArgTypeName;

      } else {
         s_curArgDefValue += text[0];
         s_copyArgValue    = &s_curArgDefValue;
      }

      s_readArgContext = YY_START;

      if (text[0] == '(') {
         s_argRoundCount = 0;
         BEGIN(CopyArgRound);

      } else if (text[0] == '[') {
         s_argSquareCount = 0;
         BEGIN(CopyArgSquare);

      } else if (text[0] == '{') {
         s_argCurlyCount = 0;
         BEGIN( CopyArgCurly );

      } else {
         //  text == '<'

         s_argSharpCount = 0;
         s_argRoundCount = 0;
         BEGIN(CopyArgSharp);
      }
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_argRoundCount++;
      *s_copyArgValue += text[0];
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      *s_copyArgValue += text;

      if (s_argRoundCount > 0) {
         --s_argRoundCount;

      } else {

         if (YY_START == CopyArgRound2) {
            *s_copyArgValue += " " + s_curArgName;
         }

         BEGIN(s_readArgContext);
      }
   }
	YY_BREAK
case 18:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      *s_copyArgValue += text[0];

      if (s_argRoundCount > 0) {
         --s_argRoundCount;

      } else {
         BEGIN(s_readArgContext);

      }
   }
	YY_BREAK
case 19:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      *s_copyArgValue += text[0];
      ++s_argSquareCount;
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      *s_copyArgValue += text;

      if (s_argSquareCount > 0) {
         --s_argRoundCount;
      } else {
         BEGIN(s_readArgContext);
      }
   }
	YY_BREAK
case 21:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      *s_copyArgValue += text[0];

      if (s_argSquareCount > 0)  {
         --s_argSquareCount;
      } else {
         BEGIN(s_readArgContext);
      }
   }
	YY_BREAK
case 22:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      if (s_argRoundCount > 0) {
         *s_copyArgValue += text;

      } else {
         REJECT;
      }
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      if (s_argRoundCount > 0) {
         *s_copyArgValue += text;

      } else {
         REJECT;
      }
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      // do not count '<' inside '(' for code like: "< typename A = (i < 6) >"
      if (s_argRoundCount == 0) {
         ++s_argSharpCount;
      }

      *s_copyArgValue += text[0];
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      *s_copyArgValue += text[0];

      if (s_argSharpCount == 0 && s_argRoundCount > 0) {
         // do not count '<' inside '(' for code like: "< typename A = (i < 6) >"

      } else {
         if (s_argSharpCount > 0) {
            --s_argSharpCount;
         } else  {
            BEGIN(s_readArgContext);
         }
      }
   }
	YY_BREAK
case 26:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      *s_copyArgValue += text[0];
      ++s_argRoundCount;
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      *s_copyArgValue += text[0];
      --s_argRoundCount;
   }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      *s_copyArgValue += text[0];
      ++s_argCurlyCount;
   }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      *s_copyArgValue += text[0];

      if (s_argCurlyCount > 0) {
         --s_argCurlyCount;

      } else {
         BEGIN(s_readArgContext);
      }
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDefValue += text;
   }
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDefValue += text;

      QString delimiter = text.mid(1);
      delimiter = delimiter.left(delimiter.length() - 1);

      if (delimiter == s_delimiter) {
         BEGIN( ReadFuncArgDef );
      }
   }
	YY_BREAK
case 32:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDefValue += text[0];
      BEGIN( ReadFuncArgDef );
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      BEGIN( ReadFuncArgDef );
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      // */ (editor syntax fix)
      QString text = QString::fromUtf8(yytext);

      s_lastDocContext = YY_START;
      s_lastDocChar    = text[0];

     if (text.indexOf("//") != -1) {
         BEGIN( ReadDocLine );

      } else {
         BEGIN( ReadDocBlock );
      }
   }
	YY_BREAK
case 35:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      if (text[0] == ')' && s_curArgTypeName.trimmed().isEmpty()) {
         s_curArgTypeName += text[0];
         BEGIN(FuncQual);

      } else {

         s_curArgTypeName = removeRedundantWhiteSpace(s_curArgTypeName);
         s_curArgDefValue = s_curArgDefValue.trimmed();

         int len = s_curArgTypeName.length();

         if (len > 0) {
            int i = len - 1;

            while (i >= 0 && (s_curArgTypeName.at(i).isSpace() || s_curArgTypeName.at(i) == '.')) {
               i--;
            }

            while (i >= 0 && (isId(s_curArgTypeName.at(i)) || s_curArgTypeName.at(i) == '$')) {
               i--;
            }

            Argument arg;

            arg.attrib         = s_curArgAttrib;
            arg.typeConstraint = s_curTypeConstraint.trimmed();
            arg.array          = "";

            if (i == len - 1 && s_curArgTypeName.at(i) == ')') {
               // function argument

               int bi = s_curArgTypeName.indexOf('(');
               int fi = bi - 1;

               while (fi >= 0 && (isId(s_curArgTypeName.at(fi)) || s_curArgTypeName.at(fi) == ':')) {
                  fi--;
               }

               if (fi >= 0) {
                  arg.type  = s_curArgTypeName.left(fi + 1);
                  arg.name  = s_curArgTypeName.mid(fi + 1, bi - fi - 1).trimmed();
                  arg.array = s_curArgTypeName.right(len - bi);

               } else {
                  arg.type = s_curArgTypeName;

               }

            } else if (i >= 0 && s_curArgTypeName.at(i) != ':') {
               // type contains a name

               arg.type = removeRedundantWhiteSpace(s_curArgTypeName.left(i + 1)).trimmed();
               arg.name = s_curArgTypeName.right(len - i - 1).trimmed();

               // if the argument type is not a complete type, need to correct to avoid seeing a
               // nameless parameter "struct A" as a parameter with type "struct" and name "A".

               int sv = 0;

               if (arg.type.startsWith("const ")) {
                  sv = 6;

               } else if (arg.type.startsWith("volatile ")) {
                  sv = 9;

               }

               if (arg.type.mid(sv) == "struct"   || arg.type.mid(sv) == "union" ||
                     arg.type.mid(sv) == "class"  || arg.type.mid(sv) == "typename" ||
                     checkSpecialType(arg.name)) {

                  arg.type = arg.type + " " + arg.name;
                  arg.name = "";
               }

            } else {
               // assume only the type was specified, try to determine name later
               arg.type = removeRedundantWhiteSpace(s_curArgTypeName);

            }

            if (! arg.type.isEmpty() && arg.type.at(0) == '$')  {
               // typeless PHP name?

               arg.name = arg.type;
               arg.type = "";
            }

            arg.array += removeRedundantWhiteSpace(s_curArgArray);

            int alen = arg.array.length();

            if (alen > 2 && arg.array.at(0) == '(' && arg.array.at(alen-1) == ')') {
               // fix-up for int *(a[10])

               int pos     = arg.array.indexOf('[') - 1;
               arg.array = arg.array.mid(1, alen - 2);

               if (pos > 0 && arg.name.isEmpty()) {
                  arg.name  = arg.array.left(pos).trimmed();
                  arg.array = arg.array.mid(pos);
               }

            }

            arg.defval = s_curArgDefValue;
            arg.docs   = s_curArgDocs.trimmed();

            s_argList.append(arg);
         }

         s_curArgAttrib.resize(0);
         s_curArgTypeName.resize(0);
         s_curArgDefValue.resize(0);
         s_curArgArray.resize(0);
         s_curArgDocs.resize(0);
         s_curTypeConstraint.resize(0);

         if (text[0] == ')') {
            BEGIN(FuncQual);

         } else {
            BEGIN( ReadFuncArgType );

         }
      }
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
      if (s_language != SrcLangExt_Java) {
         REJECT;
      }

      s_curTypeConstraint.clear();
      s_lastExtendsContext = YY_START;
      BEGIN(ReadTypeConstraint);
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      if (YY_START == ReadFuncArgType && s_curArgArray == "[]") {
         // Java style array

         s_curArgTypeName += " []";
         s_curArgArray.resize(0);
      }

      s_curArgTypeName += text;
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgTypeName += text[0];
   }
	YY_BREAK
case 39:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDefValue += text;
   }
	YY_BREAK
case 40:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDefValue += text[0];
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      *s_copyArgValue += text;
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      *s_copyArgValue += text[0];
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
{
      unput(*yytext);
      BEGIN(s_lastExtendsContext);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curTypeConstraint += text;
   }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
{
      s_curTypeConstraint += ' ';
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      s_argList.constSpecifier = true;
   }
	YY_BREAK
case 47:
YY_RULE_SETUP
{
      s_argList.volatileSpecifier = true;
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      s_argList.refSpecifier = RefType::LValueRef;
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      s_argList.refSpecifier = RefType::RValueRef;
   }
	YY_BREAK
case 51:
YY_RULE_SETUP
{
      s_argList.pureSpecifier = true;
      BEGIN(FuncQual);
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      // C++11 trailing return type
      s_argList.trailingReturnType = " -> ";
      BEGIN(TrailingReturn);
   }
	YY_BREAK
case 53:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      unput(*yytext);
      BEGIN(FuncQual);
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_argList.trailingReturnType += text;
   }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_argList.trailingReturnType += text;
   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
      // for functions returning a pointer to an array,
      // i.e. ")[]" in "int (*f(int))[4]" with argsString="(int))[4]"
      QString text = QString::fromUtf8(yytext);
      s_extraTypeChars = text;
   }
	YY_BREAK
case 57:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDocs += text;
   }
	YY_BREAK
case 58:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDocs += text;
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      if (s_lastDocChar != 0) {
         unput(s_lastDocChar);
      }
      BEGIN(s_lastDocContext);
   }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
{
      if (s_lastDocChar != 0) {
         unput(s_lastDocChar);
      }
      BEGIN(s_lastDocContext);
   }
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDocs += text[0];
   }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curArgDocs += text[0];
   }
	YY_BREAK
case 63:
YY_RULE_SETUP
{
   // */ (editor syntax fix)
   s_lastDocContext = YY_START;
   s_lastDocChar    = 0;

   if (yytext[1] == '/')  {
      BEGIN( ReadDocLine );
   } else {
      BEGIN( ReadDocBlock );
   }
}
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP

	YY_BREAK
case 65:
YY_RULE_SETUP

	YY_BREAK
case 66:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Start):
			case YY_STATE_EOF(CopyArgString):
			case YY_STATE_EOF(CopyRawString):
			case YY_STATE_EOF(CopyArgRound):
			case YY_STATE_EOF(CopyArgRound2):
			case YY_STATE_EOF(CopyArgSquare):
			case YY_STATE_EOF(CopyArgSharp):
			case YY_STATE_EOF(CopyArgCurly):
			case YY_STATE_EOF(ReadFuncArgType):
			case YY_STATE_EOF(ReadFuncArgDef):
			case YY_STATE_EOF(ReadFuncArgPtr):
			case YY_STATE_EOF(FuncQual):
			case YY_STATE_EOF(ReadDocBlock):
			case YY_STATE_EOF(ReadDocLine):
			case YY_STATE_EOF(ReadTypeConstraint):
			case YY_STATE_EOF(TrailingReturn):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 284 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 284 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 283);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == nullptr)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = nullptr;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return nullptr;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = nullptr;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = nullptr;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = nullptr;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = nullptr;
    yyout = nullptr;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = nullptr;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = nullptr;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = nullptr;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static void yyunput(QChar c, char *yy_bp)
{
   (void) yy_bp;

   QString tmp1    = c;
   QByteArray tmp2 = tmp1.toUtf8();

   for (int i = tmp2.length() -1; i >= 0; i-- ) {
      unput(tmp2[i]);
   }
}

/*! Converts an argument string into an ArgumentList.
 *  \param[in]  list of Arguments.
 *  \param[out] a reference to resulting argument list pointer.
 *  \param[out] extraTypeChars point to string to which trailing characters for complex types are written to
 */
ArgumentList stringToArgumentList(SrcLangExt lang, QString &extraTypeChars,
      const QString &argsString, const ArgumentList &argList)
{
   ArgumentList retval;
   if (argsString.isEmpty()) {
      return retval;
   }

   s_inputString   = argsString;       // passed in value
   s_inputPosition = 0;
   s_argList       = argList;          // passed in value
   s_language      = lang;             // passed in value

   s_copyArgValue  = nullptr;

   s_curArgTypeName.clear();
   s_curArgDefValue.clear();
   s_curArgName.clear();
   s_curArgDocs.clear();
   s_curArgAttrib.clear();
   s_curArgArray.clear();
   s_curTypeConstraint.clear();
   s_extraTypeChars.clear();

   s_argRoundCount = 0;
   s_argSharpCount = 0;
   s_argCurlyCount = 0;

   s_lastDocChar   = '\0';

   yyrestart( yyin );
   BEGIN( Start );
   yylex();

   extraTypeChars = s_extraTypeChars;

   retval = s_argList;
   return retval;
}

