/************************************************************************
*
* Copyright (c) 2014-2024 Barbara Geller & Ansel Sermersheim
* Copyright (c) 1997-2014 Dimitri van Heesch
*
* DoxyPress is free software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License version 2
* as published by the Free Software Foundation.
*
* DoxyPress is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*
* Documents produced by DoxyPress are derivative works derived from the
* input used in their production; they are not affected by this license.
*
*************************************************************************/

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer parse_py_YY_create_buffer
#define yy_delete_buffer parse_py_YY_delete_buffer
#define yy_scan_buffer parse_py_YY_scan_buffer
#define yy_scan_string parse_py_YY_scan_string
#define yy_scan_bytes parse_py_YY_scan_bytes
#define yy_init_buffer parse_py_YY_init_buffer
#define yy_flush_buffer parse_py_YY_flush_buffer
#define yy_load_buffer_state parse_py_YY_load_buffer_state
#define yy_switch_to_buffer parse_py_YY_switch_to_buffer
#define yypush_buffer_state parse_py_YYpush_buffer_state
#define yypop_buffer_state parse_py_YYpop_buffer_state
#define yyensure_buffer_stack parse_py_YYensure_buffer_stack
#define yy_flex_debug parse_py_YY_flex_debug
#define yyin parse_py_YYin
#define yyleng parse_py_YYleng
#define yylex parse_py_YYlex
#define yylineno parse_py_YYlineno
#define yyout parse_py_YYout
#define yyrestart parse_py_YYrestart
#define yytext parse_py_YYtext
#define yywrap parse_py_YYwrap
#define yyalloc parse_py_YYalloc
#define yyrealloc parse_py_YYrealloc
#define yyfree parse_py_YYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define parse_py_YY_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer parse_py_YY_create_buffer
#endif

#ifdef yy_delete_buffer
#define parse_py_YY_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer parse_py_YY_delete_buffer
#endif

#ifdef yy_scan_buffer
#define parse_py_YY_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer parse_py_YY_scan_buffer
#endif

#ifdef yy_scan_string
#define parse_py_YY_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string parse_py_YY_scan_string
#endif

#ifdef yy_scan_bytes
#define parse_py_YY_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes parse_py_YY_scan_bytes
#endif

#ifdef yy_init_buffer
#define parse_py_YY_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer parse_py_YY_init_buffer
#endif

#ifdef yy_flush_buffer
#define parse_py_YY_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer parse_py_YY_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define parse_py_YY_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state parse_py_YY_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define parse_py_YY_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer parse_py_YY_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define parse_py_YYpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state parse_py_YYpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define parse_py_YYpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state parse_py_YYpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define parse_py_YYensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack parse_py_YYensure_buffer_stack
#endif

#ifdef yylex
#define parse_py_YYlex_ALREADY_DEFINED
#else
#define yylex parse_py_YYlex
#endif

#ifdef yyrestart
#define parse_py_YYrestart_ALREADY_DEFINED
#else
#define yyrestart parse_py_YYrestart
#endif

#ifdef yylex_init
#define parse_py_YYlex_init_ALREADY_DEFINED
#else
#define yylex_init parse_py_YYlex_init
#endif

#ifdef yylex_init_extra
#define parse_py_YYlex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra parse_py_YYlex_init_extra
#endif

#ifdef yylex_destroy
#define parse_py_YYlex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy parse_py_YYlex_destroy
#endif

#ifdef yyget_debug
#define parse_py_YYget_debug_ALREADY_DEFINED
#else
#define yyget_debug parse_py_YYget_debug
#endif

#ifdef yyset_debug
#define parse_py_YYset_debug_ALREADY_DEFINED
#else
#define yyset_debug parse_py_YYset_debug
#endif

#ifdef yyget_extra
#define parse_py_YYget_extra_ALREADY_DEFINED
#else
#define yyget_extra parse_py_YYget_extra
#endif

#ifdef yyset_extra
#define parse_py_YYset_extra_ALREADY_DEFINED
#else
#define yyset_extra parse_py_YYset_extra
#endif

#ifdef yyget_in
#define parse_py_YYget_in_ALREADY_DEFINED
#else
#define yyget_in parse_py_YYget_in
#endif

#ifdef yyset_in
#define parse_py_YYset_in_ALREADY_DEFINED
#else
#define yyset_in parse_py_YYset_in
#endif

#ifdef yyget_out
#define parse_py_YYget_out_ALREADY_DEFINED
#else
#define yyget_out parse_py_YYget_out
#endif

#ifdef yyset_out
#define parse_py_YYset_out_ALREADY_DEFINED
#else
#define yyset_out parse_py_YYset_out
#endif

#ifdef yyget_leng
#define parse_py_YYget_leng_ALREADY_DEFINED
#else
#define yyget_leng parse_py_YYget_leng
#endif

#ifdef yyget_text
#define parse_py_YYget_text_ALREADY_DEFINED
#else
#define yyget_text parse_py_YYget_text
#endif

#ifdef yyget_lineno
#define parse_py_YYget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno parse_py_YYget_lineno
#endif

#ifdef yyset_lineno
#define parse_py_YYset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno parse_py_YYset_lineno
#endif

#ifdef yywrap
#define parse_py_YYwrap_ALREADY_DEFINED
#else
#define yywrap parse_py_YYwrap
#endif

#ifdef yyalloc
#define parse_py_YYalloc_ALREADY_DEFINED
#else
#define yyalloc parse_py_YYalloc
#endif

#ifdef yyrealloc
#define parse_py_YYrealloc_ALREADY_DEFINED
#else
#define yyrealloc parse_py_YYrealloc
#endif

#ifdef yyfree
#define parse_py_YYfree_ALREADY_DEFINED
#else
#define yyfree parse_py_YYfree
#endif

#ifdef yytext
#define parse_py_YYtext_ALREADY_DEFINED
#else
#define yytext parse_py_YYtext
#endif

#ifdef yyleng
#define parse_py_YYleng_ALREADY_DEFINED
#else
#define yyleng parse_py_YYleng
#endif

#ifdef yyin
#define parse_py_YYin_ALREADY_DEFINED
#else
#define yyin parse_py_YYin
#endif

#ifdef yyout
#define parse_py_YYout_ALREADY_DEFINED
#else
#define yyout parse_py_YYout
#endif

#ifdef yy_flex_debug
#define parse_py_YY_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug parse_py_YY_flex_debug
#endif

#ifdef yylineno
#define parse_py_YYlineno_ALREADY_DEFINED
#else
#define yylineno parse_py_YYlineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 262144
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = nullptr; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or nullptr.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : nullptr)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * nullptr or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = nullptr;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define parse_py_YYwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = nullptr, *yyout = nullptr;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 203
#define YY_END_OF_BUFFER 204
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[1132] =
    {   0,
    16528,16528,  146,  146,   30,   30,   36,   36,   41,   41,
      204,  202,  203,  201,  203,   25,  202,  203,   25,  202,
      203,   19,  201,  203,   13,   25,  202,  203,   25,  202,
      203,   12,   25,  202,  203,   23,   25,  202,  203,   24,
       25,  202,  203,   25,  202,  203,   17,   25,  202,  203,
    16395,   17,   25,  202,  203,16395,   17,   25,  202,  203,
    16395,   17,   25,  202,  203,16395,   17,   25,  202,  203,
    16395,   17,   25,  202,  203,16395,   17,   25,  202,  203,
    16395,   17,   25,  202,  203,16395,   18,   25,  202,  203,
       17,   25,  202,  203,16393,16394,16395,   17,   25,  202,

      203,16393,16394,16395,   17,   25,  202,  203,16393,16394,
    16395,   17,   25,  202,  203,16393,16394,16395,   17,   25,
      202,  203,16393,16394,16395,   17,   25,  202,  203,16393,
    16394,16395,   17,   25,  202,  203,16393,16394,16395,   17,
       25,  202,  203,16393,16394,16395,   53,   54,  202,  203,
       51,  201,  203,   50,   54,  202,  203,   54,  202,  203,
       49,   54,  202,  203,   54,  202,  203,   52,   54,  202,
      203,   52,   54,  202,  203,   52,   54,  202,  203,   52,
       54,  202,  203,   52,   54,  202,  203,   52,   54,  202,
      203,   52,   53,   54,  202,  203,  175,  178,  202,  203,

      178,  202,  203,  176,  201,  203,  178,  202,  203,  178,
      202,  203,  178,  202,  203,  174,  178,  202,  203,  181,
      183,  202,  203,  182,  201,  203,  183,  202,  203,  181,
      183,  202,  203,  179,  183,  202,  203,  202,  203,   72,
      202,  203,   73,  202,  203,  202,  203,   70,  202,  203,
       69,  202,  203,   81,  202,  203,   74,  202,  203,   81,
      202,  203,   78,  202,  203,   75,   81,  202,  203,   74,
       81,  202,  203,   79,  202,  203,   77,   81,  202,  203,
       76,   81,  202,  203,   61,   65,  202,  203,   65,  202,
      203,   64,  201,  203,16439,   60,   65,  202,  203,   63,

       65,  202,  203,   59,   65,  202,  203,   61,   65,  202,
      203,   61,   65,  202,  203,   61,   65,  202,  203,   58,
       65,  202,  203,   63,   65,  202,  203,  104,  202,  203,
      103,  201,  203,  102,  104,  202,  203,  101,  104,  202,
      203,   95,  104,  202,  203,   98,  104,  202,  203,  100,
      104,  202,  203,   99,  104,  202,  203,   94,  104,  202,
      203,   97,  104,  202,  203,   93,  104,  202,  203,   96,
      104,  202,  203,   92,  202,  203,   91,  201,  203,   90,
       92,  202,  203,   89,   92,  202,  203,   84,   92,  202,
      203,   87,   92,  202,  203,   88,   92,  202,  203,   83,

       92,  202,  203,   86,   92,  202,  203,   82,   92,  202,
      203,   85,   92,  202,  203,  115,  202,  203,  114,  201,
      203,  113,  115,  202,  203,  112,  115,  202,  203,  107,
      115,  202,  203,  110,  115,  202,  203,  111,  115,  202,
      203,  106,  115,  202,  203,  109,  115,  202,  203,  105,
      115,  202,  203,  108,  115,  202,  203,  128,  202,  203,
      129,  202,  203,  133,  202,  203,  132,  202,  203,  129,
      202,  203,  130,  202,  203,  131,  202,  203,  202,  203,
      138,  201,  203, 8336,  202,  203,  202,  203, 8336,  202,
      203,  202,  203, 8336,  202,  203, 8336,  202,  203, 8336,

      202,  203,  143,  202,  203,  122,  125,  202,  203,  125,
      202,  203,  123,  201,  203,  121,  125,  202,  203,  125,
      202,  203,  120,  125,  202,  203,  122,  125,  202,  203,
      122,  125,  202,  203,  122,  125,  202,  203,  119,  125,
      202,  203,  159,  202,  203,  146,  159,  202,  203,  160,
      201,  203,  151,  159,  202,  203,  157,  159,  202,  203,
      150,  159,  202,  203,  154,  159,  202,  203,  147,  159,
      202,  203,  147,  159,  202,  203,  145,  159,  202,  203,
      158,  159,  202,  203,  158,  159,  202,  203,  158,  159,
      202,  203,  158,  159,  202,  203,  158,  159,  202,  203,

      155,  159,  202,  203,  158,  159,  202,  203,  156,  159,
      202,  203,  171,  202,  203,  170,  201,  203,  168,  202,
      203,  169,  201,  203,  166,  168,  202,  203,  165,  168,
      202,  203,  161,  168,  202,  203,  162,  168,  202,  203,
      167,  168,  202,  203,  167,  168,  202,  203,  167,  168,
      202,  203,  167,  168,  202,  203,  188,  189,  202,  203,
      189,  202,  203,  187,  189,  202,  203,  189,  202,  203,
      194,  195,  202,  203,  193,  195,  202,  203,  195,  202,
      203,  195,  202,  203,  198,  200,  202,  203,  198,  199,
      201,  203,  198,  200,  202,  203,  198,  200,  202,  203,

      200,  202,  203,  135,  202,  203,  134,  135,  202,  203,
      137,  202,  203,  136,  137,  202,  203,   31,  202,  203,
       30,   31,  202,  203,   29,  201,  203,   26,   31,  202,
      203,   27,   31,  202,  203,   27,   31,  202,  203,   38,
      202,  203,   36,   38,  202,  203,   35,  201,  203,   32,
       38,  202,  203,   37,   38,  202,  203,   34,   38,  202,
      203,16417,   42,  202,  203,   41,   42,  202,  203,   40,
      201,  203,   39,   42,  202,  203,16395,   19,   16,   15,
       16,   17,16395,   17,16395,   17,16395,   17,16395,   17,
    16395,   17,16395,   18,16393,16394,16395,16393,16394,16395,

    16393,16394,16395,16393,16394,16395,16393,16394,16395,   17,
    16393,16394,16395,   17,16393,16394,16395,   17,16393,16394,
    16395,   17,16393,16394,16395,   17,16393,16394,16395,   17,
    16393,16394,16395,   53,   48,   52,   52,   52,   52,   52,
       53,  175,  177,  174,  181,  180,  181,  179,  179,   72,
       70,   71,   70,   69,   74,   80,   75,   79,   76,   61,
    16439,   63,   63,   61,   58,   57,   62,   63,  128,  129,
      131,  138,  142,  141,  143,  122,  124,  122,  119,  118,
      146,  157,  147,  147,  147,  158,  158,  151,  150,  158,
      158,  167,  167,  188,  185,  185,  184,  194,  191,  191,

      190,  198,  198,  198,   30,   27,   27,   36, 8225,   34,
    16417,   41,   39,16395,   20,   16,   15,   16,   22,   21,
     8203,   17,16395,   17,16395,   17,16395,   17,16395,16393,
    16394,16395,16393,16394,16395,16393,16394,16395,16393,16394,
    16395,16393,16394,16395, 8202, 8203, 8202, 8203, 8202, 8203,
       17,16393,16394,16395,   17,16393,16394,16395,   17,16393,
    16394,16395,   17,16393,16394,16395,   45,   48,   47,   46,
       52,   52,  172,  173,   80,   56, 8247, 8247,   66,   63,
       68,   68,   67,   62,   63,  131,  139,  142,  141,  140,
      116,  126,  124,  127,  152,  153,  148,  147,  147,  158,

      158,  163,  164,  186,  192,  196,  197,   27,   27, 8225,
       39,   20,   21,   17,16395,    2,   17,16395,   17,16395,
    16393,16394,16395,16393,16394,16395,16393,16394,16395,16393,
    16394,16395,   17,16393,16394,16395,    1,    2,   17,16393,
    16394,16395,   17,16393,16394,16395,   45,   46,   52,   66,
       67,  131,  139,  140,  117,  126,  127,  152,  153,  148,
      147,  158,  149,  158,  163,  164,   27,   27,   39,   17,
    16395,    6,   17,16395,16393,16394,16395,    1,16393,16394,
    16395,16393,16394,16395,   17,16393,16394,16395,    5,    6,
       17,16393,16394,16395,16428,  148,   27,    4,   17,16395,

    16393,16394,16395,    5,16393,16394,16395,    3,    4,   17,
    16393,16394,16395,16428, 8236,16427,   27,   28,    8,    3,
    16393,16394,16395,    7,    8,16427, 8235,   28,    7, 8201,
       14
    } ;

static const flex_int16_t yy_accept[586] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    6,    7,    8,
        9,   10,   11,   12,   14,   16,   19,   22,   25,   29,
       32,   36,   40,   44,   47,   52,   57,   62,   67,   72,
       77,   82,   87,   91,   98,  105,  112,  119,  126,  133,
      140,  147,  151,  154,  158,  161,  165,  168,  172,  176,
      180,  184,  188,  192,  197,  201,  204,  207,  210,  213,

      216,  220,  224,  227,  230,  234,  238,  240,  243,  246,
      248,  251,  254,  257,  260,  263,  266,  270,  274,  277,
      281,  285,  289,  292,  296,  300,  304,  308,  312,  316,
      320,  324,  328,  331,  334,  338,  342,  346,  350,  354,
      358,  362,  366,  370,  374,  377,  380,  384,  388,  392,
      396,  400,  404,  408,  412,  416,  419,  422,  426,  430,
      434,  438,  442,  446,  450,  454,  458,  461,  464,  467,
      470,  473,  476,  479,  481,  484,  487,  489,  492,  494,
      497,  500,  503,  506,  510,  513,  516,  520,  523,  527,
      531,  535,  539,  543,  546,  550,  553,  557,  561,  565,

      569,  573,  577,  581,  585,  589,  593,  597,  601,  605,
      609,  613,  616,  619,  622,  625,  629,  633,  637,  641,
      645,  649,  653,  657,  661,  664,  668,  671,  675,  679,
      682,  685,  689,  693,  697,  701,  704,  707,  711,  714,
      718,  721,  725,  728,  732,  736,  740,  743,  747,  750,
      754,  758,  763,  766,  770,  773,  777,  777,  778,  779,
      779,  780,  782,  782,  782,  782,  782,  782,  782,  784,
      784,  784,  784,  786,  788,  790,  792,  794,  795,  798,
      801,  804,  807,  810,  810,  814,  814,  818,  822,  826,
      830,  834,  835,  835,  836,  836,  836,  837,  837,  837,

      838,  839,  840,  842,  843,  843,  843,  844,  845,  846,
      846,  847,  848,  849,  850,  850,  851,  852,  853,  854,
      855,  856,  857,  858,  859,  860,  861,  862,  862,  862,
      862,  863,  864,  864,  864,  864,  865,  866,  867,  869,
      870,  871,  871,  872,  872,  873,  873,  874,  875,  875,
      875,  875,  875,  876,  877,  877,  877,  877,  878,  878,
      878,  878,  879,  880,  881,  882,  882,  883,  883,  883,
      884,  885,  886,  886,  887,  888,  889,  890,  891,  892,
      892,  892,  893,  893,  893,  894,  895,  895,  896,  897,
      898,  899,  899,  900,  901,  902,  903,  903,  904,  905,

      906,  906,  906,  907,  908,  909,  909,  910,  912,  913,
      913,  913,  914,  915,  916,  917,  919,  920,  921,  921,
      921,  921,  921,  922,  924,  926,  928,  930,  933,  936,
      939,  942,  945,  947,  949,  951,  955,  959,  963,  967,
      968,  969,  970,  971,  972,  973,  974,  975,  976,  977,
      978,  979,  979,  980,  982,  983,  984,  986,  987,  988,
      989,  990,  991,  991,  992,  992,  993,  994,  995,  996,
      997,  998,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1005,
     1006, 1006, 1007, 1008, 1008, 1009, 1010, 1011, 1011, 1012,
     1013, 1014, 1014, 1014, 1016, 1017, 1019, 1021, 1024, 1027,

     1030, 1033, 1033, 1033, 1033, 1037, 1039, 1043, 1047, 1048,
     1049, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
     1058, 1059, 1060, 1060, 1061, 1062, 1063, 1065, 1066, 1067,
     1068, 1069, 1070, 1070, 1072, 1073, 1075, 1078, 1079, 1082,
     1085, 1085, 1089, 1091, 1095, 1096, 1096, 1096, 1097, 1098,
     1098, 1099, 1101, 1104, 1105, 1108, 1108, 1110, 1114, 1114,
     1115, 1116, 1117, 1119, 1119, 1120, 1121, 1124, 1124, 1126,
     1126, 1127, 1128, 1129, 1129, 1130, 1130, 1130, 1130, 1130,
     1131, 1131, 1131, 1132, 1132
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    7,    8,    9,
       10,   11,   12,   13,   14,   15,    7,   16,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   19,    7,    7,
       20,   21,    1,   22,   23,   23,   23,   24,   25,   26,
       27,   28,   27,   29,   28,   30,   28,   28,   28,   28,
       28,   31,   28,   32,   33,   28,   28,   34,   28,   28,
       35,   36,   37,    1,   38,    7,   39,   23,   40,   41,

       42,   43,   28,   44,   45,   29,   28,   46,   47,   28,
       48,   49,   28,   50,   51,   52,   53,   28,   28,   34,
       54,   28,   55,    7,   56,    7,    1,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57
    } ;

static const YY_CHAR yy_meta[58] =
    {   0,
        1,    2,    3,    1,    4,    5,    1,    4,    1,    6,
        1,    1,    7,    1,    8,    9,    9,    9,    1,   10,
        1,    1,   11,   11,   11,   11,   12,   12,   12,   12,
       12,   12,   12,   12,    1,   13,    1,   12,   11,   11,
       11,   11,   11,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,    1,    1,   14
    } ;

static const flex_int16_t yy_base[699] =
    {   0,
     1997, 1994,    0,   57,  114,    0,  170,  174,  177,  182,
      210,    0,  267,    0,  323,  375,  426,  480,  534,  588,
      642,  696,  752,    0,  809,    0,  866,  919,  971, 1023,
     1076,    0, 1993, 1992, 1133,    0,  327,  331,  338,  339,
      350,  356,  178,  184,  186,  190, 1190,    0, 1247,    0,
     1304,    0, 1982, 3149, 3149, 3149, 1976, 1972, 1969,  190,
     1965, 3149, 3149, 1921,  188,  383,  392,  369,  407,  364,
      393,    0,  325,  428,  442,  464,  455,  484,  414,  471,
        0,    0, 3149, 1966, 1964, 1961, 3149,    0,  192,  491,
     1922, 1713,  498, 1361,    0, 3149, 3149, 1749, 1745,    0,

     1750,    0,  197, 3149,  203, 1745,  331, 3149, 3149, 1728,
     1746,    0, 3149, 1745,    0, 3149, 1731, 3149, 1739, 3149,
        0,    0, 3149,  343, 1728, 1725, 1713,  199,  500,  502,
      349, 1710, 3149, 3149, 3149, 3149, 3149, 3149, 3149, 3149,
     3149, 3149, 3149, 3149, 3149, 3149, 3149, 3149, 3149, 3149,
     3149, 3149, 3149, 3149, 3149, 3149, 3149, 3149, 3149, 3149,
     3149, 3149, 3149, 3149, 3149, 3149,    0, 1703, 3149, 3149,
     3149, 3149, 1678,  408, 3149, 3149, 1684, 1682, 1679,  352,
      515,  520,  430,    0, 3149, 1672, 1671,    0, 1667,  379,
      549,  550,  451, 3149, 1666, 3149, 1662,    0, 1658, 3149,

      558,  600, 3149,    0, 1625,  399, 1609,  551, 3149,  555,
     3149, 3149, 3149, 3149, 3149, 1652, 1646, 3149, 3149,    0,
      408,  603,  604,    0, 1647, 3149,  456,    0, 3149, 1641,
      468, 1612, 1607, 1632, 1626,  508, 3149, 3149, 3149, 3149,
     3149, 1630, 3149, 3149,  458,  465, 3149, 1612, 3149, 3149,
     3149,  335, 3149, 1608, 3149,  476, 1604,  593, 1595, 1592,
        0,    0,    0, 1587, 1537,  618,  612, 1586,  646,    0,
     1581, 1577,  655,  668,  670,  672,  674,  671,  708,  871,
      873,  885,  890,  717,  722,  449,  926,  894,  938,  943,
      947,    0, 1573,    0,    0, 1567,    0, 1565, 1557,  413,

     1509, 1511, 1418,    0, 1547, 1537, 3149, 1538,    0,  528,
     3149,  543, 1531, 1528,  559, 3149, 1531, 3149, 1470,    0,
     1469,    0, 1459, 1467,    0,    0,  560, 1459, 1475, 1459,
        0,  521, 1455, 1457, 1443,  559,  581, 3149,    0,    0,
     1445,    0, 1431,  624, 3149, 1440,    0, 1438, 1435, 1419,
     1406,  616,  634,    0, 1406, 1408, 1403,    0, 1399, 1400,
     1392,  634,  638, 3149, 1390, 1385,    0, 1381,  722,  968,
      977, 3149,    0,    0, 1342, 1381, 1377, 1316,  653, 1362,
     1358,    0, 1359, 1067,  659,    0, 1069, 3149,  693, 3149,
        0, 1064, 3149,  700, 3149, 1034,  738, 1064, 1059, 1063,

      517, 1044,  570,  874, 1035,  424, 1034,  687, 1030,  647,
     1018,  732,  998, 1011,    0,    0, 3149, 1006,  966,  706,
      978,  999, 3149, 1020, 1025, 1374, 1393, 1037, 1413, 1528,
     1529, 1533, 3149,  545,  921, 1391, 1039, 1534, 1548,  966,
        0, 3149,  962,  946,  159, 3149, 3149,    0, 3149, 3149,
        0,    0,  955,    0, 3149,  950,    0,  932,  934,    0,
      912,  907,    0,  907,  904,  898,    0,  897,  878,  876,
     1026, 3149,  699,  828,  828,  746,  740, 3149,  746, 3149,
      875, 3149, 3149,  734,  911,  927,  723,  720,  928, 3149,
     3149,  665, 1389, 1549, 1446, 1447, 1553, 1554, 1448, 1570,

     1574,  883,  665,  645, 1589, 1591, 1605, 1606, 3149, 3149,
        0,  676, 3149, 3149,  671, 3149, 3149, 3149, 3149, 3149,
     3149, 3149, 1046, 3149, 3149,  629,    0, 3149, 3149,  953,
      963,  988,  624, 1610, 1611, 1625, 1631, 1626, 1640, 1645,
      584, 1659, 1660, 1661,  888,    0,  971, 1667, 1577,  579,
     1684, 1688, 1689, 1690, 1704,  568, 1705, 1709,  892,  942,
     3149,  962, 1046,  555, 1710, 1724, 1725,  529, 1726,  997,
     1014, 3149, 1051,  535, 1730,  457,  440,  433,  412, 3149,
      351,  321, 3149, 3149, 1756, 1770, 1784, 1798, 1812, 1826,
     1840, 1854, 1868, 1882, 1896, 1910, 1924, 1938, 1952, 1965,

     1979, 1992, 2005, 2018, 2032, 2046, 2052, 2066, 2080, 2094,
     2100, 2114, 2120, 2134, 2147, 2161, 2175, 2181, 2188, 2202,
     2216, 2226, 2240, 2254, 2260, 2266, 2280, 2294, 2308, 2322,
     2336, 2349, 2362, 2375, 2388, 2401, 2415, 2429, 2443, 2456,
     2469, 2483, 2496, 2509, 2522, 2536, 2550, 2564, 2578, 2584,
     2598, 2612, 2618, 2632, 2638, 2652, 2665, 2679, 2693, 2707,
     2713, 2717, 2724, 2738, 2752, 2765, 2779, 2793,  529, 2799,
     2805, 2819, 2833, 2847, 2860, 2873, 2886, 2899, 2912, 2925,
     2939, 2953, 2966, 2979, 2992, 3005, 3018, 3032, 3039, 3053,
     3060, 3074, 3087, 3100, 3104, 3117, 3121, 3134

    } ;

static const flex_int16_t yy_def[699] =
    {   0,
      585,  585,  584,  584,  584,    5,  586,  586,  587,  587,
      584,   11,  584,   13,  588,  588,  589,  589,  590,  590,
      591,  591,  584,   23,  584,   25,  592,  592,  593,  593,
      584,   31,  594,  594,  584,   35,  595,  595,  596,  596,
      597,  597,  598,  598,  599,  599,  584,   47,  584,   49,
      584,   51,  584,  584,  584,  584,  600,  584,  584,  601,
      584,  584,  584,  584,  602,  602,  602,  602,  602,   67,
       67,   67,  603,  604,  604,  604,  604,  604,   76,   76,
       76,  605,  584,  584,  606,  584,  584,  607,  607,  607,
      607,  607,  607,  607,  608,  584,  584,  584,  584,  609,

      584,  610,  584,  584,  610,  584,  584,  584,  584,  584,
      584,  611,  584,  584,  612,  584,  584,  584,  584,  584,
      613,  614,  584,  615,  584,  616,  584,  614,  614,  614,
      584,  617,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  618,  584,  584,  584,
      584,  584,  619,  584,  584,  584,  584,  620,  584,  584,
      584,  584,  584,  621,  584,  622,  584,  623,  584,  621,
      621,  621,  584,  584,  584,  584,  584,  624,  584,  584,

      584,  584,  584,  625,  625,  625,  625,  625,  584,  625,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  626,
      626,  626,  626,  627,  584,  584,  628,  629,  584,  584,
      630,  631,  631,  584,  584,  631,  584,  584,  584,  584,
      584,  584,  584,  584,  632,  632,  584,  584,  584,  584,
      584,  633,  584,  584,  584,  634,  635,  636,  584,  584,
      637,  638,  639,  584,  584,  584,  584,  640,  641,  642,
      584,  584,  641,  641,  641,  641,  641,  643,  644,  644,
      644,  644,  644,  584,  645,  646,  645,  645,  645,  645,
      645,  647,  584,  648,  649,  584,  650,  584,  584,  650,

      650,  650,  650,  651,  584,  584,  584,  584,  652,  584,
      584,  652,  584,  584,  584,  584,  584,  584,  584,  653,
      584,  654,  584,  584,  655,  656,  657,  584,  584,  584,
      658,  659,  584,  584,  584,  656,  584,  584,  660,  661,
      584,  662,  663,  584,  584,  584,  664,  584,  584,  584,
      584,  584,  584,  665,  584,  666,  584,  667,  584,  584,
      584,  665,  584,  584,  584,  584,  668,  584,  584,  584,
      584,  584,  669,  670,  670,  584,  584,  670,  670,  584,
      584,  671,  584,  584,  671,  672,  584,  584,  584,  584,
      673,  584,  584,  584,  584,  674,  674,  584,  584,  584,

      584,  675,  676,  676,  584,  584,  584,  677,  584,  584,
      678,  679,  680,  584,  681,  682,  584,  584,  584,  584,
      683,  684,  584,  685,  685,  685,  685,  686,  686,  686,
      686,  686,  584,  584,  584,  687,  687,  687,  687,  584,
      688,  584,  584,  689,  689,  584,  584,  690,  584,  584,
      329,  329,  584,  658,  584,  584,  660,  691,  584,  664,
      584,  584,  692,  584,  666,  584,  667,  584,  584,  584,
      584,  584,  669,  670,  670,  584,  584,  584,  584,  584,
      584,  584,  584,  675,  693,  676,  584,  678,  694,  584,
      584,  584,  684,  685,  584,  685,  685,  686,  686,  686,

      686,  584,  584,  584,  687,  584,  687,  687,  584,  584,
      695,  689,  584,  584,  691,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  670,  670,  584,  584,  693,
      676,  694,  584,  685,  584,  685,  686,  584,  686,  686,
      584,  687,  584,  687,  696,  697,  584,  584,  676,  584,
      584,  685,  686,  584,  686,  584,  584,  687,  584,  696,
      584,  698,  676,  584,  584,  584,  686,  584,  584,  584,
      698,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,    0,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,

      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584

    } ;

static const flex_int16_t yy_nxt[3207] =
    {   0,
       56,   57,   58,   56,   59,   60,   56,   61,   62,   63,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   64,   65,   65,   65,   65,   65,   65,   65,   65,
       66,   65,   67,   65,   56,   56,   56,   65,   65,   68,
       69,   65,   70,   65,   71,   65,   65,   65,   65,   66,
       65,   65,   72,   65,   56,   56,   65,   56,   73,   58,
       56,   59,   60,   56,   61,   62,   63,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   64,   74,
       74,   74,   74,   74,   74,   74,   74,   75,   74,   76,
       74,   56,   56,   56,   74,   74,   77,   78,   74,   79,

       74,   80,   74,   74,   74,   74,   75,   74,   74,   81,
       74,   56,   56,   74,   82,   82,   83,   82,   84,   85,
       82,   86,   82,   82,   82,   82,   82,   82,   87,   82,
       82,   82,   82,   82,   82,   82,   88,   88,   88,   88,
       88,   88,   88,   88,   89,   88,   90,   88,   82,   82,
       82,   88,   88,   91,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   89,   92,   88,   93,   88,   82,   82,
       94,   96,   97,  584,   98,  101,   97,   99,   98,  103,
       55,   99,  104,  105,  103,  238,   55,  106,   55,  266,
      240,  238,   55,  262,  240,  263,  298,  267,  310,  299,

      268,  512,  311,  334,  312,  100,  335,  270,  313,  100,
       54,  107,   55,   54,   54,   54,   54,   54,  108,  109,
       54,   54,   54,  110,   54,   54,   54,   54,  111,   54,
       54,   54,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,   54,   54,   54,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,   54,   54,  112,  113,  114,   55,
      113,  113,  115,  113,  113,   54,  116,  117,  113,  118,
      113,  113,  113,  113,  113,  119,  120,  113,  113,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,

      121,  113,  113,  113,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  113,  113,  121,  123,  124,  278,  125,  126,   55,
      127,  225,  315,   55,  226,  225,  406,  123,  226,  316,
       55,   55,  229,  229,  327,  230,  230,  407,  328,  317,
      337,  338,  233,  128,  234,  129,  350,  235,  233,  351,
      234,  583,  227,  235,  280,  281,  227,  282,  584,  283,
      266,  584,  128,  231,  231,  130,  131,  124,  267,  125,
      132,  268,  127,  360,  266,  236,  361,  271,  270,  123,
      272,  236,  267,  266,  269,  268,  271,  584,  582,  272,

      584,  267,  270,  376,  268,  128,  377,  129,  266,  344,
      345,  270,  383,  276,  274,  384,  267,  298,  584,  268,
      299,  584,  273,  269,  128,  406,  270,  130,  134,  284,
      135,  353,  345,  136,  137,  138,  407,  267,  139,  277,
      268,  273,  269,  284,  285,  140,  271,  286,  275,  272,
      434,  267,  363,  364,  268,  581,  284,  389,  390,  401,
      141,  286,  142,  290,  267,  284,  401,  268,  271,  394,
      395,  272,  402,  267,  286,  584,  268,  410,  584,  402,
      143,  144,  134,  286,  135,  284,  580,  136,  137,  138,
      411,  579,  139,  267,  287,  298,  268,  435,  299,  140,

      288,  285,  298,  286,  334,  299,  334,  335,  578,  335,
      584,  404,  396,  287,  141,  396,  142,  291,  401,  350,
      285,  300,  351,  455,  350,  289,  331,  351,  300,  310,
      336,  402,  336,  311,  143,  144,  146,  473,  147,  473,
      300,  148,  149,  150,  312,  352,  502,  300,  313,  336,
      352,  336,  151,  360,  360,  376,  361,  361,  377,  376,
      315,  327,  377,  334,  352,  328,  335,  316,  152,  352,
      153,  401,  369,  370,  370,  371,  577,  317,  576,  362,
      362,  379,  337,  338,  402,  379,  372,  372,  154,  155,
      146,  373,  147,  503,  266,  148,  149,  150,  362,  362,

      379,  574,  267,  372,  379,  268,  151,  383,  383,  568,
      384,  384,  270,  420,  369,  371,  371,  371,  564,  266,
      350,  267,  152,  351,  153,  344,  345,  267,  372,  372,
      268,  270,  556,  385,  385,  353,  345,  270,  360,  363,
      364,  361,  154,  155,  157,  372,  158,  266,  410,  159,
      160,  161,  385,  385,  162,  267,  266,  376,  268,  271,
      377,  411,  272,  383,  267,  270,  384,  268,  550,  266,
      527,  266,  278,  266,  270,  266,  163,  267,  164,  267,
      268,  267,  268,  267,  268,  342,  268,  270,  406,  270,
      546,  270,  541,  270,  479,  390,  165,  166,  157,  407,

      158,  481,  395,  159,  160,  161,  424,  420,  162,  284,
      280,  281,  425,  282,  504,  283,  533,  267,  284,  426,
      268,  488,  427,  284,  487,  270,  267,  286,  525,  268,
      163,  267,  164,  410,  268,  484,  286,  471,  471,  471,
      584,  286,  396,  529,  525,  396,  411,  479,  390,  528,
      165,  166,   54,   54,   55,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,   54,   54,   54,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  167,  167,   54,   54,  167,   54,
      168,   55,   54,  169,   54,   54,  170,  171,  171,   54,
       54,  171,   54,   54,   54,   54,   54,  172,   54,   54,
       54,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,   54,   54,   54,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,   54,   54,  173,   54,  174,  175,  527,
      177,  178,  284,  179,  284,  401,  481,  395,  526,  522,
      267,  521,  267,  268,  502,  268,  284,   54,  402,  559,
      286,  284,  286,  559,  267,  284,  180,  268,  181,  267,

      520,  519,  268,  267,  286,  464,  268,  561,  464,  286,
      517,  561,  401,  286,  430,  180,  429,  461,  182,   54,
      183,  175,  486,  177,  178,  402,  179,  284,  401,  410,
      271,  503,  436,  272,  431,  267,  432,  516,  268,  284,
       54,  402,  411,  559,  284,  286,  342,  267,  284,  180,
      268,  181,  267,  514,  401,  268,  267,  286,  513,  268,
      511,  561,  286,  570,  401,  510,  286,  402,  180,  509,
      504,  182,  185,  186,  531,  187,  188,  402,  189,  421,
      437,  572,  369,  370,  370,  371,  548,  548,  548,  410,
      438,  369,  371,  371,  371,  439,  372,  472,  570,  266,

      266,  190,  411,  191,  492,  372,  372,  267,  267,  491,
      268,  268,  549,  472,  490,  570,  572,  270,  270,  488,
      190,  266,  372,  192,  193,  186,  495,  187,  188,  267,
      189,  409,  268,  572,  267,  487,  405,  268,  284,  270,
      506,  471,  471,  471,  270,  484,  267,  573,  267,  268,
      523,  268,  573,  190,  524,  191,  286,  547,  286,  547,
      402,  548,  548,  548,  400,  402,  483,  523,  482,  397,
      494,  480,  190,  478,  381,  192,  194,  195,  196,  194,
      197,  198,  194,  199,  200,  194,  194,  194,  194,  194,
      194,  201,  202,  202,  194,  203,  194,  194,  204,  204,

      204,  205,  204,  204,  204,  204,  206,  207,  208,  204,
      209,  194,  194,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  206,  204,  204,  210,  204,
      211,  194,  204,  214,  214,  215,  214,  216,  214,  214,
      217,  218,  219,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  220,  220,  220,  220,  220,
      220,  220,  220,  221,  220,  222,  220,  218,  214,  219,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  221,  220,  220,  223,  220,  218,  219,  220,
      241,  242,  243,  241,  241,  241,  241,  241,  241,  241,

      241,  241,  241,  241,  244,  241,  241,  241,  241,  241,
      241,  241,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  241,  241,  241,  245,  245,  245,
      245,  245,  245,  245,  246,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  241,  241,  245,  247,  248,  249,
      247,  247,  247,  247,  247,  247,  247,  250,  247,  251,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  247,  247,  247,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,

      252,  247,  247,  252,  253,  254,  255,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  253,  253,
      253,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  253,  253,
      256,  292,  292,  380,  292,  477,  476,  292,  475,  292,
      292,  292,  292,  292,  292,  266,  303,  303,  303,  292,
      292,  292,  292,  267,  368,  366,  268,  474,  470,  469,
      266,  365,  284,  270,  266,  292,  292,  292,  267,  359,

      267,  268,  267,  268,  357,  268,  468,  466,  270,  464,
      286,  463,  270,  349,  284,  292,  292,  303,  292,  292,
      496,  292,  267,  346,  292,  268,  292,  292,  292,  292,
      292,  292,  286,  303,  303,  303,  292,  292,  292,  292,
      497,  505,  462,  461,  459,  342,  341,  495,  535,  538,
      333,  498,  292,  292,  292,  267,  267,  267,  268,  268,
      268,  330,  456,  453,  449,  270,  270,  286,  324,  323,
      321,  319,  292,  292,  303,  450,  450,  450,  450,  450,
      450,  450,  450,  450,  450,  450,  450,  450,  450,  450,
      451,  451,  451,  450,  450,  450,  450,  451,  452,  452,

      451,  452,  451,  451,  452,  452,  452,  451,  451,  450,
      450,  450,  452,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  284,
      284,  451,  319,  314,  284,  284,  314,  267,  267,  308,
      268,  268,  267,  267,  447,  268,  268,  286,  286,  284,
      266,  446,  286,  286,  266,  284,  445,  267,  267,  444,
      268,  268,  267,  267,  296,  268,  268,  286,  270,  293,
      499,  284,  270,  286,  443,  284,  500,  440,  401,  267,
      507,  501,  268,  267,  264,  260,  268,  421,  419,  286,
      284,  402,  506,  286,  418,  508,  414,  259,  267,  534,

      267,  268,  536,  268,  537,  257,  543,  284,  286,  409,
      286,  551,  535,  405,  267,  267,  539,  268,  268,  267,
      267,  540,  268,  268,  286,  286,  266,  538,  563,  270,
      270,  400,  284,  399,  267,  267,  398,  268,  268,  542,
      267,  554,  397,  268,  270,  286,  284,  397,  392,  267,
      286,  387,  268,  381,  267,  544,  380,  268,  378,  286,
      557,  543,  284,  375,  286,  368,  366,  365,  267,  267,
      267,  268,  268,  268,  359,  357,  552,  355,  286,  286,
      286,  553,  548,  548,  548,  551,  349,  348,  346,  565,
      566,  554,  342,  267,  555,  524,  268,  267,  267,  267,

      268,  268,  268,  270,  341,  284,  557,  270,  286,  286,
      569,  565,  558,  267,  267,  332,  268,  268,  267,  267,
      333,  268,  268,  286,  286,  566,  575,  569,  286,  270,
      332,  575,  330,  267,  267,  267,  268,  268,  268,  267,
      324,  323,  268,  286,  286,  286,  321,  319,  318,  286,
      314,  308,  306,  305,  302,  567,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  122,  122,

      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  133,  133,  133,  133,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  224,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  258,  301,  296,  295,
      293,  265,  264,  260,  259,  258,  258,  257,  258,  261,
      261,  584,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  269,  213,  213,   55,  269,  269,   55,

      269,  269,  269,  269,  584,  269,  279,  584,  584,  584,
      584,  584,  584,  584,  584,  279,  279,  584,  279,  285,
      584,  584,  584,  285,  285,  584,  285,  285,  285,  285,
      584,  285,  292,  292,  584,  584,  584,  292,  292,  584,
      292,  292,  584,  584,  292,  292,  294,  294,  584,  294,
      294,  294,  294,  294,  294,  294,  294,  294,  294,  294,
      297,  584,  297,  297,  584,  297,  304,  584,  584,  584,
      304,  304,  304,  304,  304,  304,  304,  304,  584,  304,
      307,  307,  584,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  309,  309,  584,  309,  584,  309,

      309,  309,  309,  309,  309,  309,  309,  309,  320,  584,
      320,  320,  584,  320,  322,  322,  584,  322,  584,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  325,  584,
      325,  325,  584,  325,  326,  584,  584,  584,  584,  326,
      326,  584,  326,  326,  326,  326,  326,  326,  329,  584,
      584,  329,  584,  584,  584,  584,  584,  329,  329,  584,
      329,  331,  331,  584,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  339,  339,  584,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  340,
      584,  340,  340,  584,  340,  343,  343,  584,  343,  343,

      584,  343,  347,  347,  584,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  354,  584,  584,  584,
      584,  354,  354,  354,  354,  354,  354,  354,  354,  354,
      356,  584,  584,  584,  584,  584,  356,  356,  584,  356,
      358,  358,  584,  358,  584,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  367,  367,  584,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  374,  584,
      374,  374,  584,  374,  382,  584,  382,  382,  584,  382,
      386,  386,  584,  584,  386,  386,  386,  386,  386,  386,
      386,  386,  584,  386,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  388,  391,  391,
      584,  584,  391,  391,  391,  391,  391,  391,  391,  391,
      584,  391,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  396,  396,  396,  584,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      403,  584,  584,  584,  584,  584,  403,  403,  584,  403,
      403,  584,  403,  408,  584,  584,  584,  584,  408,  584,
      408,  584,  408,  408,  584,  408,  412,  584,  584,  584,
      584,  584,  412,  412,  584,  412,  412,  584,  412,  258,
      584,  584,  584,  584,  584,  584,  584,  584,  258,  258,

      584,  258,  413,  584,  584,  584,  413,  413,  584,  413,
      413,  413,  413,  584,  413,  415,  415,  584,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  415,  415,  416,
      416,  584,  416,  416,  416,  416,  416,  416,  416,  416,
      416,  416,  416,  417,  417,  417,  417,  584,  417,  417,
      417,  417,  417,  417,  417,  417,  417,  422,  584,  584,
      584,  584,  584,  584,  584,  584,  422,  422,  584,  422,
      269,  584,  584,  584,  269,  269,  584,  269,  269,  269,
      269,  584,  269,  423,  423,  423,  423,  423,  423,  423,
      423,  423,  584,  423,  423,  423,  423,  279,  584,  584,

      584,  584,  584,  584,  584,  584,  279,  279,  584,  279,
      428,  584,  584,  584,  428,  428,  584,  428,  428,  428,
      428,  584,  428,  285,  584,  584,  584,  285,  285,  584,
      285,  285,  285,  285,  584,  285,  433,  433,  433,  433,
      433,  433,  433,  433,  433,  584,  433,  433,  433,  433,
      292,  292,  584,  584,  584,  292,  292,  584,  292,  292,
      584,  584,  292,  292,  441,  441,  584,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  442,  442,
      442,  442,  584,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  297,  584,  297,  297,  584,  297,  304,  584,

      584,  584,  304,  304,  304,  304,  304,  304,  304,  304,
      584,  304,  309,  309,  584,  309,  584,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  320,  584,  320,  320,
      584,  320,  448,  448,  584,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  325,  584,  325,  325,
      584,  325,  326,  584,  584,  584,  584,  326,  326,  584,
      326,  326,  326,  326,  326,  326,  329,  584,  584,  329,
      584,  584,  584,  584,  584,  329,  329,  584,  329,  331,
      331,  584,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  454,  454,  454,  454,  454,  454,  454,

      454,  454,  454,  454,  454,  454,  454,  457,  457,  584,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  340,  584,  340,  340,  584,  340,  458,  458,  584,
      458,  343,  343,  584,  343,  343,  584,  343,  460,  460,
      584,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  354,  584,  584,  584,  584,  354,  354,  354,
      354,  354,  354,  354,  354,  354,  465,  584,  584,  584,
      584,  584,  584,  465,  584,  465,  465,  584,  465,  467,
      467,  584,  467,  467,  467,  467,  467,  467,  467,  467,
      467,  467,  467,  367,  367,  584,  367,  367,  367,  367,

      367,  367,  367,  367,  367,  367,  367,  374,  584,  374,
      374,  584,  374,  382,  584,  382,  382,  584,  382,  386,
      386,  584,  584,  386,  386,  386,  386,  386,  386,  386,
      386,  584,  386,  391,  391,  584,  584,  391,  391,  391,
      391,  391,  391,  391,  391,  584,  391,  396,  396,  396,
      584,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  485,  584,  584,  584,  584,  584,  584,  584,  584,
      485,  485,  584,  485,  403,  584,  584,  584,  584,  584,
      403,  403,  584,  403,  403,  584,  403,  408,  584,  584,
      584,  584,  408,  584,  408,  584,  408,  408,  584,  408,

      489,  584,  584,  584,  584,  584,  584,  584,  584,  489,
      489,  584,  489,  412,  584,  584,  584,  584,  584,  412,
      412,  584,  412,  412,  584,  412,  413,  584,  584,  584,
      413,  413,  584,  413,  413,  413,  413,  584,  413,  415,
      415,  584,  415,  415,  415,  415,  415,  415,  415,  415,
      415,  415,  415,  416,  416,  584,  416,  416,  416,  416,
      416,  416,  416,  416,  416,  416,  416,  422,  584,  584,
      584,  584,  584,  584,  584,  584,  422,  422,  584,  422,
      493,  584,  584,  584,  493,  493,  584,  493,  493,  493,
      493,  584,  493,  269,  584,  584,  584,  269,  269,  584,

      269,  269,  269,  269,  584,  269,  428,  584,  584,  584,
      428,  428,  584,  428,  428,  428,  428,  584,  428,  285,
      584,  584,  584,  285,  285,  584,  285,  285,  285,  285,
      584,  285,  441,  441,  584,  441,  441,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  297,  297,  584,  297,
      297,  584,  297,  448,  448,  584,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  448,  515,  515,  584,
      515,  515,  584,  515,  518,  518,  518,  518,  584,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  530,  584,
      584,  584,  584,  584,  530,  530,  584,  530,  530,  584,

      530,  532,  584,  584,  584,  584,  584,  532,  532,  584,
      532,  532,  584,  532,  545,  545,  584,  545,  560,  584,
      584,  584,  584,  584,  584,  560,  560,  560,  560,  584,
      560,  562,  562,  584,  562,  571,  584,  584,  584,  584,
      584,  584,  571,  571,  571,  571,  584,  571,   53,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,

      584,  584,  584,  584,  584,  584
    } ;

static const flex_int16_t yy_chk[3207] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    7,    7,  445,    7,    8,    8,    7,    8,    9,
       43,    8,    9,   10,   10,   43,   44,   10,   45,   65,
       45,   44,   46,   60,   46,   60,   89,   65,  103,   89,

       65,  445,  103,  128,  105,    7,  128,   65,  105,    8,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   15,   15,   73,   15,   15,   37,
       15,   37,  107,   38,   37,   38,  252,   15,   38,  107,
       39,   40,   39,   40,  124,   39,   40,  252,  124,  107,
      131,  131,   41,   15,   41,   15,  180,   41,   42,  180,
       42,  582,   37,   42,   73,   73,   38,   73,   70,   73,
       68,   70,   15,   39,   40,   15,   16,   16,   68,   16,
       16,   68,   16,  190,   66,   41,  190,   66,   68,   16,
       66,   42,   66,   67,   70,   66,   67,   71,  581,   67,

       71,   67,   66,  206,   67,   16,  206,   16,   69,  174,
      174,   67,  221,   70,   68,  221,   69,  300,   79,   69,
      300,   79,   67,   71,   16,  406,   69,   16,   17,   74,
       17,  183,  183,   17,   17,   17,  406,   74,   17,   71,
       74,   67,   71,   75,   79,   17,   75,   74,   69,   75,
      286,   75,  193,  193,   75,  579,   77,  227,  227,  245,
       17,   75,   17,   79,   77,   76,  246,   77,   76,  231,
      231,   76,  245,   76,   77,   80,   76,  256,   80,  246,
       17,   17,   18,   76,   18,   78,  578,   18,   18,   18,
      256,  577,   18,   78,   76,   90,   78,  286,   90,   18,

       77,   80,   93,   78,  129,   93,  130,  129,  576,  130,
      236,  246,  236,   76,   18,  236,   18,   80,  401,  181,
       80,   90,  181,  332,  182,   78,  332,  182,   93,  310,
      129,  401,  130,  310,   18,   18,   19,  669,   19,  669,
       90,   19,   19,   19,  312,  181,  434,   93,  312,  129,
      182,  130,   19,  191,  192,  208,  191,  192,  208,  210,
      315,  327,  210,  336,  181,  327,  336,  315,   19,  182,
       19,  403,  201,  201,  201,  201,  574,  315,  568,  191,
      192,  208,  337,  337,  403,  210,  201,  201,   19,   19,
       20,  201,   20,  434,  258,   20,   20,   20,  191,  192,

      208,  564,  258,  201,  210,  258,   20,  222,  223,  556,
      222,  223,  258,  267,  202,  202,  202,  202,  550,  266,
      352,  267,   20,  352,   20,  344,  344,  266,  202,  202,
      266,  267,  541,  222,  223,  353,  353,  266,  362,  363,
      363,  362,   20,   20,   21,  202,   21,  269,  410,   21,
       21,   21,  222,  223,   21,  269,  273,  379,  269,  273,
      379,  410,  273,  385,  273,  269,  385,  273,  533,  274,
      526,  275,  278,  276,  273,  277,   21,  274,   21,  275,
      274,  276,  275,  277,  276,  515,  277,  274,  408,  275,
      512,  276,  504,  277,  389,  389,   21,   21,   22,  408,

       22,  394,  394,   22,   22,   22,  274,  420,   22,  279,
      278,  278,  275,  278,  503,  278,  492,  279,  284,  276,
      279,  488,  277,  285,  487,  420,  284,  279,  473,  284,
       22,  285,   22,  412,  285,  484,  284,  369,  369,  369,
      397,  285,  397,  477,  473,  397,  412,  479,  479,  476,
       22,   22,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   23,   23,   23,   23,   23,   23,   23,   23,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   27,   27,   27,  475,
       27,   27,  280,   27,  281,  404,  481,  481,  474,  470,
      280,  469,  281,  280,  502,  281,  282,   27,  404,  545,
      280,  283,  281,  559,  282,  288,   27,  282,   27,  283,

      468,  466,  283,  288,  282,  465,  288,  545,  464,  283,
      462,  559,  485,  288,  281,   27,  280,  461,   27,   28,
       28,   28,  404,   28,   28,  485,   28,  287,  486,  489,
      287,  502,  288,  287,  282,  287,  283,  459,  287,  289,
       28,  486,  489,  560,  290,  287,  458,  289,  291,   28,
      289,   28,  290,  456,  530,  290,  291,  289,  453,  291,
      444,  560,  290,  562,  531,  443,  291,  530,   28,  440,
      435,   28,   29,   29,  486,   29,   29,  531,   29,  421,
      289,  562,  370,  370,  370,  370,  547,  547,  547,  532,
      290,  371,  371,  371,  371,  291,  370,  370,  570,  413,

      422,   29,  532,   29,  419,  371,  371,  413,  422,  418,
      413,  422,  531,  370,  414,  571,  570,  413,  422,  411,
       29,  424,  371,   29,   30,   30,  425,   30,   30,  424,
       30,  409,  424,  571,  425,  407,  405,  425,  428,  424,
      437,  471,  471,  471,  425,  402,  428,  563,  437,  428,
      471,  437,  573,   30,  471,   30,  428,  523,  437,  523,
      563,  523,  523,  523,  400,  573,  399,  471,  398,  396,
      424,  392,   30,  387,  384,   30,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   94,   94,  383,   94,  381,  380,   94,  378,   94,
       94,   94,   94,   94,   94,  426,   94,   94,   94,   94,
       94,   94,   94,  426,  377,  376,  426,  375,  368,  366,
      493,  365,  436,  426,  427,   94,   94,   94,  493,  361,

      436,  493,  427,  436,  360,  427,  359,  357,  493,  356,
      436,  355,  427,  351,  429,   94,   94,   94,  303,  303,
      426,  303,  429,  350,  303,  429,  303,  303,  303,  303,
      303,  303,  429,  303,  303,  303,  303,  303,  303,  303,
      427,  436,  349,  348,  346,  343,  341,  495,  496,  499,
      335,  429,  303,  303,  303,  495,  496,  499,  495,  496,
      499,  334,  333,  330,  328,  495,  496,  499,  324,  323,
      321,  319,  303,  303,  303,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,

      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  430,
      431,  329,  317,  314,  432,  438,  313,  430,  431,  308,
      430,  431,  432,  438,  306,  432,  438,  430,  431,  439,
      494,  305,  432,  438,  497,  498,  302,  439,  494,  301,
      439,  494,  497,  498,  299,  497,  498,  439,  494,  298,
      430,  500,  497,  498,  296,  501,  431,  293,  549,  500,
      438,  432,  500,  501,  272,  271,  501,  268,  265,  500,
      505,  549,  506,  501,  264,  439,  260,  259,  505,  494,

      506,  505,  497,  506,  498,  257,  507,  508,  505,  254,
      506,  534,  535,  248,  507,  508,  500,  507,  508,  534,
      535,  501,  534,  535,  507,  508,  536,  538,  549,  534,
      535,  242,  537,  235,  536,  538,  234,  536,  538,  505,
      537,  539,  233,  537,  536,  538,  540,  232,  230,  539,
      537,  225,  539,  217,  540,  508,  216,  540,  207,  539,
      542,  543,  544,  205,  540,  199,  197,  195,  542,  543,
      544,  542,  543,  544,  189,  187,  536,  186,  542,  543,
      544,  537,  548,  548,  548,  551,  179,  178,  177,  552,
      553,  554,  173,  551,  540,  548,  551,  552,  553,  554,

      552,  553,  554,  551,  168,  555,  557,  552,  553,  554,
      558,  565,  544,  555,  557,  132,  555,  557,  558,  565,
      127,  558,  565,  555,  557,  566,  567,  569,  558,  565,
      126,  575,  125,  566,  567,  569,  566,  567,  569,  575,
      119,  117,  575,  566,  567,  569,  114,  111,  110,  575,
      106,  101,   99,   98,   92,  555,  585,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  585,  585,  585,  585,
      586,  586,  586,  586,  586,  586,  586,  586,  586,  586,
      586,  586,  586,  586,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  588,  588,

      588,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  588,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  589,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
      593,  593,  594,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  594,  595,  595,  595,  595,

      595,  595,  595,  595,  595,  595,  595,  595,  595,  595,
      596,  596,  596,  596,  596,  596,  596,  596,  596,  596,
      596,  596,  596,  596,  597,  597,  597,  597,  597,  597,
      597,  597,  597,  597,  597,  597,  597,  597,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  599,  599,  599,  599,  599,  599,  599,  599,
      599,  599,  599,  599,  599,  599,  600,   91,   86,   85,
       84,   64,   61,   59,   58,  600,  600,   57,  600,  601,
      601,   53,  601,  601,  601,  601,  601,  601,  601,  601,
      601,  601,  601,  602,   34,   33,    2,  602,  602,    1,

      602,  602,  602,  602,    0,  602,  603,    0,    0,    0,
        0,    0,    0,    0,    0,  603,  603,    0,  603,  604,
        0,    0,    0,  604,  604,    0,  604,  604,  604,  604,
        0,  604,  605,  605,    0,    0,    0,  605,  605,    0,
      605,  605,    0,    0,  605,  605,  606,  606,    0,  606,
      606,  606,  606,  606,  606,  606,  606,  606,  606,  606,
      607,    0,  607,  607,    0,  607,  608,    0,    0,    0,
      608,  608,  608,  608,  608,  608,  608,  608,    0,  608,
      609,  609,    0,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  609,  609,  610,  610,    0,  610,    0,  610,

      610,  610,  610,  610,  610,  610,  610,  610,  611,    0,
      611,  611,    0,  611,  612,  612,    0,  612,    0,  612,
      612,  612,  612,  612,  612,  612,  612,  612,  613,    0,
      613,  613,    0,  613,  614,    0,    0,    0,    0,  614,
      614,    0,  614,  614,  614,  614,  614,  614,  615,    0,
        0,  615,    0,    0,    0,    0,    0,  615,  615,    0,
      615,  616,  616,    0,  616,  616,  616,  616,  616,  616,
      616,  616,  616,  616,  616,  617,  617,    0,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  618,
        0,  618,  618,    0,  618,  619,  619,    0,  619,  619,

        0,  619,  620,  620,    0,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  621,    0,    0,    0,
        0,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      622,    0,    0,    0,    0,    0,  622,  622,    0,  622,
      623,  623,    0,  623,    0,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  624,  624,    0,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  625,    0,
      625,  625,    0,  625,  626,    0,  626,  626,    0,  626,
      627,  627,    0,    0,  627,  627,  627,  627,  627,  627,
      627,  627,    0,  627,  628,  628,  628,  628,  628,  628,

      628,  628,  628,  628,  628,  628,  628,  628,  629,  629,
        0,    0,  629,  629,  629,  629,  629,  629,  629,  629,
        0,  629,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  631,  631,  631,    0,
      631,  631,  631,  631,  631,  631,  631,  631,  631,  631,
      632,    0,    0,    0,    0,    0,  632,  632,    0,  632,
      632,    0,  632,  633,    0,    0,    0,    0,  633,    0,
      633,    0,  633,  633,    0,  633,  634,    0,    0,    0,
        0,    0,  634,  634,    0,  634,  634,    0,  634,  635,
        0,    0,    0,    0,    0,    0,    0,    0,  635,  635,

        0,  635,  636,    0,    0,    0,  636,  636,    0,  636,
      636,  636,  636,    0,  636,  637,  637,    0,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  638,
      638,    0,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  638,  639,  639,  639,  639,    0,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  640,    0,    0,
        0,    0,    0,    0,    0,    0,  640,  640,    0,  640,
      641,    0,    0,    0,  641,  641,    0,  641,  641,  641,
      641,    0,  641,  642,  642,  642,  642,  642,  642,  642,
      642,  642,    0,  642,  642,  642,  642,  643,    0,    0,

        0,    0,    0,    0,    0,    0,  643,  643,    0,  643,
      644,    0,    0,    0,  644,  644,    0,  644,  644,  644,
      644,    0,  644,  645,    0,    0,    0,  645,  645,    0,
      645,  645,  645,  645,    0,  645,  646,  646,  646,  646,
      646,  646,  646,  646,  646,    0,  646,  646,  646,  646,
      647,  647,    0,    0,    0,  647,  647,    0,  647,  647,
        0,    0,  647,  647,  648,  648,    0,  648,  648,  648,
      648,  648,  648,  648,  648,  648,  648,  648,  649,  649,
      649,  649,    0,  649,  649,  649,  649,  649,  649,  649,
      649,  649,  650,    0,  650,  650,    0,  650,  651,    0,

        0,    0,  651,  651,  651,  651,  651,  651,  651,  651,
        0,  651,  652,  652,    0,  652,    0,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  653,    0,  653,  653,
        0,  653,  654,  654,    0,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  655,    0,  655,  655,
        0,  655,  656,    0,    0,    0,    0,  656,  656,    0,
      656,  656,  656,  656,  656,  656,  657,    0,    0,  657,
        0,    0,    0,    0,    0,  657,  657,    0,  657,  658,
      658,    0,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  659,  659,  659,  659,  659,  659,  659,

      659,  659,  659,  659,  659,  659,  659,  660,  660,    0,
      660,  660,  660,  660,  660,  660,  660,  660,  660,  660,
      660,  661,    0,  661,  661,    0,  661,  662,  662,    0,
      662,  663,  663,    0,  663,  663,    0,  663,  664,  664,
        0,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  665,    0,    0,    0,    0,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  666,    0,    0,    0,
        0,    0,    0,  666,    0,  666,  666,    0,  666,  667,
      667,    0,  667,  667,  667,  667,  667,  667,  667,  667,
      667,  667,  667,  668,  668,    0,  668,  668,  668,  668,

      668,  668,  668,  668,  668,  668,  668,  670,    0,  670,
      670,    0,  670,  671,    0,  671,  671,    0,  671,  672,
      672,    0,    0,  672,  672,  672,  672,  672,  672,  672,
      672,    0,  672,  673,  673,    0,    0,  673,  673,  673,
      673,  673,  673,  673,  673,    0,  673,  674,  674,  674,
        0,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  675,    0,    0,    0,    0,    0,    0,    0,    0,
      675,  675,    0,  675,  676,    0,    0,    0,    0,    0,
      676,  676,    0,  676,  676,    0,  676,  677,    0,    0,
        0,    0,  677,    0,  677,    0,  677,  677,    0,  677,

      678,    0,    0,    0,    0,    0,    0,    0,    0,  678,
      678,    0,  678,  679,    0,    0,    0,    0,    0,  679,
      679,    0,  679,  679,    0,  679,  680,    0,    0,    0,
      680,  680,    0,  680,  680,  680,  680,    0,  680,  681,
      681,    0,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  682,  682,    0,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  683,    0,    0,
        0,    0,    0,    0,    0,    0,  683,  683,    0,  683,
      684,    0,    0,    0,  684,  684,    0,  684,  684,  684,
      684,    0,  684,  685,    0,    0,    0,  685,  685,    0,

      685,  685,  685,  685,    0,  685,  686,    0,    0,    0,
      686,  686,    0,  686,  686,  686,  686,    0,  686,  687,
        0,    0,    0,  687,  687,    0,  687,  687,  687,  687,
        0,  687,  688,  688,    0,  688,  688,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  689,  689,    0,  689,
      689,    0,  689,  690,  690,    0,  690,  690,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  691,  691,    0,
      691,  691,    0,  691,  692,  692,  692,  692,    0,  692,
      692,  692,  692,  692,  692,  692,  692,  692,  693,    0,
        0,    0,    0,    0,  693,  693,    0,  693,  693,    0,

      693,  694,    0,    0,    0,    0,    0,  694,  694,    0,
      694,  694,    0,  694,  695,  695,    0,  695,  696,    0,
        0,    0,    0,    0,    0,  696,  696,  696,  696,    0,
      696,  697,  697,    0,  697,  698,    0,    0,    0,    0,
        0,    0,  698,  698,  698,  698,    0,  698,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,
      584,  584,  584,  584,  584,  584,  584,  584,  584,  584,

      584,  584,  584,  584,  584,  584
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/*************************************************************************
 *
 * Copyright (c) 2014-2024 Barbara Geller & Ansel Sermersheim
 * Copyright (c) 1997-2014 Dimitri van Heesch

*************************************************************************/

#include <parse_py.h>

#include <arguments.h>
#include <commentscan.h>
#include <config.h>
#include <default_args.h>
#include <doxy_globals.h>
#include <entry.h>
#include <language.h>
#include <message.h>
#include <util.h>

#include <QFile>
#include <QFileInfo>
#include <QHash>

#include <assert.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>

#define DBG_CTX(...)     do { } while(0)

#define YY_NO_INPUT 1

static QSharedPointer<Entry> current_root;
static QSharedPointer<Entry> current;
static QSharedPointer<Entry> previous;
static QSharedPointer<Entry> bodyEntry;

static QSharedPointer<Entry>  s_docsEntry;    // which entry
static EntryKey               s_docsEnum;     // which enum in EntryKey (Source_Text, Initial_Value)

static bool s_defVal_active = false;

static ParserInterface  *s_thisParser;
static QString           s_inputString;
static int               s_inputPosition;
static QFile             s_inputFile;

static int               yyLineNr = 1;
static QString           yyFileName;

static Protection        protection;
static MethodType        mtype;
static Specifier         virt;

static bool              s_static;

static int               docBlockContext;
static QString           docBlock;
static bool              docBlockInBody;
static bool              isJavaDocStyle;
static bool              docBrief;
static bool              docBlockSpecial;

static bool              s_doubleQuote;
static bool              s_specialBlock;
static int               s_stringContext;
static int               s_indent    = 0;
static int               s_curIndent = 0;

static char              s_atomStart;
static char              s_atomEnd;
static int               s_atomCount;

static QString           s_moduleScope;
static QString           s_packageName;
static QString           s_defVal;

static int               s_braceCount;

static bool              s_lexInit = false;
static bool              s_packageCommentAllowed;

static bool              s_funcParamsEnd = false;
static bool              s_start_init    = false;
static int               s_search_count  = 0;
static QString           s_argType       = QString();

static void initParser()
{
   protection = Public;
   mtype    = MethodType::Method;
   s_static = false;
   virt     = Normal;

   previous = QSharedPointer<Entry>();
   s_packageCommentAllowed = true;
}

static void initEntry()
{
   current->protection = protection;
   current->mtype      = mtype;
   current->virt       = virt;
   current->m_static   = s_static;
   current->m_srcLang  = SrcLangExt_Python;

   current->setParent(current_root);

   initGroupInfo(current);
   s_static = false;
}

static void newEntry()
{
   previous = current;
   current_root->addSubEntry(current);

   current = QMakeShared<Entry>();
   initEntry();
}

static void newVariable()
{
   if (! current->m_entryName.isEmpty() && current->m_entryName.at(0) == '_') {

      if (current->m_entryName.size() < 2 || current->m_entryName.at(1) == '_')  {
         // mark as private
         current->protection = Private;

      } else {
        // mark as protected
        current->protection = Protected;

      }
   }

   if (current_root->section & Entry::COMPOUND_MASK) {
      // mark as class variable
      current->m_static = true;
   }

   newEntry();
}

static void newFunction()
{
   if (current->m_entryName.startsWith("__") && current->m_entryName.endsWith("__")) {

      // special method name, refer to https://docs.python.org/ref/specialnames.html
      current->protection = Public;

   } else if (current->m_entryName.at(0) == '_') {

      if (current->m_entryName.size() < 2 || current->m_entryName.at(1) == '_')  {
         // mark as private
         current->protection = Private;

      } else {
        // mark as protected
        current->protection = Protected;

      }
   }
}

static inline int computeIndent(const QString &str)
{
   static const int tabSize = Config::getInt("tab-size");

   int col = 0;

   for (auto c : str)  {

      if (c == ' ') {
         col++;

      } else if (c == '\t') {
         col += tabSize - (col % tabSize);

      } else {
         break;
      }
   }

   return col;
}

static QString findPackageScopeFromPath(const QString &path)
{
   static QHash<QString, QString> s_packageNameCache;

   QString pScope = s_packageNameCache.value(path);

   if (! pScope.isEmpty()) {
      return pScope;
   }

   // found package initialization file
   QFileInfo pf(path + "/__init__.py");

   if (pf.exists()) {
      int pos = path.lastIndexOf('/');

      if (pos != -1) {
         QString scope = findPackageScopeFromPath(path.left(pos));

         if (! scope.isEmpty()) {
            scope += "::";
         }

         scope += path.mid(pos + 1);
         s_packageNameCache.insert(path, scope);
         return scope;
      }
   }

   return QString();
}

static QString findPackageScope(const QString &fileName)
{
   if (! fileName.isEmpty()) {
      return QString();
   }

   QFileInfo fi(fileName);

   return findPackageScopeFromPath(fi.absolutePath());
}

static void lineCount()
{
   // commentscan, parse_py

   for (const char *p = yytext; *p; ++p) {
      yyLineNr += (*p == '\n');
   }
}

static void incLineNr()
{
   DBG_CTX((stderr, "yyLineNr = %d\n", yyLineNr));
   yyLineNr++;
}

static void startCommentBlock(bool brief)
{
   if (brief) {
      current->setData(EntryKey::Brief_File, yyFileName);
      current->briefLine = yyLineNr;

   } else {
      current->setData(EntryKey::MainDocs_File, yyFileName);
      current->docLine = yyLineNr;

   }
}

static void handleCommentBlock(const QString &doc, bool isBrief)
{
   docBlockInBody = false;

   QString currentDocs = current->getData(EntryKey::Main_Docs);

   if (! currentDocs.isEmpty()) {
      current->setData(EntryKey::Main_Docs, currentDocs.trimmed() + "\n\n");
   }

   if (docBlockInBody && previous) {
      QString prevDocs = previous->getData(EntryKey::Main_Docs);

      if (! prevDocs.isEmpty()) {
         previous->setData(EntryKey::Main_Docs, prevDocs.trimmed() + "\n\n");
      }
   }

   bool needsEntry = false;
   int position    = 0;
   int lineNr      = isBrief ? current->briefLine : current->docLine;

   while (parseCommentBlock(s_thisParser, (docBlockInBody && previous) ? previous : current,
             doc, yyFileName, lineNr, docBlockInBody ? false : isBrief, isJavaDocStyle, docBlockInBody,
             protection, position, needsEntry)) {

      if (needsEntry) {
         newEntry();
      }
   }

   if (needsEntry) {
      newEntry();
   }
}

static void endOfDef(int correction = 0)
{
   if (bodyEntry) {
      bodyEntry->endBodyLine  = yyLineNr - correction;
      bodyEntry = QSharedPointer<Entry>();
   }

   newEntry();
}

static void addToOutput(const QString &str)
{
   if (s_defVal_active) {
      s_defVal += str;

   } else if (s_docsEntry != nullptr) {
      s_docsEntry->appendData(s_docsEnum, str);
   }
}

static void initTriDoubleQuoteBlock()
{
   docBlockContext = YY_START;
   docBlockInBody  = false;
   isJavaDocStyle  = false;

   QString text = QString::fromUtf8(yytext);
   docBlockSpecial = text.endsWith('!');

   docBlock.resize(0);
   s_doubleQuote = true;
   startCommentBlock(false);
}

static void initTriSingleQuoteBlock()
{
   docBlockContext = YY_START;
   docBlockInBody  = false;
   isJavaDocStyle  = false;

   QString text = QString::fromUtf8(yytext);
   docBlockSpecial = text.endsWith('!');

   docBlock.resize(0);
   s_doubleQuote = false;
   startCommentBlock(false);
}

static void initSpecialBlock()
{
   docBlockContext  = YY_START;
   docBlockInBody   = false;
   isJavaDocStyle   = true;
   docBrief         = true;

   docBlock.resize(0);
   startCommentBlock(false);
}

static void searchFoundDef()
{
   current->setData(EntryKey::File_Name, yyFileName);
   current->startLine     = yyLineNr;
   current->startBodyLine = yyLineNr;

   current->section   = Entry::FUNCTION_SEC;
   current->m_srcLang = SrcLangExt_Python;
   current->virt      = Normal;
   current->m_static  = s_static;
   current->mtype     = (mtype = MethodType::Method);

   current->m_entryName.resize(0);
   current->setData(EntryKey::Member_Type, "");
   current->setData(EntryKey::Member_Args, "");
   current->argList.clear();

   s_packageCommentAllowed = false;
   s_static = false;
}

static void searchFoundClass()
{
   current->section = Entry::CLASS_SEC;
   current->argList.clear();

   current->appendData(EntryKey::Member_Type, "class");

   current->setData(EntryKey::File_Name, yyFileName);
   current->startLine     = yyLineNr;
   current->startBodyLine = yyLineNr;

   s_packageCommentAllowed = false;
}

#undef   YY_INPUT
#define  YY_INPUT(buf,result,max_size) result = yyread(buf,max_size);

static int yyread(char *buf, int max_size)
{
   int len = max_size;

   const char *src = s_inputString.constData() + s_inputPosition;

   if (s_inputPosition + len >= s_inputString.size_storage()) {
      len = s_inputString.size_storage() - s_inputPosition;
   }

   memcpy(buf, src, len);
   s_inputPosition += len;

   return len;
}

   /* start command character */
#define YY_NO_UNISTD_H 1
  /* Main start state */

  /* Mid-comment states */
  /* %x FuncDoubleComment */
  /* %x ClassDoubleComment */

  /* Function states */

  /* Class states */

  /* Variable states */

  /* String states */

  /* import */

#define INITIAL 0
#define Search 1
#define SearchMemVars 2
#define TripleComment 3
#define SpecialComment 4
#define FunctionDec 5
#define FunctionParams 6
#define FunctionBody 7
#define FunctionAnnotation 8
#define FunctionTypeAnnotation 9
#define FunctionParamDefVal 10
#define ClassDec 11
#define ClassInheritance 12
#define ClassCaptureIndent 13
#define ClassBody 14
#define VariableDec 15
#define VariableEnd 16
#define VariableAtom 17
#define SingleQuoteString 18
#define DoubleQuoteString 19
#define TripleString 20
#define SingleQuoteStringIgnore 21
#define DoubleQuoteStringIgnore 22
#define FromMod 23
#define FromModItem 24
#define Import 25

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 196608
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 585 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 584 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */

case 1:
YY_RULE_SETUP
{
      // start of a function/method definition with indent
      DBG_CTX((stderr, "Found def at %d\n", yyLineNr));

      QString text = QString::fromUtf8(yytext);

      s_indent = computeIndent(text);
      searchFoundDef();
      BEGIN( FunctionDec );
   }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
      // start of a function/method definition
      searchFoundDef();
      BEGIN( FunctionDec );
   }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
      // start of a class definition with indent
      DBG_CTX((stderr,"Found class at %d\n",yyLineNr));

      QString text = QString::fromUtf8(yytext);

      s_indent = computeIndent(text);
      searchFoundClass();
      BEGIN( ClassDec ) ;
   }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
      // start of a class definition
     searchFoundClass();
     BEGIN( ClassDec ) ;
   }
	YY_BREAK
case 5:
case 6:
YY_RULE_SETUP
{

      // start of an from import
      s_packageCommentAllowed = false;
      BEGIN( FromMod );
   }
	YY_BREAK
case 7:
case 8:
YY_RULE_SETUP
{

      // start of an import statement
      s_packageCommentAllowed = false;
      BEGIN( Import );
   }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
      // property
      QString text = QString::fromUtf8(yytext);

      current->section     = Entry::VARIABLE_SEC;
      current->mtype       = MethodType::Property;
      current->m_entryName = text.trimmed();

      current->setData(EntryKey::File_Name, yyFileName);
      current->startLine     = yyLineNr;
      current->startBodyLine = yyLineNr;

      s_packageCommentAllowed = false;

      BEGIN(VariableDec);
   }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
{
      // variable
      if (s_search_count) {
         REJECT;
      }

      QString text = QString::fromUtf8(yytext);

      s_indent = computeIndent(text);
      current->section        = Entry::VARIABLE_SEC;
      current->m_entryName    = text.trimmed();

      current->setData(EntryKey::File_Name, yyFileName);;
      current->startLine      = yyLineNr;
      current->startBodyLine  = yyLineNr;
      s_packageCommentAllowed = false;

      BEGIN(VariableDec);
   }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
{
      // list of variables, can not place the default value so we will skip it later on in a general rule
      // Also note ")" this is to catch also (a,b). the "("
      // is caught in the rule: [(], the ")" will be handled in [)]

      if (s_search_count > 1) {
         REJECT;
      }

      QString text = QString::fromUtf8(yytext);
      s_indent = computeIndent(text);

      current->section        = Entry::VARIABLE_SEC;
      current->m_entryName    = text.trimmed();

      current->setData(EntryKey::File_Name, yyFileName);
      current->startLine      = yyLineNr;
      current->startBodyLine  = yyLineNr;

      s_packageCommentAllowed = false;
      newVariable();
   }
	YY_BREAK
case 12:
YY_RULE_SETUP
{
      // start of a single quoted string
      s_stringContext = YY_START;

      s_defVal_active = false;
      s_docsEntry     = QSharedPointer<Entry>();

      s_packageCommentAllowed = false;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
      // start of a double quoted string
      s_stringContext = YY_START;

      s_defVal_active = false;
      s_docsEntry     = QSharedPointer<Entry>();

      s_packageCommentAllowed = false;

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 14:
YY_RULE_SETUP
{
      s_static = true;
   }
	YY_BREAK
case 15:
YY_RULE_SETUP
{
      // Unix type script comment
      if (yyLineNr != 1)   {
         REJECT;
      }
   }
	YY_BREAK
case 16:
YY_RULE_SETUP
{
      // normal comment
      s_packageCommentAllowed = false;
   }
	YY_BREAK
case 17:
YY_RULE_SETUP
{
      // some other identifier
      s_packageCommentAllowed = false;
   }
	YY_BREAK
case 18:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_curIndent  = computeIndent(text);
   }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
{
      // new line
      lineCount();
   }
	YY_BREAK
case 20:
YY_RULE_SETUP
{
      // start of a comment block
      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 21:
YY_RULE_SETUP
{
      // start of a comment block
      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 22:
/* rule 22 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      // start of a special comment
      QString text = QString::fromUtf8(yytext);
      s_curIndent  = computeIndent(text);

      s_packageCommentAllowed = false;
      initSpecialBlock();
      BEGIN(SpecialComment);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP
{
      // we have to do something with (
      s_search_count += 1;
   }
	YY_BREAK
case 24:
YY_RULE_SETUP
{
      // we have to do something with )
      s_search_count -= 1;
   }
	YY_BREAK
case 25:
YY_RULE_SETUP
{
      // any other character...this is the major default
      // that should catch everything else in Body
   }
	YY_BREAK

case 26:
YY_RULE_SETUP
{
      // python3 style imports
   }
	YY_BREAK
case 27:
YY_RULE_SETUP
{
      // from package import
      QString text = QString::fromUtf8(yytext);
      s_packageName = text;
   }
	YY_BREAK
case 28:
YY_RULE_SETUP
{
      BEGIN(FromModItem);
   }
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      BEGIN(Search);
   }
	YY_BREAK
case 30:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
      unput(*yytext);
      BEGIN(Search);
   }
	YY_BREAK

case 32:
YY_RULE_SETUP
{
      // import all
      QString item      = s_packageName;

      current->m_entryName     = removeRedundantWhiteSpace(substitute(item,".","::"));
      current->section  = Entry::USINGDIR_SEC;
      current->setData(EntryKey::File_Name, yyFileName);

      current_root->addSubEntry(current);

      current = QMakeShared<Entry>();
      initEntry();
      BEGIN(Search);
   }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      QString item = s_packageName+"." + text;

      current->m_entryName = removeRedundantWhiteSpace(substitute(item,".","::"));
      current->section  = Entry::USINGDECL_SEC;
      current->setData(EntryKey::File_Name, yyFileName);

      current_root->addSubEntry(current);
      current = QMakeShared<Entry>();
      initEntry();
   }
	YY_BREAK
case 34:
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(yytext);
      QString item  = s_packageName+"." + text;

      current->m_entryName = removeRedundantWhiteSpace(substitute(item,".","::"));
      current->section  = Entry::USINGDECL_SEC;
      current->setData(EntryKey::File_Name, yyFileName);

      current_root->addSubEntry(current);
      current = QMakeShared<Entry>();
      initEntry();
      BEGIN(Search);
   }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      BEGIN(Search);
   }
	YY_BREAK
case 36:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 37:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 38:
YY_RULE_SETUP
{
      unput(*yytext);
      BEGIN(Search);
   }
	YY_BREAK

case 39:
YY_RULE_SETUP
{
      QString text  = QString::fromUtf8(yytext);

      current->m_entryName = removeRedundantWhiteSpace(substitute(text,".","::"));
      current->section  = Entry::USINGDECL_SEC;
      current->setData(EntryKey::File_Name, yyFileName);

      current_root->addSubEntry(current);
      current = QMakeShared<Entry>();
      initEntry();
      BEGIN(Search);
   }
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      BEGIN(Search);
   }
	YY_BREAK
case 41:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 42:
YY_RULE_SETUP
{
      unput(*yytext);
      BEGIN(Search);
   }
	YY_BREAK

case 43:
YY_RULE_SETUP
{
         QString text = QString::fromUtf8(yytext);

         DBG_CTX((stderr,"Found instance method variable %s in %s at %d\n", csPrintable(text.mid(5)),
                  csPrintable(current_root->m_entryName), yyLineNr));

         current->m_entryName    = text.mid(5);
         current->section        = Entry::VARIABLE_SEC;

         current->setData(EntryKey::File_Name,   yyFileName);
         current->startLine      = yyLineNr;
         current->startBodyLine  = yyLineNr;

         current->setData(EntryKey::Member_Type, "");

         if (current->m_entryName.at(0) == '_') {

            if (current->m_entryName.size() < 2 || current->m_entryName.at(1) == '_')  {
               // mark as private
               current->protection = Private;

            } else {
              // mark as protected
              current->protection = Protected;

            }
         }

         newEntry();
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      DBG_CTX(stderr, "Found class method variable %s in %s at%d\n",
                  csPrintable(text.mid(4)), csPrintable(current_root->m_entryName), yyLineNr);

      current->m_entryName   = text.mid(4);
      current->section       = Entry::VARIABLE_SEC;

      current->setData(EntryKey::File_Name, yyFileName);
      current->startLine     = yyLineNr;
      current->startBodyLine = yyLineNr;

      current->setData(EntryKey::Member_Type, "");

      if (current->m_entryName.at(0) == '_') {

         if (current->m_entryName.size() < 2 || current->m_entryName.at(1) == '_')  {
            // mark as private
            current->protection = Private;

         } else {
           // mark as protected
           current->protection = Protected;

         }
      }

      newEntry();
                      }
	YY_BREAK
case 45:
YY_RULE_SETUP
{
      // start of a comment block
      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
{
      // start of a comment block
      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 47:
/* rule 47 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      // start of a special comment
      initSpecialBlock();
      BEGIN(SpecialComment);
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
{
      // #
   }
	YY_BREAK
case 49:
YY_RULE_SETUP
{
      // start of a single quoted string
      s_stringContext = YY_START;

      s_defVal_active = false;
      s_docsEntry     = QSharedPointer<Entry>();

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
{
      // start of a double quoted string
      s_stringContext = YY_START;

      s_defVal_active = false;
      s_docsEntry     = QSharedPointer<Entry>();

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
{
      incLineNr();
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
{
      // identifiers
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
{
      // other uninteresting stuff
   }
	YY_BREAK
case 54:
YY_RULE_SETUP
{
      // anything else
   }
	YY_BREAK

case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
      DBG_CTX((stderr, "indent %d <= %d\n", computeIndent(text.mid(1)), s_indent));

      QString text = QString::fromUtf8(yytext);

      if (computeIndent(text.mid(1)) <= s_indent)  {

         for (int i = yyleng - 1; i >= 0; i--) {
            unput(yytext[i]);
         }

         endOfDef();
         BEGIN(Search);

      } else {
         incLineNr();
         current->appendData(EntryKey::Source_Text, text);
      }
   }
	YY_BREAK
case 56:
/* rule 56 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 2);
(yy_c_buf_p) = yy_cp -= 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      if (computeIndent(text.mid(1)) <= s_indent)  {

         for (int i = yyleng - 1; i >= 0; i--) {
           unput(yytext[i]);
         }

         endOfDef();
         BEGIN(Search);

      } else {
         incLineNr();
         current->appendData(EntryKey::Source_Text, text);
      }
   }
	YY_BREAK
case YY_STATE_EOF(FunctionBody):
{
         endOfDef();
         yyterminate();
   }
	YY_BREAK
case 57:
/* rule 57 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      // skip empty line
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 58:
YY_RULE_SETUP
{
      // something at indent >0
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);

      s_curIndent = computeIndent(text);

      if (s_curIndent <= s_indent) {
         // jumped out of the function
         endOfDef(1);
         BEGIN(Search);
      }
   }
	YY_BREAK
case 59:
YY_RULE_SETUP
{
      // start of a single quoted string
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);

      s_stringContext = YY_START;
      s_specialBlock  = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Source_Text;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
{
      // start of a double quoted string
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);

      s_stringContext = YY_START;
      s_specialBlock  = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Source_Text;

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 61:
YY_RULE_SETUP
{
      // non-special stuff
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);;
      s_specialBlock = false;
   }
	YY_BREAK
case 62:
YY_RULE_SETUP
{
      // normal comment
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 63:
YY_RULE_SETUP
{
      // comment half way
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      incLineNr();
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
      // any character
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text[0]);

      s_specialBlock = false;
   }
	YY_BREAK
case 66:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);
      initTriDoubleQuoteBlock();

      BEGIN(TripleComment);
   }
	YY_BREAK
case 67:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);
      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 68:
/* rule 68 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 2);
(yy_c_buf_p) = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      // start of a special comment
      initSpecialBlock();
      BEGIN(SpecialComment);
   }
	YY_BREAK

case 69:
YY_RULE_SETUP
{
      //found function name
      QString text = QString::fromUtf8(yytext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "def");
      }

      current->m_entryName = text;
      current->m_entryName = current->m_entryName.trimmed();
      newFunction();
   }
	YY_BREAK
case 70:
YY_RULE_SETUP
{
      // function without arguments
      s_specialBlock = true;          // expecting a docstring
      bodyEntry      = current;

      current->startBodyLine = yyLineNr;

      BEGIN(FunctionBody);
   }
	YY_BREAK
case 71:
YY_RULE_SETUP
{
      s_defVal.clear();
      s_braceCount = 0;

      BEGIN(FunctionTypeAnnotation);
   }
	YY_BREAK
case 72:
YY_RULE_SETUP
{
      s_funcParamsEnd = false;
      current->startBodyLine = yyLineNr;
      BEGIN( FunctionParams );
   }
	YY_BREAK
case 73:
YY_RULE_SETUP
{
      // end of parameter list

      current->setData(EntryKey::Member_Args, argListToString(current->argList));
      s_funcParamsEnd = true;
   }
	YY_BREAK

case 74:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 75:
YY_RULE_SETUP
{
      s_argType = QString::fromUtf8(yytext);
   }
	YY_BREAK
case 76:
YY_RULE_SETUP
{
      // Name of parameter
      QString text = QString::fromUtf8(yytext);
      lineCount();

      current->argList.append( Argument() );
      current->argList.last().name = text.trimmed();
      current->argList.last().type = s_argType;
      s_argType = "";
   }
	YY_BREAK
case 77:
YY_RULE_SETUP
{
      // default value

      // TODO: this rule is too simple, need to be able to
      // match things like =")" as well

      s_defVal.clear();
      s_braceCount = 0;

      BEGIN(FunctionParamDefVal);
   }
	YY_BREAK
case 78:
YY_RULE_SETUP
{
      unput(*yytext);
      BEGIN(FunctionDec);

   }
	YY_BREAK
case 79:
YY_RULE_SETUP
{
      s_defVal.clear();
      s_braceCount = 0;
      BEGIN(FunctionAnnotation);
   }
	YY_BREAK
case 80:
YY_RULE_SETUP
{
      // a comment
   }
	YY_BREAK
case 81:
YY_RULE_SETUP
{
      // default rule inside arguments
   }
	YY_BREAK

case 82:
case 83:
case 84:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];

      ++s_braceCount;
   }
	YY_BREAK
case 85:
case 86:
case 87:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];

      --s_braceCount;
   }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      if (s_braceCount == 0) {
         current->setData(EntryKey::Member_Type, s_defVal);

         unput(*yytext);
         BEGIN(FunctionDec);

      } else {
         s_defVal += text[0];
      }
   }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal   += text[0];

      s_defVal_active = true;

      s_stringContext=FunctionTypeAnnotation;
      BEGIN(SingleQuoteString);
   }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal   += text[0];

      s_defVal_active = true;

      s_stringContext = FunctionTypeAnnotation;
      BEGIN(DoubleQuoteString);
   }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];
      incLineNr();
   }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];
   }
	YY_BREAK

case 93:
case 94:
case 95:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];

      ++s_braceCount;
   }
	YY_BREAK
case 96:
case 97:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];

      --s_braceCount;
   }
	YY_BREAK
case 98:
case 99:
case 100:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      if (s_braceCount == 0){
         // end of default argument

         if (! current->argList.listEmpty()) {
            current->argList.last().type = s_defVal.trimmed();
         }

         if (text[0] != ',') {
            unput(*yytext);
         }

         BEGIN(FunctionParams);

      } else {
         if (text[0] == ')') {
            --s_braceCount;
         }

         s_defVal += text[0];
      }
   }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];

      s_defVal_active = true;

      s_stringContext = FunctionAnnotation;
      BEGIN(SingleQuoteString);
   }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];

      s_defVal_active = true;

      s_stringContext = FunctionAnnotation;
      BEGIN(DoubleQuoteString);
   }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];

      incLineNr();
   }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];
   }
	YY_BREAK

case 105:
case 106:
case 107:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];

      ++s_braceCount;
   }
	YY_BREAK
case 108:
case 109:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];

      --s_braceCount;
   }
	YY_BREAK
case 110:
case 111:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      if (s_braceCount == 0) {

         if (! current->argList.listEmpty()) {
            current->argList.last().defval = s_defVal.trimmed();
         }

         if (text[0] != ',') {
            unput(*yytext);
         }

         BEGIN(FunctionParams);

      } else {
         if (text[0] == ')') {
            --s_braceCount;
         }

         s_defVal += text[0];
      }
   }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal   += text[0];

      s_defVal_active = true;

      s_stringContext  = FunctionParamDefVal;
      BEGIN(SingleQuoteString);
   }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];

      s_defVal_active = true;

      s_stringContext = FunctionParamDefVal;
      BEGIN(DoubleQuoteString);
   }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];
      incLineNr();
   }
	YY_BREAK
case 115:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_defVal += text[0];
   }
	YY_BREAK

case 116:
/* rule 116 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      // new def at indent 0
      incLineNr();
      endOfDef();
      BEGIN(Search);
   }
	YY_BREAK
case 117:
/* rule 117 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      // start of a special comment at indent 0
      incLineNr();
      endOfDef();
      BEGIN(Search);
   }
	YY_BREAK
case 118:
/* rule 118 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      // skip empty line
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case YY_STATE_EOF(ClassBody):
{
         endOfDef();
         yyterminate();
   }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
      // something at indent >0
      QString text = QString::fromUtf8(yytext);
      s_curIndent  = computeIndent(text);

      DBG_CTX((stderr,"s_curIndent = %d s_indent = %d\n", s_curIndent, s_indent));

      if (s_curIndent<=s_indent)  {
         // jumped out of the class/method

         endOfDef(1);
         s_indent = s_curIndent;
         BEGIN(Search);

      } else {
         current->appendData(EntryKey::Source_Text, text);
      }
   }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
      // start of a single quoted string
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text[0]);

      s_stringContext = YY_START;
      s_specialBlock  = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Source_Text;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
      // start of a double quoted string
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text[0]);

      s_stringContext = YY_START;
      s_specialBlock  = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Source_Text;

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
      // non-special stuff
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);
      s_specialBlock = false;
   }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text[0]);
      incLineNr();
   }
	YY_BREAK
case 124:
YY_RULE_SETUP
{
      // normal comment
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 125:
YY_RULE_SETUP
{
      // any character
      QString text = QString::fromUtf8(yytext);
      s_specialBlock = false;
      current->appendData(EntryKey::Source_Text, text);
   }
	YY_BREAK
case 126:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);

      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);

      initTriSingleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK

case 128:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "class");
      }

      current->section = Entry::CLASS_SEC;
      current->m_entryName = text;

      // prepend scope in case of nested classes
      if (current_root->section & Entry::SCOPE_MASK) {
         current->m_entryName.prepend(current_root->m_entryName + "::");
      }

      current->m_entryName     = current->m_entryName.trimmed();
      current->setData(EntryKey::File_Name,   yyFileName);

      docBlockContext   = YY_START;
      docBlockInBody    = false;
      isJavaDocStyle    = false;

      docBlock.resize(0);
      BEGIN(ClassInheritance);
   }
	YY_BREAK

case 129:
YY_RULE_SETUP
{
      // syntactic sugar for the list
   }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
      // begin of the class definition
      s_specialBlock         = true;                // expecting a docstring
      current->startBodyLine = yyLineNr;
      current->setData(EntryKey::Source_Text, "");
      BEGIN(ClassCaptureIndent);
   }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      current->extends.append(BaseInfo(substitute(text,".","::"), Public, Normal));
      // Has base class-do stuff
   }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
      // start of a single quoted string
      s_stringContext = YY_START;
      BEGIN(SingleQuoteStringIgnore);
   }
	YY_BREAK
case 133:
YY_RULE_SETUP
{
      // start of a double quoted string
      s_stringContext = YY_START;
      BEGIN(DoubleQuoteStringIgnore);
   }
	YY_BREAK

case 134:
YY_RULE_SETUP
{
      // end of a single quoted string
      BEGIN(s_stringContext);
   }
	YY_BREAK
case 135:
YY_RULE_SETUP
{
      // do nothing
   }
	YY_BREAK

case 136:
YY_RULE_SETUP
{
      // end of a double quoted string
      BEGIN(s_stringContext);
   }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
      // do nothing
   }
	YY_BREAK

case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{
      // Blankline - ignore, keep looking for indentation.
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);

      lineCount();
   }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(yytext);

      initTriDoubleQuoteBlock();
      current->appendData(EntryKey::Source_Text, text);
      BEGIN(TripleComment);
   }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(yytext);

      initTriSingleQuoteBlock();
      current->appendData(EntryKey::Source_Text, text);
      BEGIN(TripleComment);
   }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
         // start of a special comment
         initSpecialBlock();
         BEGIN(SpecialComment);
      }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
         // ignore comment with just one #
      }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Source_Text, text);

      s_curIndent = computeIndent(text);
      bodyEntry   = current;

      DBG_CTX((stderr,"setting indent %d\n",s_curIndent));

      BEGIN(ClassBody);
   }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
      // Just pushback an empty class, and resume parsing the body
      QString text = QString::fromUtf8(yytext);

      newEntry();
      current->appendData(EntryKey::Source_Text, text);

      BEGIN( Search );
   }
	YY_BREAK

case 145:
YY_RULE_SETUP
{
      // the assignment operator
      QString text = QString::fromUtf8(yytext);
      s_start_init = true;

      current->setData(EntryKey::Initial_Value, text + " ");
   }
	YY_BREAK
case 146:
YY_RULE_SETUP
{
      // spaces
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 147:
YY_RULE_SETUP
{
      // integer value
      QString text  = QString::fromUtf8(yytext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "int");
      }

      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 148:
YY_RULE_SETUP
{
      // floating point value
      QString text  = QString::fromUtf8(yytext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "float");
      }

      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 149:
YY_RULE_SETUP
{
      // boolean value
      QString text  = QString::fromUtf8(yytext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "bool");
      }

      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 150:
YY_RULE_SETUP
{
      // string
      QString text  = QString::fromUtf8(yytext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "string");
      }

      current->appendData(EntryKey::Initial_Value, text);

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      s_stringContext = VariableDec;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 151:
YY_RULE_SETUP
{
      // string
      QString text  = QString::fromUtf8(yytext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "string");
      }

      current->appendData(EntryKey::Initial_Value, text);

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      s_stringContext = VariableDec;
      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 152:
YY_RULE_SETUP
{
      // start of a comment block
      QString text  = QString::fromUtf8(yytext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "string");
      }

      current->appendData(EntryKey::Initial_Value, text);

      s_doubleQuote = true;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      s_stringContext = VariableDec;

      BEGIN(TripleString);
   }
	YY_BREAK
case 153:
YY_RULE_SETUP
{
      // start of a comment block
      QString text  = QString::fromUtf8(yytext);

      if (current->getData(EntryKey::Member_Type).isEmpty())  {
         current->setData(EntryKey::Member_Type, "string");
      }

      current->appendData(EntryKey::Initial_Value, text);

      s_doubleQuote = false;

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      s_stringContext = VariableDec;

      BEGIN(TripleString);
   }
	YY_BREAK
case 154:
YY_RULE_SETUP
{
      // tuple, only when direct after =

      if (current->mtype != MethodType::Property && s_start_init) {
         current->setData(EntryKey::Member_Type, "tuple");
      }

      current->appendData(EntryKey::Initial_Value, "(");

      s_atomStart = '(';
      s_atomEnd   = ')';
      s_atomCount = 1;
      BEGIN( VariableAtom );
   }
	YY_BREAK
case 155:
YY_RULE_SETUP
{
      // list
      if (s_start_init) {
         current->setData(EntryKey::Member_Type, "list");
      }

      current->appendData(EntryKey::Initial_Value, "[");

      s_atomStart = '[';
      s_atomEnd   = ']';
      s_atomCount = 1;
      BEGIN( VariableAtom );
   }
	YY_BREAK
case 156:
YY_RULE_SETUP
{
      // dictionary

      if (s_start_init) {
         current->setData(EntryKey::Member_Type, "dictionary");
      }

      current->appendData(EntryKey::Initial_Value, "{");

      s_atomStart = '{';
      s_atomEnd   = '}';
      s_atomCount = 1;
      BEGIN( VariableAtom );
   }
	YY_BREAK
case 157:
YY_RULE_SETUP
{
      // comment
      BEGIN( VariableEnd );
   }
	YY_BREAK
case 158:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      // do something based on the type of the IDENTIFIER
      if (current->getData(EntryKey::Member_Type).isEmpty())  {

         for (auto child : current_root->children() )  {

            if (child->m_entryName == text) {
               current->setData(EntryKey::Member_Type,  child->getData(EntryKey::Member_Type));
               break;
            }
         }
      }

      s_start_init = false;
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 159:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      s_start_init = false;
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
{
      unput('\n');
      BEGIN( VariableEnd );
   }
	YY_BREAK

case 161:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Initial_Value,  text[0]);

      if (s_atomStart == text[0]) {
         s_atomCount++;
      }
   }
	YY_BREAK
case 162:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Initial_Value,  text[0]);

      if (s_atomEnd == text[0]) {
         s_atomCount--;
      }

      if (s_atomCount == 0) {
         s_start_init = false;
         BEGIN(VariableDec);
      }
   }
	YY_BREAK
case 163:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(yytext);
      s_specialBlock = false;
      current->appendData(EntryKey::Source_Text, text);
      initTriDoubleQuoteBlock();
      BEGIN(TripleComment);
   }
	YY_BREAK
case 164:
YY_RULE_SETUP
{
      // start of a comment block
      QString text = QString::fromUtf8(yytext);

      s_specialBlock = false;
      current->appendData(EntryKey::Source_Text, text);
      initTriSingleQuoteBlock();

      BEGIN(TripleComment);
   }
	YY_BREAK
case 165:
YY_RULE_SETUP
{
      s_stringContext = YY_START;
      current->appendData(EntryKey::Initial_Value, "'");

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      BEGIN( SingleQuoteString );
   }
	YY_BREAK
case 166:
YY_RULE_SETUP
{
      s_stringContext = YY_START;
      current->appendData(EntryKey::Initial_Value, "\"");

      s_defVal_active = false;
      s_docsEntry     = current;
      s_docsEnum      = EntryKey::Initial_Value;

      BEGIN( DoubleQuoteString );
   }
	YY_BREAK
case 167:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 168:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Initial_Value, text);
   }
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      current->appendData(EntryKey::Initial_Value, text);

      incLineNr();
   }
	YY_BREAK

case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
{
      incLineNr();
      newVariable();
      BEGIN(Search);
   }
	YY_BREAK
case 171:
YY_RULE_SETUP
{
      unput(*yytext);
      newVariable();
      BEGIN(Search);
   }
	YY_BREAK
case YY_STATE_EOF(VariableEnd):
{
      yyterminate();
   }
	YY_BREAK

case 172:
case 173:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);

      if (s_doubleQuote == (text[0] == '"'))  {

         if (s_specialBlock) {
            // expecting a docstring
            QString actualDoc = docBlock;

            if (! docBlockSpecial) {
               // legacy unformatted docstring
               if (! actualDoc.isEmpty()) {
                  actualDoc.prepend("\\verbatim ");
                  actualDoc.append("\\endverbatim ");
               }
            }

            handleCommentBlock(actualDoc, false);

         } else if (s_packageCommentAllowed) {
            // expecting module docs
            QString actualDoc = docBlock;

            if (! docBlockSpecial) {
               // legacy unformatted docstring
               if (! actualDoc.isEmpty()) {

                  actualDoc.prepend("\\verbatim ");
                  actualDoc.append("\\endverbatim ");
               }
            }

            actualDoc.prepend("\\namespace " + s_moduleScope + " ");
            handleCommentBlock(actualDoc, false);
         }

         if ((docBlockContext == ClassBody) || docBlockContext == FunctionBody) {
            current->appendData(EntryKey::Source_Text, docBlock);
            current->appendData(EntryKey::Source_Text, text);
         }

         BEGIN(docBlockContext);

      } else  {
         docBlock += text;

      }

      s_packageCommentAllowed = false;
   }
	YY_BREAK
case 174:
YY_RULE_SETUP
{
      // leading whitespace
      QString text = QString::fromUtf8(yytext);
      int indent   = computeIndent(text);

      if (indent >= s_curIndent) {
         // strip s_curIndent amount of whitespace

         for (int i= 0; i<indent - s_curIndent; i++) {
            docBlock += ' ';
         }

         DBG_CTX((stderr,"stripping indent %d\n",s_curIndent));

      } else {
         DBG_CTX((stderr,"not stripping: %d<%d\n",indent,s_curIndent));
         docBlock += text;

      }
   }
	YY_BREAK
case 175:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      docBlock += text;
   }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      incLineNr();
      docBlock += text;
   }
	YY_BREAK
case 177:
YY_RULE_SETUP
{
      // escaped char
      QString text = QString::fromUtf8(yytext);
      docBlock += text;
   }
	YY_BREAK
case 178:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      docBlock += text;
   }
	YY_BREAK

case 179:
YY_RULE_SETUP
{
      // skip leading hashes
   }
	YY_BREAK
case 180:
/* rule 180 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
      // continuation of the comment on the next line
      docBlock  += '\n';
      docBrief  =  false;

      incLineNr();
   }
	YY_BREAK
case 181:
YY_RULE_SETUP
{
      // any other stuff
      QString text = QString::fromUtf8(yytext);
      docBlock += text;
   }
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
{
      // new line that ends the comment
      handleCommentBlock(docBlock, docBrief);
      incLineNr();
      BEGIN(docBlockContext);
   }
	YY_BREAK
case 183:
YY_RULE_SETUP
{
      // anything we missed
      QString text = QString::fromUtf8(yytext);
      docBlock += text[0];
   }
	YY_BREAK

case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
{
      // line continuation
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);
      incLineNr();
   }
	YY_BREAK
case 185:
YY_RULE_SETUP
{
      // escaped char
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);
   }
	YY_BREAK
case 186:
YY_RULE_SETUP
{
      // triple double quotes
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);
   }
	YY_BREAK
case 187:
YY_RULE_SETUP
{
      // end of the string
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);
      BEGIN(s_stringContext);
   }
	YY_BREAK
case 188:
YY_RULE_SETUP
{
      // normal chars
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);
   }
	YY_BREAK
case 189:
YY_RULE_SETUP
{
      // normal char
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);
   }
	YY_BREAK

case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
{
      // line continuation
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);
      incLineNr();
   }
	YY_BREAK
case 191:
YY_RULE_SETUP
{
      // escaped char
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);
                               }
	YY_BREAK
case 192:
YY_RULE_SETUP
{
      // triple single quotes
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);
   }
	YY_BREAK
case 193:
YY_RULE_SETUP
{
      // end of the string
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);
      BEGIN(s_stringContext);
   }
	YY_BREAK
case 194:
YY_RULE_SETUP
{
      // normal chars
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);
   }
	YY_BREAK
case 195:
YY_RULE_SETUP
{
      // normal char
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);
   }
	YY_BREAK

case 196:
case 197:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);

      bool tmp = (text[0] == '"');

      if (s_doubleQuote == tmp)  {
         BEGIN(s_stringContext);
      }
   }
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      lineCount();
      addToOutput(text);
   }
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      incLineNr();
      addToOutput(text);
   }
	YY_BREAK
case 200:
YY_RULE_SETUP
{
      QString text = QString::fromUtf8(yytext);
      addToOutput(text);
   }
	YY_BREAK

/* ------------ End rules -------------- */
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
{
      lineCount();
   }
	YY_BREAK
case 202:
YY_RULE_SETUP
{
   }
	YY_BREAK
case 203:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Search):
			case YY_STATE_EOF(SearchMemVars):
			case YY_STATE_EOF(TripleComment):
			case YY_STATE_EOF(SpecialComment):
			case YY_STATE_EOF(FunctionDec):
			case YY_STATE_EOF(FunctionParams):
			case YY_STATE_EOF(FunctionAnnotation):
			case YY_STATE_EOF(FunctionTypeAnnotation):
			case YY_STATE_EOF(FunctionParamDefVal):
			case YY_STATE_EOF(ClassDec):
			case YY_STATE_EOF(ClassInheritance):
			case YY_STATE_EOF(ClassCaptureIndent):
			case YY_STATE_EOF(VariableDec):
			case YY_STATE_EOF(VariableAtom):
			case YY_STATE_EOF(SingleQuoteString):
			case YY_STATE_EOF(DoubleQuoteString):
			case YY_STATE_EOF(TripleString):
			case YY_STATE_EOF(SingleQuoteStringIgnore):
			case YY_STATE_EOF(DoubleQuoteStringIgnore):
			case YY_STATE_EOF(FromMod):
			case YY_STATE_EOF(FromModItem):
			case YY_STATE_EOF(Import):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 585 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 585 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 584);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == nullptr)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = nullptr;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return nullptr;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = nullptr;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = nullptr;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = nullptr;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = nullptr;
    yyout = nullptr;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = nullptr;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = nullptr;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = nullptr;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

static void parseCompounds(QSharedPointer<Entry> rt)
{
   // safter to make a temp copy
   const QVector<QSharedPointer<Entry>> tmpChildren = rt->children();

   for (auto ce : tmpChildren) {

      if (! ce->getData(EntryKey::Source_Text).isEmpty()) {
         // init scanner state

         s_inputString   = ce->getData(EntryKey::Source_Text);
         s_inputPosition = 0;

         yyrestart( yyin );

         if (ce->section & Entry::COMPOUND_MASK) {
            current_root = ce;
            BEGIN( Search );

         } else if (ce->parent()) {
            current_root = ce->parent();
            BEGIN( SearchMemVars );
         }

         yyFileName = ce->getData(EntryKey::File_Name);
         yyLineNr   = ce->startBodyLine;

         current = QMakeShared<Entry>();
         initEntry();

         groupEnterCompound(yyFileName, yyLineNr, ce->m_entryName);

         yylex() ;
         s_lexInit = true;

         current = QSharedPointer<Entry>();
         ce->setData(EntryKey::Source_Text, "");

         groupLeaveCompound(yyFileName, yyLineNr, ce->m_entryName);

      }
      parseCompounds(ce);
   }
}

static void parseMain(const QString &fileName, const QString &fileBuf, QSharedPointer<Entry> rt)
{
   initParser();

   s_inputString   = fileBuf;
   s_inputPosition = 0;

   protection      = Public;
   mtype           = MethodType::Method;
   s_static        = false;
   virt            = Normal;

   current_root    = rt;
   s_specialBlock  = false;

   s_inputFile.setFileName(fileName);

   if (s_inputFile.open(QIODevice::ReadOnly)) {
      yyLineNr   = 1;
      yyFileName = fileName;

      //setContext();
      msg("Parsing %s\n", csPrintable(yyFileName));

      QFileInfo fi(fileName);
      s_moduleScope = findPackageScope(fileName);

      QString baseName = fi.baseName();

      if (baseName != "__init__") { // package initializer file is not a package itself
         if (!s_moduleScope.isEmpty()) {
            s_moduleScope += "::";
         }
         s_moduleScope += baseName;
      }

      current            = QMakeShared<Entry>();
      initEntry();

      current->m_entryName    = s_moduleScope;
      current->section        = Entry::NAMESPACE_SEC;
      current->setData(EntryKey::Member_Type, "namespace");

      current->setData(EntryKey::File_Name,   yyFileName);
      current->startLine      = yyLineNr;
      current->startBodyLine  = yyLineNr;

      rt->addSubEntry(current);

      current_root  = current;
      initParser();

      current = QMakeShared<Entry>();
      groupEnterFile(yyFileName, yyLineNr);

      current->reset();
      initEntry();
      yyrestart( yyin );

      BEGIN( Search );
      yylex();
      s_lexInit = true;

      groupLeaveFile(yyFileName, yyLineNr);

      current_root->setData(EntryKey::Source_Text, "");

      current = QSharedPointer<Entry>();
      parseCompounds(current_root);

      s_inputFile.close();
   }
}

static void parsePrototype(const QString &text)
{
   if (text.isEmpty()) {
      warn(yyFileName, yyLineNr, "Empty prototype found");
      return;
   }

   s_specialBlock = false;
   s_packageCommentAllowed = false;

   QString orgInputString;
   int orgInputPosition;
   YY_BUFFER_STATE orgState;

   // save scanner state
   orgState = YY_CURRENT_BUFFER;
   yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE));
   orgInputString   = s_inputString;
   orgInputPosition = s_inputPosition;

   // set new string
   s_inputString   = text;
   s_inputPosition = 0;

   yyrestart( yyin );

   BEGIN( FunctionDec );

   yylex();
   s_lexInit = true;

   current->m_entryName = current->m_entryName.trimmed();
   if (current->section == Entry::MEMBERDOC_SEC && current->getData(EntryKey::Member_Args).isEmpty()) {
      current->section = Entry::VARIABLEDOC_SEC;
   }

   // restore original scanner state

   YY_BUFFER_STATE tmpBuf = YY_CURRENT_BUFFER;
   yy_switch_to_buffer(orgState);
   yy_delete_buffer(tmpBuf);

   s_inputString   = orgInputString;
   s_inputPosition = orgInputPosition;
}

void pyFreeParser()
{
   if (s_lexInit) {
      yylex_destroy();
   }
}

void Python_Parser::parseInput(const QString &fileName, const QString &fileBuf,
                  QSharedPointer<Entry> root, enum ParserMode mode, QStringList &includedFiles, bool useClang)
{
   (void) mode;
   (void) includedFiles;
   (void) useClang;

   s_thisParser = this;

   printlex(yy_flex_debug, true, __FILE__, fileName);
   ::parseMain(fileName, fileBuf, root);
   printlex(yy_flex_debug, false, __FILE__, fileName);
}

bool Python_Parser::needsPreprocessing(const QString &) const
{
  return false;
}

void Python_Parser::parseCode(CodeGenerator &codeOutIntf, const QString &scopeName,
                  const QString &input, SrcLangExt, bool isExampleBlock,
                  const QString &exampleName, QSharedPointer<FileDef> fileDef, int startLine,
                  int endLine, bool inlineFragment, QSharedPointer<MemberDef> memberDef,
                  bool showLineNumbers, QSharedPointer<Definition> searchCtx, bool collectXRefs )
{
   ::parsePythonCode(codeOutIntf, scopeName, input, isExampleBlock, exampleName,
                  fileDef, startLine, endLine, inlineFragment, memberDef,
                  showLineNumbers, searchCtx, collectXRefs);
}

void Python_Parser::parsePrototype(const QString &text)
{
   ::parsePrototype(text);
}

void Python_Parser::resetCodeParserState()
{
   ::resetPythonCodeParserState();
}

